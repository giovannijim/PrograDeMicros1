
UARTADAFRUIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000236  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000236  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800114  00800114  000002de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c8  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000726  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000441  00000000  00000000  000013ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cd  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000251  00000000  00000000  00001cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001f46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
volatile uint8_t  bufferRX;
uint8_t estado;

int main(void)
{
	cli();
  a6:	f8 94       	cli
	DDRB |= (1<<DDB5);
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1<<DDC0);
  ae:	87 b1       	in	r24, 0x07	; 7
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	87 b9       	out	0x07, r24	; 7
	//ESTABLECER PUERTO C2 Y C3 COMO ENTRADA
	DDRC &= ~(1<<PORTC2);
  b4:	87 b1       	in	r24, 0x07	; 7
  b6:	8b 7f       	andi	r24, 0xFB	; 251
  b8:	87 b9       	out	0x07, r24	; 7
	//Habilitar la interrupción puerto C
	PCICR |= (1<<PCIE1);
  ba:	e8 e6       	ldi	r30, 0x68	; 104
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	80 83       	st	Z, r24
	// Habilitar mascara para pines PC2
	PCMSK1 |= 0x04;
  c4:	ec e6       	ldi	r30, 0x6C	; 108
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	84 60       	ori	r24, 0x04	; 4
  cc:	80 83       	st	Z, r24
	sei();
  ce:	78 94       	sei
	initUART9600();
  d0:	0e 94 ed 00 	call	0x1da	; 0x1da <initUART9600>
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <main+0x2e>

000000d6 <__vector_4>:
		
	}
}

ISR(PCINT1_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	3f 93       	push	r19
  e4:	4f 93       	push	r20
  e6:	5f 93       	push	r21
  e8:	6f 93       	push	r22
  ea:	7f 93       	push	r23
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	af 93       	push	r26
  f2:	bf 93       	push	r27
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
	if(!(PINC&(1<<PINC2))) // Si PINC2 se encuentra apagado ejecutar instrucción
  f8:	32 99       	sbic	0x06, 2	; 6
  fa:	07 c0       	rjmp	.+14     	; 0x10a <__vector_4+0x34>
	{
		PORTB |= (1<<PORTB5);
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	85 b9       	out	0x05, r24	; 5
		Menu("LED2\n");
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 08 01 	call	0x210	; 0x210 <Menu>
	}
	PCIFR |= (1<<PCIF1); // Apagar la bandera de interrupción
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	8b bb       	out	0x1b, r24	; 27
}
 110:	ff 91       	pop	r31
 112:	ef 91       	pop	r30
 114:	bf 91       	pop	r27
 116:	af 91       	pop	r26
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	7f 91       	pop	r23
 11e:	6f 91       	pop	r22
 120:	5f 91       	pop	r21
 122:	4f 91       	pop	r20
 124:	3f 91       	pop	r19
 126:	2f 91       	pop	r18
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_18>:

ISR(USART_RX_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	2f 93       	push	r18
 13e:	3f 93       	push	r19
 140:	4f 93       	push	r20
 142:	5f 93       	push	r21
 144:	6f 93       	push	r22
 146:	7f 93       	push	r23
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
 14c:	af 93       	push	r26
 14e:	bf 93       	push	r27
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
	//Se almacena en la variable lo que se recibe de UDR0
	bufferRX = UDR0;
 154:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 158:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <bufferRX>
	 if (bufferRX == 0x30) {
 15c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <bufferRX>
 160:	80 33       	cpi	r24, 0x30	; 48
 162:	69 f4       	brne	.+26     	; 0x17e <__vector_18+0x4c>
		estado = 0;			// Se establece estado 0
 164:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
		PORTC &= ~(1<<PORTC0);
 168:	88 b1       	in	r24, 0x08	; 8
 16a:	8e 7f       	andi	r24, 0xFE	; 254
 16c:	88 b9       	out	0x08, r24	; 8
		PORTB &= ~(1<<PORTB5);
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	8f 7d       	andi	r24, 0xDF	; 223
 172:	85 b9       	out	0x05, r24	; 5
		Menu("APAGAR\n");
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 08 01 	call	0x210	; 0x210 <Menu>
 17c:	1d c0       	rjmp	.+58     	; 0x1b8 <__vector_18+0x86>
	}
	// Conversion de ASCII
	else if (bufferRX == 0x31){
 17e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <bufferRX>
 182:	81 33       	cpi	r24, 0x31	; 49
 184:	59 f4       	brne	.+22     	; 0x19c <__vector_18+0x6a>
		estado = 1; // Se establece estado 1
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
		PORTC |= (1<<PORTC0);
 18c:	88 b1       	in	r24, 0x08	; 8
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	88 b9       	out	0x08, r24	; 8
		Menu("LED1\n");
 192:	8e e0       	ldi	r24, 0x0E	; 14
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 08 01 	call	0x210	; 0x210 <Menu>
 19a:	0e c0       	rjmp	.+28     	; 0x1b8 <__vector_18+0x86>
	}
	
	else if (bufferRX == 0x32) {
 19c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <bufferRX>
 1a0:	82 33       	cpi	r24, 0x32	; 50
 1a2:	51 f4       	brne	.+20     	; 0x1b8 <__vector_18+0x86>
		estado = 2;			// Se establece estado 3
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
		PORTB |= (1<<PORTB5);
 1aa:	85 b1       	in	r24, 0x05	; 5
 1ac:	80 62       	ori	r24, 0x20	; 32
 1ae:	85 b9       	out	0x05, r24	; 5
		Menu("LED2\n");
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 08 01 	call	0x210	; 0x210 <Menu>
	}
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	7f 91       	pop	r23
 1c6:	6f 91       	pop	r22
 1c8:	5f 91       	pop	r21
 1ca:	4f 91       	pop	r20
 1cc:	3f 91       	pop	r19
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <initUART9600>:
	for(i=0; texto[i]!='\0'; i++){
		while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
		UDR0 = texto[i];				// Enviando caracter por caracter
	}
	
}
 1da:	8a b1       	in	r24, 0x0a	; 10
 1dc:	8e 7f       	andi	r24, 0xFE	; 254
 1de:	8a b9       	out	0x0a, r24	; 10
 1e0:	8a b1       	in	r24, 0x0a	; 10
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	8a b9       	out	0x0a, r24	; 10
 1e6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1ea:	e1 ec       	ldi	r30, 0xC1	; 193
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	10 82       	st	Z, r1
 1f0:	80 81       	ld	r24, Z
 1f2:	88 69       	ori	r24, 0x98	; 152
 1f4:	80 83       	st	Z, r24
 1f6:	e2 ec       	ldi	r30, 0xC2	; 194
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	10 82       	st	Z, r1
 1fc:	80 81       	ld	r24, Z
 1fe:	86 60       	ori	r24, 0x06	; 6
 200:	80 83       	st	Z, r24
 202:	87 e6       	ldi	r24, 0x67	; 103
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 20a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 20e:	08 95       	ret

00000210 <Menu>:

void Menu (char* text){
 210:	ac 01       	movw	r20, r24
	// Se realiza un ciclo for para recorrer la cadena
	uint8_t i;
	for(i=0; text[i]!='\0'; i++){
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	07 c0       	rjmp	.+14     	; 0x224 <Menu+0x14>
		while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
 216:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 21a:	95 ff       	sbrs	r25, 5
 21c:	fc cf       	rjmp	.-8      	; 0x216 <Menu+0x6>
		UDR0 = text[i];					 // Enviando caracter por caracter
 21e:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}

void Menu (char* text){
	// Se realiza un ciclo for para recorrer la cadena
	uint8_t i;
	for(i=0; text[i]!='\0'; i++){
 222:	2f 5f       	subi	r18, 0xFF	; 255
 224:	fa 01       	movw	r30, r20
 226:	e2 0f       	add	r30, r18
 228:	f1 1d       	adc	r31, r1
 22a:	30 81       	ld	r19, Z
 22c:	31 11       	cpse	r19, r1
 22e:	f3 cf       	rjmp	.-26     	; 0x216 <Menu+0x6>
		while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
		UDR0 = text[i];					 // Enviando caracter por caracter
	}
	
}
 230:	08 95       	ret

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
