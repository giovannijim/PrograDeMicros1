
Lab04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000200  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800110  00800110  000002a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000807  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c0  00000000  00000000  00000b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ba  00000000  00000000  0000121b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  000015d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011e  00000000  00000000  00001a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  9e:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
    }
}


void setup(void){
	contador = 0;
  a6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	// Se apaga tx y rx
	UCSR0B = 0;
  aa:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Se establece el puerto D como salida
	PORTD = 0x00;
  ae:	1b b8       	out	0x0b, r1	; 11
	DDRD |= 0xFF;
  b0:	8a b1       	in	r24, 0x0a	; 10
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8a b9       	out	0x0a, r24	; 10
	// Se establece el puerto B como salida
	PORTB = 0x00;
  b6:	15 b8       	out	0x05, r1	; 5
	DDRB |= 0xFF;
  b8:	94 b1       	in	r25, 0x04	; 4
  ba:	84 b9       	out	0x04, r24	; 4
	// ESTABLECER PORT C4 Y C5 como salida
	DDRC |= (1<<PORTC4)|(1<<PORTC5);
  bc:	87 b1       	in	r24, 0x07	; 7
  be:	80 63       	ori	r24, 0x30	; 48
  c0:	87 b9       	out	0x07, r24	; 7
	PORTC = 0 ;
  c2:	18 b8       	out	0x08, r1	; 8
	
	// ESTABLECER PULLUP EN PUERTO C2 Y C3
	PORTC |= (1<<PORTC2)|(1<<PORTC3);
  c4:	88 b1       	in	r24, 0x08	; 8
  c6:	8c 60       	ori	r24, 0x0C	; 12
  c8:	88 b9       	out	0x08, r24	; 8
	//ESTABLECER PUERTO C2 Y C3 COMO ENTRADA
	DDRD &= ~(1<<PORTC2)|~(1<<PORTC3);
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	8a b9       	out	0x0a, r24	; 10
	
	
	//Habilitar la interrupción puerto C
	PCICR |= (1<<PCIE1);
  ce:	e8 e6       	ldi	r30, 0x68	; 104
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	80 83       	st	Z, r24
	// Habilitar mascara para pines PC5 Y PC4
	PCMSK1 |= 0x0C;
  d8:	ec e6       	ldi	r30, 0x6C	; 108
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	8c 60       	ori	r24, 0x0C	; 12
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <initADC>:

}

void initADC(void){
	// Se selecciona el canal 6 ADC
	ADMUX = 0;
  e4:	ec e7       	ldi	r30, 0x7C	; 124
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	10 82       	st	Z, r1
	ADMUX |= (1<<MUX2)|(1<<MUX1);
  ea:	80 81       	ld	r24, Z
  ec:	86 60       	ori	r24, 0x06	; 6
  ee:	80 83       	st	Z, r24
	
	// Se selecciona el voltaje VREF 5V
	ADMUX |= (1<<REFS0);
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  f6:	80 81       	ld	r24, Z
  f8:	8f 77       	andi	r24, 0x7F	; 127
  fa:	80 83       	st	Z, r24
	
	// Se justifica hacia la izquierda la salida del adc
	ADMUX |= (1 << ADLAR);
  fc:	80 81       	ld	r24, Z
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	80 83       	st	Z, r24
	
	// Habilitar prescaler de 16M/128 fadc = 125khz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 102:	ea e7       	ldi	r30, 0x7A	; 122
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	87 60       	ori	r24, 0x07	; 7
 10a:	80 83       	st	Z, r24
	
	// Activar la interrupcion del ADC
	ADCSRA |= (1<<ADIE);
 10c:	80 81       	ld	r24, Z
 10e:	88 60       	ori	r24, 0x08	; 8
 110:	80 83       	st	Z, r24
	
	// Se activa el ADC
	ADCSRA |= (1<< ADEN);
 112:	80 81       	ld	r24, Z
 114:	80 68       	ori	r24, 0x80	; 128
 116:	80 83       	st	Z, r24
 118:	08 95       	ret

0000011a <main>:

void setup(void);

int main(void)
{	
	cli();
 11a:	f8 94       	cli
    setup();
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	initADC();
 120:	0e 94 72 00 	call	0xe4	; 0xe4 <initADC>
	sei();
 124:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	8f e7       	ldi	r24, 0x7F	; 127
 128:	9e e3       	ldi	r25, 0x3E	; 62
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x10>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x16>
 130:	00 00       	nop
	
    while (1) 
    {
		_delay_ms(4);
		PORTC &= !(1<<PORTC5);
 132:	88 b1       	in	r24, 0x08	; 8
 134:	18 b8       	out	0x08, r1	; 8
		PORTC |= (1<<PORTC4);
 136:	88 b1       	in	r24, 0x08	; 8
 138:	80 61       	ori	r24, 0x10	; 16
 13a:	88 b9       	out	0x08, r24	; 8
		PORTD = mylist[pointer1];
 13c:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <pointer1>
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	e0 50       	subi	r30, 0x00	; 0
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	80 81       	ld	r24, Z
 148:	8b b9       	out	0x0b, r24	; 11
 14a:	8f e7       	ldi	r24, 0x7F	; 127
 14c:	9e e3       	ldi	r25, 0x3E	; 62
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0x34>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x3a>
 154:	00 00       	nop
		_delay_ms(4);
		PORTC &= !(1<<PORTC4);
 156:	88 b1       	in	r24, 0x08	; 8
 158:	18 b8       	out	0x08, r1	; 8
		PORTC |= (1<<PORTC5);
 15a:	88 b1       	in	r24, 0x08	; 8
 15c:	80 62       	ori	r24, 0x20	; 32
 15e:	88 b9       	out	0x08, r24	; 8
		PORTD = mylist[pointer2];
 160:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <pointer2>
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	e0 50       	subi	r30, 0x00	; 0
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	80 81       	ld	r24, Z
 16c:	8b b9       	out	0x0b, r24	; 11
		// Se comienza la conversion en ADC
		ADCSRA |= (1<< ADSC);
 16e:	ea e7       	ldi	r30, 0x7A	; 122
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 64       	ori	r24, 0x40	; 64
 176:	80 83       	st	Z, r24
		PORTB = contador;
 178:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 17c:	85 b9       	out	0x05, r24	; 5
 17e:	d3 cf       	rjmp	.-90     	; 0x126 <main+0xc>

00000180 <__vector_21>:
	ADCSRA |= (1<< ADEN);
	
}

ISR(ADC_vect)
{
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	8f 93       	push	r24
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
	 
	pointer1 = ADCH & 0x0F;	
 190:	e9 e7       	ldi	r30, 0x79	; 121
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8f 70       	andi	r24, 0x0F	; 15
 198:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <pointer1>
	pointer2 = ADCH & 0xF0;
 19c:	80 81       	ld	r24, Z
	pointer2 = pointer2 >> 4;
 19e:	82 95       	swap	r24
 1a0:	8f 70       	andi	r24, 0x0F	; 15
 1a2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <pointer2>
	ADCSRA |= (1<<ADIF);
 1a6:	ea e7       	ldi	r30, 0x7A	; 122
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	80 61       	ori	r24, 0x10	; 16
 1ae:	80 83       	st	Z, r24
}
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	8f 91       	pop	r24
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <__vector_4>:

ISR(PCINT1_vect)
{
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
	if(!(PINC&(1<<PINC2)))
 1cc:	32 99       	sbic	0x06, 2	; 6
 1ce:	06 c0       	rjmp	.+12     	; 0x1dc <__vector_4+0x1c>
	{
		contador ++;
 1d0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1d4:	8f 5f       	subi	r24, 0xFF	; 255
 1d6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <__vector_4+0x2a>
	}
	else if(!(PINC&(1<<PINC3)))
 1dc:	33 99       	sbic	0x06, 3	; 6
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <__vector_4+0x2a>
	{
		contador --;
 1e0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1e4:	81 50       	subi	r24, 0x01	; 1
 1e6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	}
	PCIFR |= (1<<PCIF1);
 1ea:	8b b3       	in	r24, 0x1b	; 27
 1ec:	82 60       	ori	r24, 0x02	; 2
 1ee:	8b bb       	out	0x1b, r24	; 27
}
 1f0:	8f 91       	pop	r24
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
