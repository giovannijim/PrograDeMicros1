
Lab04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000236  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000236  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  000002da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000838  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c0  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fb  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001688  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011e  00000000  00000000  00001b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001c2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  9e:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
}

// Subrutina setup ------------------------------------------------------------
void setup(void){
	// Establecer la variable contador en 0
	contador = 0;
  a6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	// Se apaga tx y rx
	UCSR0B = 0;
  aa:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Se establece el puerto D como salida
	PORTD = 0x00;
  ae:	1b b8       	out	0x0b, r1	; 11
	DDRD |= 0xFF;
  b0:	8a b1       	in	r24, 0x0a	; 10
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8a b9       	out	0x0a, r24	; 10
	// Se establece el puerto B como salida
	PORTB = 0x00;
  b6:	15 b8       	out	0x05, r1	; 5
	DDRB |= 0xFF;
  b8:	94 b1       	in	r25, 0x04	; 4
  ba:	84 b9       	out	0x04, r24	; 4
	// ESTABLECER PORT C0, C1, C4 Y C5 como salida
	DDRC |= (1<<PORTC0)|(1<<PORTC1)|(1<<PORTC4)|(1<<PORTC5);
  bc:	87 b1       	in	r24, 0x07	; 7
  be:	83 63       	ori	r24, 0x33	; 51
  c0:	87 b9       	out	0x07, r24	; 7
	PORTC = 0 ;
  c2:	18 b8       	out	0x08, r1	; 8
	// ESTABLECER PULLUP EN PUERTO C2 Y C3
	PORTC |= (1<<PORTC2)|(1<<PORTC3);
  c4:	88 b1       	in	r24, 0x08	; 8
  c6:	8c 60       	ori	r24, 0x0C	; 12
  c8:	88 b9       	out	0x08, r24	; 8
	//ESTABLECER PUERTO C2 Y C3 COMO ENTRADA
	DDRD &= ~(1<<PORTC2)|~(1<<PORTC3);
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	8a b9       	out	0x0a, r24	; 10
	//Habilitar la interrupción puerto C
	PCICR |= (1<<PCIE1);
  ce:	e8 e6       	ldi	r30, 0x68	; 104
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	80 83       	st	Z, r24
	// Habilitar mascara para pines PC5 Y PC4
	PCMSK1 |= 0x0C;
  d8:	ec e6       	ldi	r30, 0x6C	; 108
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	8c 60       	ori	r24, 0x0C	; 12
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <initADC>:
}

// INIT ADC -------------------------------------------------------------------
void initADC(void){
	// Se selecciona el canal 6 ADC
	ADMUX = 0;
  e4:	ec e7       	ldi	r30, 0x7C	; 124
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	10 82       	st	Z, r1
	ADMUX |= (1<<MUX2)|(1<<MUX1);
  ea:	80 81       	ld	r24, Z
  ec:	86 60       	ori	r24, 0x06	; 6
  ee:	80 83       	st	Z, r24
	// Se selecciona el voltaje VREF 5V
	ADMUX |= (1<<REFS0);
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  f6:	80 81       	ld	r24, Z
  f8:	8f 77       	andi	r24, 0x7F	; 127
  fa:	80 83       	st	Z, r24
	// Se justifica hacia la izquierda la salida del adc
	ADMUX |= (1 << ADLAR);
  fc:	80 81       	ld	r24, Z
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	80 83       	st	Z, r24
	// Habilitar prescaler de 16M/128 fadc = 125khz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 102:	ea e7       	ldi	r30, 0x7A	; 122
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	87 60       	ori	r24, 0x07	; 7
 10a:	80 83       	st	Z, r24
	// Activar la interrupcion del ADC
	ADCSRA |= (1<<ADIE);
 10c:	80 81       	ld	r24, Z
 10e:	88 60       	ori	r24, 0x08	; 8
 110:	80 83       	st	Z, r24
	// Se activa el ADC
	ADCSRA |= (1<< ADEN);
 112:	80 81       	ld	r24, Z
 114:	80 68       	ori	r24, 0x80	; 128
 116:	80 83       	st	Z, r24
 118:	08 95       	ret

0000011a <__vector_21>:
}

// Vector de interrupcion ADC -------------------------------------------------
ISR(ADC_vect)
{ 
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
	// Se realiza una selección de los bits que nos importan
	pointer1 = ADCH & 0x0F;	
 12a:	e9 e7       	ldi	r30, 0x79	; 121
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <pointer1>
	pointer2 = ADCH & 0xF0;
 136:	80 81       	ld	r24, Z
	// Se realizar un corrimiento del pointer 2
	pointer2 = pointer2 >> 4;
 138:	82 95       	swap	r24
 13a:	8f 70       	andi	r24, 0x0F	; 15
 13c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <pointer2>
	// Se escribe con un 1 lógico la bandera para apagarla
	ADCSRA |= (1<<ADIF);
 140:	ea e7       	ldi	r30, 0x7A	; 122
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	80 61       	ori	r24, 0x10	; 16
 148:	80 83       	st	Z, r24
}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_4>:

// Vector de interrupcion PCINT1 ----------------------------------------------
ISR(PCINT1_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
	if(!(PINC&(1<<PINC2))) // Si PINC2 se encuentra apagado ejecutar instrucción
 166:	32 99       	sbic	0x06, 2	; 6
 168:	06 c0       	rjmp	.+12     	; 0x176 <__vector_4+0x1c>
	{
		contador ++; // Aumentar el contador
 16a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 16e:	8f 5f       	subi	r24, 0xFF	; 255
 170:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 174:	07 c0       	rjmp	.+14     	; 0x184 <__vector_4+0x2a>
	}
	else if(!(PINC&(1<<PINC3))) // Si PINC3 se encuentra apagado ejecutar instrucción
 176:	33 99       	sbic	0x06, 3	; 6
 178:	05 c0       	rjmp	.+10     	; 0x184 <__vector_4+0x2a>
	{
		contador --; // Disminuir el contador
 17a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 17e:	81 50       	subi	r24, 0x01	; 1
 180:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	}
	PCIFR |= (1<<PCIF1); // Apagar la bandera de interrupción
 184:	8b b3       	in	r24, 0x1b	; 27
 186:	82 60       	ori	r24, 0x02	; 2
 188:	8b bb       	out	0x1b, r24	; 27
}
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <alarma>:

// Rutina para verificar que el valor de lectura del ADC es mayor al contador
void alarma(void){
	// Si el byte ADCH es mayor al contador prender el bit PD1
	if( ADCH > contador){
 196:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 19a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 19e:	89 17       	cp	r24, r25
 1a0:	20 f4       	brcc	.+8      	; 0x1aa <alarma+0x14>
			PORTD |= (1<<PORTD0);
 1a2:	8b b1       	in	r24, 0x0b	; 11
 1a4:	81 60       	ori	r24, 0x01	; 1
 1a6:	8b b9       	out	0x0b, r24	; 11
 1a8:	08 95       	ret
	}
	// Si no es igual apagar el bit PD0
	else {
		PORTD &= ~(1<<PORTD0);
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	8e 7f       	andi	r24, 0xFE	; 254
 1ae:	8b b9       	out	0x0b, r24	; 11
 1b0:	08 95       	ret

000001b2 <main>:
void alarma(void);

// Rutina Principal -----------------------------------------------------------
int main(void)
{	
	cli();								// Deshabilitar interrupciones globales
 1b2:	f8 94       	cli
    setup();							// Dirigirse a la subrutina setup
 1b4:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	initADC();							// Dirigirse a la subrutina initADC
 1b8:	0e 94 72 00 	call	0xe4	; 0xe4 <initADC>
	sei();								// Habilitar interrupciones globales
 1bc:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	8f e7       	ldi	r24, 0x7F	; 127
 1c0:	9e e3       	ldi	r25, 0x3E	; 62
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <main+0x10>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x16>
 1c8:	00 00       	nop
	
    while (1) 
    {
		// Multiplexacion
		_delay_ms(4);					// Delay de 4 ms
		PORTC &= !(1<<PORTC5);			// Apaga el puerto PC5
 1ca:	88 b1       	in	r24, 0x08	; 8
 1cc:	18 b8       	out	0x08, r1	; 8
		PORTC |= (1<<PORTC4);			// Prende el puerto PC4
 1ce:	88 b1       	in	r24, 0x08	; 8
 1d0:	80 61       	ori	r24, 0x10	; 16
 1d2:	88 b9       	out	0x08, r24	; 8
		PORTD = mylist[pointer1];		// Cargar al puerto D el valor de la lista mylist en la posicion pointer 1
 1d4:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <pointer1>
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	e0 50       	subi	r30, 0x00	; 0
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	80 81       	ld	r24, Z
 1e0:	8b b9       	out	0x0b, r24	; 11
 1e2:	8f e7       	ldi	r24, 0x7F	; 127
 1e4:	9e e3       	ldi	r25, 0x3E	; 62
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <main+0x34>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x3a>
 1ec:	00 00       	nop
		_delay_ms(4);					// Delay de 4 ms
		PORTC &= !(1<<PORTC4);			// Apaga el puerto PC4
 1ee:	88 b1       	in	r24, 0x08	; 8
 1f0:	18 b8       	out	0x08, r1	; 8
		PORTC |= (1<<PORTC5);			// Prende el puerto PC5
 1f2:	88 b1       	in	r24, 0x08	; 8
 1f4:	80 62       	ori	r24, 0x20	; 32
 1f6:	88 b9       	out	0x08, r24	; 8
		PORTD = mylist[pointer2];		// Cargar al puerto D el valor de la lista mylist en la posicion pointer 2
 1f8:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <pointer2>
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	e0 50       	subi	r30, 0x00	; 0
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	80 81       	ld	r24, Z
 204:	8b b9       	out	0x0b, r24	; 11
		
		// Se comienza la conversion en ADC
		ADCSRA |= (1<< ADSC);
 206:	ea e7       	ldi	r30, 0x7A	; 122
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	80 64       	ori	r24, 0x40	; 64
 20e:	80 83       	st	Z, r24
		
		PORTB = contador;				// Cargar el valor del contador al puerto B
 210:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 214:	85 b9       	out	0x05, r24	; 5
		contador_desp = contador  >> 6;	// Desplazar los bits del contador 6 veces a la derecha
 216:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 21a:	82 95       	swap	r24
 21c:	86 95       	lsr	r24
 21e:	86 95       	lsr	r24
 220:	83 70       	andi	r24, 0x03	; 3
 222:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <contador_desp>
		PORTC = PORTC | contador_desp;	// Cargar con un OR el contador desplazado (para no afectar los otros bits)
 226:	98 b1       	in	r25, 0x08	; 8
 228:	89 2b       	or	r24, r25
 22a:	88 b9       	out	0x08, r24	; 8
		alarma();						// Dirigirse a la subruitna Alarma
 22c:	0e 94 cb 00 	call	0x196	; 0x196 <alarma>
 230:	c6 cf       	rjmp	.-116    	; 0x1be <main+0xc>

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
