
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000540  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b0b  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ee  00000000  00000000  000011c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000613  00000000  00000000  000019b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00001fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000453  00000000  00000000  000020e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e9  00000000  00000000  00002537  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  78:	0c 94 9e 02 	jmp	0x53c	; 0x53c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initADC>:
 */ 
#include <avr/io.h>
#include <stdint.h>

void initADC(uint8_t puertoADC){
	ADMUX = 0;
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	10 82       	st	Z, r1
	// Se selecciona un canal
	ADMUX = puertoADC;
  86:	80 83       	st	Z, r24
	
	// Se selecciona el voltaje VREF 5V
	ADMUX |= (1<<REFS0);
  88:	80 81       	ld	r24, Z
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  8e:	80 81       	ld	r24, Z
  90:	8f 77       	andi	r24, 0x7F	; 127
  92:	80 83       	st	Z, r24
	// Se justifica hacia la izquierda la salida del adc
	ADMUX |= (1 << ADLAR);
  94:	80 81       	ld	r24, Z
  96:	80 62       	ori	r24, 0x20	; 32
  98:	80 83       	st	Z, r24
	// Habilitar prescaler de 16M/128 fadc = 125khz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	87 60       	ori	r24, 0x07	; 7
  a2:	80 83       	st	Z, r24
	// Activar la interrupcion del ADC
	ADCSRA |= (1<<ADIE);
  a4:	80 81       	ld	r24, Z
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	80 83       	st	Z, r24
	// Se activa el ADC
	ADCSRA |= (1<< ADEN);
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <main>:
void setup(void);

int main(void)
{
	// Se apaga tx y rx
	UCSR0B = 0;
  b2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	cli();
  b6:	f8 94       	cli
	initPWM0FastA(no_invertido, 1024);
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	74 e0       	ldi	r23, 0x04	; 4
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 c7 00 	call	0x18e	; 0x18e <initPWM0FastA>
	initPWM0FastB(no_invertido, 1024);
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	74 e0       	ldi	r23, 0x04	; 4
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <initPWM0FastB>
	
	initPWM2FastA(no_invertido, 1024);
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	74 e0       	ldi	r23, 0x04	; 4
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 0e 01 	call	0x21c	; 0x21c <initPWM2FastA>
	initPWM2FastB(no_invertido, 1024);
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	74 e0       	ldi	r23, 0x04	; 4
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 30 01 	call	0x260	; 0x260 <initPWM2FastB>
	sei();
  e0:	78 94       	sei
	
    while (1) 
    {
		//inicializar ADC7
		initADC(7);
  e2:	87 e0       	ldi	r24, 0x07	; 7
  e4:	0e 94 40 00 	call	0x80	; 0x80 <initADC>
		ADCSRA |= (1<< ADSC);				// Comenzar conversion
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	80 83       	st	Z, r24
		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
  f2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  f6:	86 fd       	sbrc	r24, 6
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <main+0x40>
		updateDutyCyclePWM2A(ADCH);			// Se llama la función de la librería
  fa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  fe:	0e 94 52 01 	call	0x2a4	; 0x2a4 <updateDutyCyclePWM2A>
		
		//inicializar ADC6
		initADC(6);
 102:	86 e0       	ldi	r24, 0x06	; 6
 104:	0e 94 40 00 	call	0x80	; 0x80 <initADC>
		ADCSRA |= (1<< ADSC);				// Comenzar conversion
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 112:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 116:	86 fd       	sbrc	r24, 6
 118:	fc cf       	rjmp	.-8      	; 0x112 <main+0x60>
		updateDutyCyclePWM2B(ADCH);			// Se llama la función de la librería
 11a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 11e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <updateDutyCyclePWM2B>
		
		//inicializar ADC5
		initADC(5);
 122:	85 e0       	ldi	r24, 0x05	; 5
 124:	0e 94 40 00 	call	0x80	; 0x80 <initADC>
		ADCSRA |= (1<< ADSC);				// Comenzar conversion
 128:	ea e7       	ldi	r30, 0x7A	; 122
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	80 83       	st	Z, r24
		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 132:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 136:	86 fd       	sbrc	r24, 6
 138:	fc cf       	rjmp	.-8      	; 0x132 <main+0x80>
		updateDutyCyclePWM0A(ADCH);			// Se llama la función de la librería
 13a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 13e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <updateDutyCyclePWM0A>
		
		//inicializar ADC4
		initADC(4);
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	0e 94 40 00 	call	0x80	; 0x80 <initADC>
		ADCSRA |= (1<< ADSC);				// Comenzar conversion
 148:	ea e7       	ldi	r30, 0x7A	; 122
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	80 83       	st	Z, r24
		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 152:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 156:	86 fd       	sbrc	r24, 6
 158:	fc cf       	rjmp	.-8      	; 0x152 <main+0xa0>
		updateDutyCyclePWM0B(ADCH);			// Se llama la función de la librería
 15a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 15e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <updateDutyCyclePWM0B>
		
    }
 162:	bf cf       	rjmp	.-130    	; 0xe2 <main+0x30>

00000164 <__vector_21>:
}

// Vector de interrupcion ADC -------------------------------------------------
ISR(ADC_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	// Se escribe con un 1 lógico la bandera para apagarla
	ADCSRA |= (1<<ADIF);
 174:	ea e7       	ldi	r30, 0x7A	; 122
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	80 61       	ori	r24, 0x10	; 16
 17c:	80 83       	st	Z, r24
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <initPWM0FastA>:
#define invertido 1
#define no_invertido 0

void initPWM0FastA(uint8_t inverted, uint16_t prescaler){
	//Configurando el pin PD6 como salida (OC0A)
	DDRD |= (1<<DDD6);
 18e:	9a b1       	in	r25, 0x0a	; 10
 190:	90 64       	ori	r25, 0x40	; 64
 192:	9a b9       	out	0x0a, r25	; 10
	
	TCCR0A = 0;
 194:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
 196:	15 bc       	out	0x25, r1	; 37
	
	if (inverted){
 198:	88 23       	and	r24, r24
 19a:	19 f0       	breq	.+6      	; 0x1a2 <initPWM0FastA+0x14>
		//Configurando OC0A como invertido
		TCCR0A |= (1<<COM0A1)|(1<<COM0A0);
 19c:	84 b5       	in	r24, 0x24	; 36
 19e:	80 6c       	ori	r24, 0xC0	; 192
 1a0:	84 bd       	out	0x24, r24	; 36
	else if (no_invertido) {
		//Configurando OC0A como no invertido
		TCCR0A |= (1<<COM0A1);
	}
	// Configurando modo FAST PWM0 TOP 0XFF
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
 1a2:	84 b5       	in	r24, 0x24	; 36
 1a4:	83 60       	ori	r24, 0x03	; 3
 1a6:	84 bd       	out	0x24, r24	; 36
	// Configurando prescaler de 1024
	if (prescaler==1024){
 1a8:	61 15       	cp	r22, r1
 1aa:	74 40       	sbci	r23, 0x04	; 4
 1ac:	19 f4       	brne	.+6      	; 0x1b4 <initPWM0FastA+0x26>
		TCCR0B |= (1<<CS02)|(1<<CS00);
 1ae:	85 b5       	in	r24, 0x25	; 37
 1b0:	85 60       	ori	r24, 0x05	; 5
 1b2:	85 bd       	out	0x25, r24	; 37
 1b4:	08 95       	ret

000001b6 <initPWM0FastB>:
	
}

void initPWM0FastB(uint8_t inverted, uint16_t prescaler){
	//Configurando el pin PD6 como salida (OC0B)
	DDRD |= (1<<DDD5);
 1b6:	9a b1       	in	r25, 0x0a	; 10
 1b8:	90 62       	ori	r25, 0x20	; 32
 1ba:	9a b9       	out	0x0a, r25	; 10
	
	TCCR0B = 0;
 1bc:	15 bc       	out	0x25, r1	; 37
	if (inverted){
 1be:	88 23       	and	r24, r24
 1c0:	19 f0       	breq	.+6      	; 0x1c8 <initPWM0FastB+0x12>
		//Configurando OC0A como invertido
		TCCR0A |= (1<<COM0B1)|(1<<COM0B0);
 1c2:	84 b5       	in	r24, 0x24	; 36
 1c4:	80 63       	ori	r24, 0x30	; 48
 1c6:	84 bd       	out	0x24, r24	; 36
	else if (no_invertido) {
		//Configurando OC0A como no invertido
		TCCR0A |= (1<<COM0B1);
	}
	// Configurando modo FAST PWM0 TOP 0XFF
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
 1c8:	84 b5       	in	r24, 0x24	; 36
 1ca:	83 60       	ori	r24, 0x03	; 3
 1cc:	84 bd       	out	0x24, r24	; 36
	// Configurando prescaler de 1024
	if (prescaler==1024){
 1ce:	61 15       	cp	r22, r1
 1d0:	74 40       	sbci	r23, 0x04	; 4
 1d2:	19 f4       	brne	.+6      	; 0x1da <initPWM0FastB+0x24>
		TCCR0B |= (1<<CS02)|(1<<CS00);
 1d4:	85 b5       	in	r24, 0x25	; 37
 1d6:	85 60       	ori	r24, 0x05	; 5
 1d8:	85 bd       	out	0x25, r24	; 37
 1da:	08 95       	ret

000001dc <updateDutyCyclePWM0A>:
	}
}

void updateDutyCyclePWM0A(uint8_t duty){
	OCR0A = duty * 0.15;
 1dc:	68 2f       	mov	r22, r24
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 a5 01 	call	0x34a	; 0x34a <__floatsisf>
 1e8:	2a e9       	ldi	r18, 0x9A	; 154
 1ea:	39 e9       	ldi	r19, 0x99	; 153
 1ec:	49 e1       	ldi	r20, 0x19	; 25
 1ee:	5e e3       	ldi	r21, 0x3E	; 62
 1f0:	0e 94 09 02 	call	0x412	; 0x412 <__mulsf3>
 1f4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__fixunssfsi>
 1f8:	67 bd       	out	0x27, r22	; 39
 1fa:	08 95       	ret

000001fc <updateDutyCyclePWM0B>:
}

void updateDutyCyclePWM0B(uint8_t duty){
	OCR0B = duty * 0.15;
 1fc:	68 2f       	mov	r22, r24
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 a5 01 	call	0x34a	; 0x34a <__floatsisf>
 208:	2a e9       	ldi	r18, 0x9A	; 154
 20a:	39 e9       	ldi	r19, 0x99	; 153
 20c:	49 e1       	ldi	r20, 0x19	; 25
 20e:	5e e3       	ldi	r21, 0x3E	; 62
 210:	0e 94 09 02 	call	0x412	; 0x412 <__mulsf3>
 214:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__fixunssfsi>
 218:	68 bd       	out	0x28, r22	; 40
 21a:	08 95       	ret

0000021c <initPWM2FastA>:
#define invertido 1
#define no_invertido 0

void initPWM2FastA(uint8_t inverted, uint16_t prescaler){
	//Configurando el pin PB3 como salida (OC2A)
	DDRB |= (1<<DDB3);
 21c:	94 b1       	in	r25, 0x04	; 4
 21e:	98 60       	ori	r25, 0x08	; 8
 220:	94 b9       	out	0x04, r25	; 4
	
	// Limpiar los registros TCC2A Y TCCR2B
	TCCR2A = 0;
 222:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
 226:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	if (inverted){
 22a:	88 23       	and	r24, r24
 22c:	31 f0       	breq	.+12     	; 0x23a <initPWM2FastA+0x1e>
		//Configurando OC2A como invertido
		TCCR2A |= (1<<COM2A1)|(1<<COM2A0);
 22e:	e0 eb       	ldi	r30, 0xB0	; 176
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	80 6c       	ori	r24, 0xC0	; 192
 236:	80 83       	st	Z, r24
 238:	05 c0       	rjmp	.+10     	; 0x244 <initPWM2FastA+0x28>
	}
	else {
		//Configurando OC2A como no invertido
		TCCR2A |= (1<<COM2A1);
 23a:	e0 eb       	ldi	r30, 0xB0	; 176
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	80 68       	ori	r24, 0x80	; 128
 242:	80 83       	st	Z, r24
	}
	// Configurando modo FAST PWM2 TOP 0XFF
	TCCR2A |= (1<<WGM21)|(1<<WGM20);
 244:	e0 eb       	ldi	r30, 0xB0	; 176
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	83 60       	ori	r24, 0x03	; 3
 24c:	80 83       	st	Z, r24
	
	// Configurando prescaler de 1024
	if (prescaler==1024){
 24e:	61 15       	cp	r22, r1
 250:	74 40       	sbci	r23, 0x04	; 4
 252:	29 f4       	brne	.+10     	; 0x25e <initPWM2FastA+0x42>
		TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
 254:	e1 eb       	ldi	r30, 0xB1	; 177
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	87 60       	ori	r24, 0x07	; 7
 25c:	80 83       	st	Z, r24
 25e:	08 95       	ret

00000260 <initPWM2FastB>:
	
}

void initPWM2FastB(uint8_t inverted, uint16_t prescaler){
	//Configurando el pin DDD2 como salida (OC2B)
	DDRD |= (1<<DDD2);
 260:	9a b1       	in	r25, 0x0a	; 10
 262:	94 60       	ori	r25, 0x04	; 4
 264:	9a b9       	out	0x0a, r25	; 10
	
	// Limpiar los registros TCC2A Y TCCR2B
	TCCR2A = 0;
 266:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
 26a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	if (inverted){
 26e:	88 23       	and	r24, r24
 270:	31 f0       	breq	.+12     	; 0x27e <initPWM2FastB+0x1e>
		//Configurando OC2A como invertido
		TCCR2A |= (1<<COM2B1)|(1<<COM2B0);
 272:	e0 eb       	ldi	r30, 0xB0	; 176
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	80 63       	ori	r24, 0x30	; 48
 27a:	80 83       	st	Z, r24
 27c:	05 c0       	rjmp	.+10     	; 0x288 <initPWM2FastB+0x28>
	}
	else {
		//Configurando OC2A como no invertido
		TCCR2A |= (1<<COM2B1);
 27e:	e0 eb       	ldi	r30, 0xB0	; 176
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	80 62       	ori	r24, 0x20	; 32
 286:	80 83       	st	Z, r24
	}
	// Configurando modo FAST PWM2 TOP 0XFF
	TCCR2A |= (1<<WGM21)|(1<<WGM20);
 288:	e0 eb       	ldi	r30, 0xB0	; 176
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	83 60       	ori	r24, 0x03	; 3
 290:	80 83       	st	Z, r24
	
	// Configurando prescaler de 1024
	if (prescaler==1024){
 292:	61 15       	cp	r22, r1
 294:	74 40       	sbci	r23, 0x04	; 4
 296:	29 f4       	brne	.+10     	; 0x2a2 <initPWM2FastB+0x42>
		TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
 298:	e1 eb       	ldi	r30, 0xB1	; 177
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	87 60       	ori	r24, 0x07	; 7
 2a0:	80 83       	st	Z, r24
 2a2:	08 95       	ret

000002a4 <updateDutyCyclePWM2A>:
	
}

void updateDutyCyclePWM2A(uint8_t duty2){
	// Se carga el valor de OCR2A con un factor de mapeado
	OCR2A = duty2 * 0.15;
 2a4:	68 2f       	mov	r22, r24
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 a5 01 	call	0x34a	; 0x34a <__floatsisf>
 2b0:	2a e9       	ldi	r18, 0x9A	; 154
 2b2:	39 e9       	ldi	r19, 0x99	; 153
 2b4:	49 e1       	ldi	r20, 0x19	; 25
 2b6:	5e e3       	ldi	r21, 0x3E	; 62
 2b8:	0e 94 09 02 	call	0x412	; 0x412 <__mulsf3>
 2bc:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__fixunssfsi>
 2c0:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 2c4:	08 95       	ret

000002c6 <updateDutyCyclePWM2B>:
}

void updateDutyCyclePWM2B(uint8_t duty2){
	// Se carga el valor de OCR2A con un factor de mapeado
	OCR2B = duty2 * 0.15;
 2c6:	68 2f       	mov	r22, r24
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 a5 01 	call	0x34a	; 0x34a <__floatsisf>
 2d2:	2a e9       	ldi	r18, 0x9A	; 154
 2d4:	39 e9       	ldi	r19, 0x99	; 153
 2d6:	49 e1       	ldi	r20, 0x19	; 25
 2d8:	5e e3       	ldi	r21, 0x3E	; 62
 2da:	0e 94 09 02 	call	0x412	; 0x412 <__mulsf3>
 2de:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__fixunssfsi>
 2e2:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 2e6:	08 95       	ret

000002e8 <__fixunssfsi>:
 2e8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__fp_splitA>
 2ec:	88 f0       	brcs	.+34     	; 0x310 <__fixunssfsi+0x28>
 2ee:	9f 57       	subi	r25, 0x7F	; 127
 2f0:	98 f0       	brcs	.+38     	; 0x318 <__fixunssfsi+0x30>
 2f2:	b9 2f       	mov	r27, r25
 2f4:	99 27       	eor	r25, r25
 2f6:	b7 51       	subi	r27, 0x17	; 23
 2f8:	b0 f0       	brcs	.+44     	; 0x326 <__fixunssfsi+0x3e>
 2fa:	e1 f0       	breq	.+56     	; 0x334 <__fixunssfsi+0x4c>
 2fc:	66 0f       	add	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	88 1f       	adc	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	1a f0       	brmi	.+6      	; 0x30c <__fixunssfsi+0x24>
 306:	ba 95       	dec	r27
 308:	c9 f7       	brne	.-14     	; 0x2fc <__fixunssfsi+0x14>
 30a:	14 c0       	rjmp	.+40     	; 0x334 <__fixunssfsi+0x4c>
 30c:	b1 30       	cpi	r27, 0x01	; 1
 30e:	91 f0       	breq	.+36     	; 0x334 <__fixunssfsi+0x4c>
 310:	0e 94 02 02 	call	0x404	; 0x404 <__fp_zero>
 314:	b1 e0       	ldi	r27, 0x01	; 1
 316:	08 95       	ret
 318:	0c 94 02 02 	jmp	0x404	; 0x404 <__fp_zero>
 31c:	67 2f       	mov	r22, r23
 31e:	78 2f       	mov	r23, r24
 320:	88 27       	eor	r24, r24
 322:	b8 5f       	subi	r27, 0xF8	; 248
 324:	39 f0       	breq	.+14     	; 0x334 <__fixunssfsi+0x4c>
 326:	b9 3f       	cpi	r27, 0xF9	; 249
 328:	cc f3       	brlt	.-14     	; 0x31c <__fixunssfsi+0x34>
 32a:	86 95       	lsr	r24
 32c:	77 95       	ror	r23
 32e:	67 95       	ror	r22
 330:	b3 95       	inc	r27
 332:	d9 f7       	brne	.-10     	; 0x32a <__fixunssfsi+0x42>
 334:	3e f4       	brtc	.+14     	; 0x344 <__fixunssfsi+0x5c>
 336:	90 95       	com	r25
 338:	80 95       	com	r24
 33a:	70 95       	com	r23
 33c:	61 95       	neg	r22
 33e:	7f 4f       	sbci	r23, 0xFF	; 255
 340:	8f 4f       	sbci	r24, 0xFF	; 255
 342:	9f 4f       	sbci	r25, 0xFF	; 255
 344:	08 95       	ret

00000346 <__floatunsisf>:
 346:	e8 94       	clt
 348:	09 c0       	rjmp	.+18     	; 0x35c <__floatsisf+0x12>

0000034a <__floatsisf>:
 34a:	97 fb       	bst	r25, 7
 34c:	3e f4       	brtc	.+14     	; 0x35c <__floatsisf+0x12>
 34e:	90 95       	com	r25
 350:	80 95       	com	r24
 352:	70 95       	com	r23
 354:	61 95       	neg	r22
 356:	7f 4f       	sbci	r23, 0xFF	; 255
 358:	8f 4f       	sbci	r24, 0xFF	; 255
 35a:	9f 4f       	sbci	r25, 0xFF	; 255
 35c:	99 23       	and	r25, r25
 35e:	a9 f0       	breq	.+42     	; 0x38a <__floatsisf+0x40>
 360:	f9 2f       	mov	r31, r25
 362:	96 e9       	ldi	r25, 0x96	; 150
 364:	bb 27       	eor	r27, r27
 366:	93 95       	inc	r25
 368:	f6 95       	lsr	r31
 36a:	87 95       	ror	r24
 36c:	77 95       	ror	r23
 36e:	67 95       	ror	r22
 370:	b7 95       	ror	r27
 372:	f1 11       	cpse	r31, r1
 374:	f8 cf       	rjmp	.-16     	; 0x366 <__floatsisf+0x1c>
 376:	fa f4       	brpl	.+62     	; 0x3b6 <__floatsisf+0x6c>
 378:	bb 0f       	add	r27, r27
 37a:	11 f4       	brne	.+4      	; 0x380 <__floatsisf+0x36>
 37c:	60 ff       	sbrs	r22, 0
 37e:	1b c0       	rjmp	.+54     	; 0x3b6 <__floatsisf+0x6c>
 380:	6f 5f       	subi	r22, 0xFF	; 255
 382:	7f 4f       	sbci	r23, 0xFF	; 255
 384:	8f 4f       	sbci	r24, 0xFF	; 255
 386:	9f 4f       	sbci	r25, 0xFF	; 255
 388:	16 c0       	rjmp	.+44     	; 0x3b6 <__floatsisf+0x6c>
 38a:	88 23       	and	r24, r24
 38c:	11 f0       	breq	.+4      	; 0x392 <__floatsisf+0x48>
 38e:	96 e9       	ldi	r25, 0x96	; 150
 390:	11 c0       	rjmp	.+34     	; 0x3b4 <__floatsisf+0x6a>
 392:	77 23       	and	r23, r23
 394:	21 f0       	breq	.+8      	; 0x39e <__floatsisf+0x54>
 396:	9e e8       	ldi	r25, 0x8E	; 142
 398:	87 2f       	mov	r24, r23
 39a:	76 2f       	mov	r23, r22
 39c:	05 c0       	rjmp	.+10     	; 0x3a8 <__floatsisf+0x5e>
 39e:	66 23       	and	r22, r22
 3a0:	71 f0       	breq	.+28     	; 0x3be <__floatsisf+0x74>
 3a2:	96 e8       	ldi	r25, 0x86	; 134
 3a4:	86 2f       	mov	r24, r22
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	2a f0       	brmi	.+10     	; 0x3b6 <__floatsisf+0x6c>
 3ac:	9a 95       	dec	r25
 3ae:	66 0f       	add	r22, r22
 3b0:	77 1f       	adc	r23, r23
 3b2:	88 1f       	adc	r24, r24
 3b4:	da f7       	brpl	.-10     	; 0x3ac <__floatsisf+0x62>
 3b6:	88 0f       	add	r24, r24
 3b8:	96 95       	lsr	r25
 3ba:	87 95       	ror	r24
 3bc:	97 f9       	bld	r25, 7
 3be:	08 95       	ret

000003c0 <__fp_split3>:
 3c0:	57 fd       	sbrc	r21, 7
 3c2:	90 58       	subi	r25, 0x80	; 128
 3c4:	44 0f       	add	r20, r20
 3c6:	55 1f       	adc	r21, r21
 3c8:	59 f0       	breq	.+22     	; 0x3e0 <__fp_splitA+0x10>
 3ca:	5f 3f       	cpi	r21, 0xFF	; 255
 3cc:	71 f0       	breq	.+28     	; 0x3ea <__fp_splitA+0x1a>
 3ce:	47 95       	ror	r20

000003d0 <__fp_splitA>:
 3d0:	88 0f       	add	r24, r24
 3d2:	97 fb       	bst	r25, 7
 3d4:	99 1f       	adc	r25, r25
 3d6:	61 f0       	breq	.+24     	; 0x3f0 <__fp_splitA+0x20>
 3d8:	9f 3f       	cpi	r25, 0xFF	; 255
 3da:	79 f0       	breq	.+30     	; 0x3fa <__fp_splitA+0x2a>
 3dc:	87 95       	ror	r24
 3de:	08 95       	ret
 3e0:	12 16       	cp	r1, r18
 3e2:	13 06       	cpc	r1, r19
 3e4:	14 06       	cpc	r1, r20
 3e6:	55 1f       	adc	r21, r21
 3e8:	f2 cf       	rjmp	.-28     	; 0x3ce <__fp_split3+0xe>
 3ea:	46 95       	lsr	r20
 3ec:	f1 df       	rcall	.-30     	; 0x3d0 <__fp_splitA>
 3ee:	08 c0       	rjmp	.+16     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f0:	16 16       	cp	r1, r22
 3f2:	17 06       	cpc	r1, r23
 3f4:	18 06       	cpc	r1, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	f1 cf       	rjmp	.-30     	; 0x3dc <__fp_splitA+0xc>
 3fa:	86 95       	lsr	r24
 3fc:	71 05       	cpc	r23, r1
 3fe:	61 05       	cpc	r22, r1
 400:	08 94       	sec
 402:	08 95       	ret

00000404 <__fp_zero>:
 404:	e8 94       	clt

00000406 <__fp_szero>:
 406:	bb 27       	eor	r27, r27
 408:	66 27       	eor	r22, r22
 40a:	77 27       	eor	r23, r23
 40c:	cb 01       	movw	r24, r22
 40e:	97 f9       	bld	r25, 7
 410:	08 95       	ret

00000412 <__mulsf3>:
 412:	0e 94 1c 02 	call	0x438	; 0x438 <__mulsf3x>
 416:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__fp_round>
 41a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__fp_pscA>
 41e:	38 f0       	brcs	.+14     	; 0x42e <__mulsf3+0x1c>
 420:	0e 94 86 02 	call	0x50c	; 0x50c <__fp_pscB>
 424:	20 f0       	brcs	.+8      	; 0x42e <__mulsf3+0x1c>
 426:	95 23       	and	r25, r21
 428:	11 f0       	breq	.+4      	; 0x42e <__mulsf3+0x1c>
 42a:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_inf>
 42e:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__fp_nan>
 432:	11 24       	eor	r1, r1
 434:	0c 94 03 02 	jmp	0x406	; 0x406 <__fp_szero>

00000438 <__mulsf3x>:
 438:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__fp_split3>
 43c:	70 f3       	brcs	.-36     	; 0x41a <__mulsf3+0x8>

0000043e <__mulsf3_pse>:
 43e:	95 9f       	mul	r25, r21
 440:	c1 f3       	breq	.-16     	; 0x432 <__mulsf3+0x20>
 442:	95 0f       	add	r25, r21
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	55 1f       	adc	r21, r21
 448:	62 9f       	mul	r22, r18
 44a:	f0 01       	movw	r30, r0
 44c:	72 9f       	mul	r23, r18
 44e:	bb 27       	eor	r27, r27
 450:	f0 0d       	add	r31, r0
 452:	b1 1d       	adc	r27, r1
 454:	63 9f       	mul	r22, r19
 456:	aa 27       	eor	r26, r26
 458:	f0 0d       	add	r31, r0
 45a:	b1 1d       	adc	r27, r1
 45c:	aa 1f       	adc	r26, r26
 45e:	64 9f       	mul	r22, r20
 460:	66 27       	eor	r22, r22
 462:	b0 0d       	add	r27, r0
 464:	a1 1d       	adc	r26, r1
 466:	66 1f       	adc	r22, r22
 468:	82 9f       	mul	r24, r18
 46a:	22 27       	eor	r18, r18
 46c:	b0 0d       	add	r27, r0
 46e:	a1 1d       	adc	r26, r1
 470:	62 1f       	adc	r22, r18
 472:	73 9f       	mul	r23, r19
 474:	b0 0d       	add	r27, r0
 476:	a1 1d       	adc	r26, r1
 478:	62 1f       	adc	r22, r18
 47a:	83 9f       	mul	r24, r19
 47c:	a0 0d       	add	r26, r0
 47e:	61 1d       	adc	r22, r1
 480:	22 1f       	adc	r18, r18
 482:	74 9f       	mul	r23, r20
 484:	33 27       	eor	r19, r19
 486:	a0 0d       	add	r26, r0
 488:	61 1d       	adc	r22, r1
 48a:	23 1f       	adc	r18, r19
 48c:	84 9f       	mul	r24, r20
 48e:	60 0d       	add	r22, r0
 490:	21 1d       	adc	r18, r1
 492:	82 2f       	mov	r24, r18
 494:	76 2f       	mov	r23, r22
 496:	6a 2f       	mov	r22, r26
 498:	11 24       	eor	r1, r1
 49a:	9f 57       	subi	r25, 0x7F	; 127
 49c:	50 40       	sbci	r21, 0x00	; 0
 49e:	9a f0       	brmi	.+38     	; 0x4c6 <__mulsf3_pse+0x88>
 4a0:	f1 f0       	breq	.+60     	; 0x4de <__mulsf3_pse+0xa0>
 4a2:	88 23       	and	r24, r24
 4a4:	4a f0       	brmi	.+18     	; 0x4b8 <__mulsf3_pse+0x7a>
 4a6:	ee 0f       	add	r30, r30
 4a8:	ff 1f       	adc	r31, r31
 4aa:	bb 1f       	adc	r27, r27
 4ac:	66 1f       	adc	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	88 1f       	adc	r24, r24
 4b2:	91 50       	subi	r25, 0x01	; 1
 4b4:	50 40       	sbci	r21, 0x00	; 0
 4b6:	a9 f7       	brne	.-22     	; 0x4a2 <__mulsf3_pse+0x64>
 4b8:	9e 3f       	cpi	r25, 0xFE	; 254
 4ba:	51 05       	cpc	r21, r1
 4bc:	80 f0       	brcs	.+32     	; 0x4de <__mulsf3_pse+0xa0>
 4be:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_inf>
 4c2:	0c 94 03 02 	jmp	0x406	; 0x406 <__fp_szero>
 4c6:	5f 3f       	cpi	r21, 0xFF	; 255
 4c8:	e4 f3       	brlt	.-8      	; 0x4c2 <__mulsf3_pse+0x84>
 4ca:	98 3e       	cpi	r25, 0xE8	; 232
 4cc:	d4 f3       	brlt	.-12     	; 0x4c2 <__mulsf3_pse+0x84>
 4ce:	86 95       	lsr	r24
 4d0:	77 95       	ror	r23
 4d2:	67 95       	ror	r22
 4d4:	b7 95       	ror	r27
 4d6:	f7 95       	ror	r31
 4d8:	e7 95       	ror	r30
 4da:	9f 5f       	subi	r25, 0xFF	; 255
 4dc:	c1 f7       	brne	.-16     	; 0x4ce <__mulsf3_pse+0x90>
 4de:	fe 2b       	or	r31, r30
 4e0:	88 0f       	add	r24, r24
 4e2:	91 1d       	adc	r25, r1
 4e4:	96 95       	lsr	r25
 4e6:	87 95       	ror	r24
 4e8:	97 f9       	bld	r25, 7
 4ea:	08 95       	ret

000004ec <__fp_inf>:
 4ec:	97 f9       	bld	r25, 7
 4ee:	9f 67       	ori	r25, 0x7F	; 127
 4f0:	80 e8       	ldi	r24, 0x80	; 128
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	08 95       	ret

000004f8 <__fp_nan>:
 4f8:	9f ef       	ldi	r25, 0xFF	; 255
 4fa:	80 ec       	ldi	r24, 0xC0	; 192
 4fc:	08 95       	ret

000004fe <__fp_pscA>:
 4fe:	00 24       	eor	r0, r0
 500:	0a 94       	dec	r0
 502:	16 16       	cp	r1, r22
 504:	17 06       	cpc	r1, r23
 506:	18 06       	cpc	r1, r24
 508:	09 06       	cpc	r0, r25
 50a:	08 95       	ret

0000050c <__fp_pscB>:
 50c:	00 24       	eor	r0, r0
 50e:	0a 94       	dec	r0
 510:	12 16       	cp	r1, r18
 512:	13 06       	cpc	r1, r19
 514:	14 06       	cpc	r1, r20
 516:	05 06       	cpc	r0, r21
 518:	08 95       	ret

0000051a <__fp_round>:
 51a:	09 2e       	mov	r0, r25
 51c:	03 94       	inc	r0
 51e:	00 0c       	add	r0, r0
 520:	11 f4       	brne	.+4      	; 0x526 <__fp_round+0xc>
 522:	88 23       	and	r24, r24
 524:	52 f0       	brmi	.+20     	; 0x53a <__fp_round+0x20>
 526:	bb 0f       	add	r27, r27
 528:	40 f4       	brcc	.+16     	; 0x53a <__fp_round+0x20>
 52a:	bf 2b       	or	r27, r31
 52c:	11 f4       	brne	.+4      	; 0x532 <__fp_round+0x18>
 52e:	60 ff       	sbrs	r22, 0
 530:	04 c0       	rjmp	.+8      	; 0x53a <__fp_round+0x20>
 532:	6f 5f       	subi	r22, 0xFF	; 255
 534:	7f 4f       	sbci	r23, 0xFF	; 255
 536:	8f 4f       	sbci	r24, 0xFF	; 255
 538:	9f 4f       	sbci	r25, 0xFF	; 255
 53a:	08 95       	ret

0000053c <_exit>:
 53c:	f8 94       	cli

0000053e <__stop_program>:
 53e:	ff cf       	rjmp	.-2      	; 0x53e <__stop_program>
