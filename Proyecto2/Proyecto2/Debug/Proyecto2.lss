
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000662  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000662  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000662  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000df7  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097c  00000000  00000000  00001603  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091d  00000000  00000000  00001f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  0000289c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000509  00000000  00000000  00002ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000428  00000000  00000000  00002fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000033f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  88:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
 */ 
#include <avr/io.h>
#include <stdint.h>

void initADC(uint8_t puertoADC){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	// Se selecciona un canal
	ADMUX = puertoADC;
  96:	80 83       	st	Z, r24
	
	// Se selecciona el voltaje VREF 5V
	ADMUX |= (1<<REFS0);
  98:	80 81       	ld	r24, Z
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  9e:	80 81       	ld	r24, Z
  a0:	8f 77       	andi	r24, 0x7F	; 127
  a2:	80 83       	st	Z, r24
	// Se justifica hacia la izquierda la salida del adc
	ADMUX |= (1 << ADLAR);
  a4:	80 81       	ld	r24, Z
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	80 83       	st	Z, r24
	// Habilitar prescaler de 16M/128 fadc = 125khz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	87 60       	ori	r24, 0x07	; 7
  b2:	80 83       	st	Z, r24
	// Activar la interrupcion del ADC
	ADCSRA |= (1<<ADIE);
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
	// Se activa el ADC
	ADCSRA |= (1<< ADEN);
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <main>:

volatile uint8_t  bufferRX;

int main(void)
{
	initUART9600();
  c2:	0e 94 b0 01 	call	0x360	; 0x360 <initUART9600>
	cli();
  c6:	f8 94       	cli
	initPWM0FastA(no_invertido, 1024);
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	74 e0       	ldi	r23, 0x04	; 4
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <initPWM0FastA>
	initPWM0FastB(no_invertido, 1024);
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	74 e0       	ldi	r23, 0x04	; 4
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	0e 94 10 01 	call	0x220	; 0x220 <initPWM0FastB>
	initPWM2FastA(no_invertido, 1024);
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	74 e0       	ldi	r23, 0x04	; 4
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 81 01 	call	0x302	; 0x302 <initPWM2FastA>
	initPWM1FastA(no_invertido, 1024);
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	74 e0       	ldi	r23, 0x04	; 4
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 46 01 	call	0x28c	; 0x28c <initPWM1FastA>
	sei();
  f0:	78 94       	sei
	
    while (1) 
    {
 		//inicializar ADC7
 		initADC(7);
  f2:	87 e0       	ldi	r24, 0x07	; 7
  f4:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
 		ADCSRA |= (1<< ADSC);				// Comenzar conversion
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	80 83       	st	Z, r24
 		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 102:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 106:	86 fd       	sbrc	r24, 6
 108:	fc cf       	rjmp	.-8      	; 0x102 <main+0x40>
 		updateDutyCyclePWM2A(ADCH);			// Se llama la función de la librería
 10a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 10e:	0e 94 9f 01 	call	0x33e	; 0x33e <updateDutyCyclePWM2A>
		

 		//inicializar ADC6
 		initADC(6);
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
 		ADCSRA |= (1<< ADSC);				// Comenzar conversion
 118:	ea e7       	ldi	r30, 0x7A	; 122
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	80 83       	st	Z, r24
 		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 122:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 126:	86 fd       	sbrc	r24, 6
 128:	fc cf       	rjmp	.-8      	; 0x122 <main+0x60>
 		updateDutyCyclePWM1A(ADCH);			// Se llama la función de la librería
 12a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 68 01 	call	0x2d0	; 0x2d0 <updateDutyCyclePWM1A>
		
 		//inicializar ADC5
 		initADC(5);
 134:	85 e0       	ldi	r24, 0x05	; 5
 136:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
 		ADCSRA |= (1<< ADSC);				// Comenzar conversion
 13a:	ea e7       	ldi	r30, 0x7A	; 122
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 64       	ori	r24, 0x40	; 64
 142:	80 83       	st	Z, r24
 		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 144:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 148:	86 fd       	sbrc	r24, 6
 14a:	fc cf       	rjmp	.-8      	; 0x144 <main+0x82>
 		updateDutyCyclePWM0A(ADCH);			// Se llama la función de la librería
 14c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 150:	0e 94 26 01 	call	0x24c	; 0x24c <updateDutyCyclePWM0A>
 		
 		//inicializar ADC4
 		initADC(4);
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
 		ADCSRA |= (1<< ADSC);				// Comenzar conversion
 15a:	ea e7       	ldi	r30, 0x7A	; 122
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	80 64       	ori	r24, 0x40	; 64
 162:	80 83       	st	Z, r24
 		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 164:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 168:	86 fd       	sbrc	r24, 6
 16a:	fc cf       	rjmp	.-8      	; 0x164 <main+0xa2>
 		updateDutyCyclePWM0B(ADCH);			// Se llama la función de la librería
 16c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 170:	0e 94 36 01 	call	0x26c	; 0x26c <updateDutyCyclePWM0B>
    }
 174:	be cf       	rjmp	.-132    	; 0xf2 <main+0x30>

00000176 <__vector_21>:
}

// Vector de interrupcion ADC -------------------------------------------------
ISR(ADC_vect)
{
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	8f 93       	push	r24
 182:	ef 93       	push	r30
 184:	ff 93       	push	r31
	// Se escribe con un 1 lógico la bandera para apagarla
	ADCSRA |= (1<<ADIF);
 186:	ea e7       	ldi	r30, 0x7A	; 122
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	80 61       	ori	r24, 0x10	; 16
 18e:	80 83       	st	Z, r24
}
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	8f 91       	pop	r24
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__vector_18>:


ISR(USART_RX_vect)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	2f 93       	push	r18
 1ac:	3f 93       	push	r19
 1ae:	4f 93       	push	r20
 1b0:	5f 93       	push	r21
 1b2:	6f 93       	push	r22
 1b4:	7f 93       	push	r23
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
	//Se almacena en la variable lo que se recibe de UDR0
	bufferRX = UDR0;
 1c2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	updateDutyCyclePWM2A(bufferRX);
 1ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ce:	0e 94 9f 01 	call	0x33e	; 0x33e <updateDutyCyclePWM2A>
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	7f 91       	pop	r23
 1e0:	6f 91       	pop	r22
 1e2:	5f 91       	pop	r21
 1e4:	4f 91       	pop	r20
 1e6:	3f 91       	pop	r19
 1e8:	2f 91       	pop	r18
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <initPWM0FastA>:
#define invertido 1
#define no_invertido 0

void initPWM0FastA(uint8_t inverted, uint16_t prescaler){
	//Configurando el pin PD6 como salida (OC0A)
	DDRD |= (1<<DDD6);
 1f4:	9a b1       	in	r25, 0x0a	; 10
 1f6:	90 64       	ori	r25, 0x40	; 64
 1f8:	9a b9       	out	0x0a, r25	; 10
	
	//TCCR0A = 0;
	//TCCR0B = 0;
	
	if (inverted){
 1fa:	88 23       	and	r24, r24
 1fc:	21 f0       	breq	.+8      	; 0x206 <initPWM0FastA+0x12>
		//Configurando OC0A como invertido
		TCCR0A |= (1<<COM0A1)|(1<<COM0A0);
 1fe:	84 b5       	in	r24, 0x24	; 36
 200:	80 6c       	ori	r24, 0xC0	; 192
 202:	84 bd       	out	0x24, r24	; 36
 204:	03 c0       	rjmp	.+6      	; 0x20c <initPWM0FastA+0x18>
	}
	else {
		//Configurando OC0A como no invertido
		TCCR0A |= (1<<COM0A1);
 206:	84 b5       	in	r24, 0x24	; 36
 208:	80 68       	ori	r24, 0x80	; 128
 20a:	84 bd       	out	0x24, r24	; 36
	}
	// Configurando modo FAST PWM0 TOP 0XFF
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
 20c:	84 b5       	in	r24, 0x24	; 36
 20e:	83 60       	ori	r24, 0x03	; 3
 210:	84 bd       	out	0x24, r24	; 36
	// Configurando prescaler de 1024
	if (prescaler==1024){
 212:	61 15       	cp	r22, r1
 214:	74 40       	sbci	r23, 0x04	; 4
 216:	19 f4       	brne	.+6      	; 0x21e <initPWM0FastA+0x2a>
		TCCR0B |= (1<<CS02)|(1<<CS00);
 218:	85 b5       	in	r24, 0x25	; 37
 21a:	85 60       	ori	r24, 0x05	; 5
 21c:	85 bd       	out	0x25, r24	; 37
 21e:	08 95       	ret

00000220 <initPWM0FastB>:
	
}

void initPWM0FastB(uint8_t inverted, uint16_t prescaler){
	//Configurando el pin PD5 como salida (OC0B)
	DDRD |= (1<<DDD5);
 220:	9a b1       	in	r25, 0x0a	; 10
 222:	90 62       	ori	r25, 0x20	; 32
 224:	9a b9       	out	0x0a, r25	; 10
	
	// TCCR0B = 0;
	
	if (inverted){
 226:	88 23       	and	r24, r24
 228:	21 f0       	breq	.+8      	; 0x232 <initPWM0FastB+0x12>
		//Configurando OC0A como invertido
		TCCR0A |= (1<<COM0B1)|(1<<COM0B0);
 22a:	84 b5       	in	r24, 0x24	; 36
 22c:	80 63       	ori	r24, 0x30	; 48
 22e:	84 bd       	out	0x24, r24	; 36
 230:	03 c0       	rjmp	.+6      	; 0x238 <initPWM0FastB+0x18>
	}
	else {
		//Configurando OC0A como no invertido
		TCCR0A |= (1<<COM0B1);
 232:	84 b5       	in	r24, 0x24	; 36
 234:	80 62       	ori	r24, 0x20	; 32
 236:	84 bd       	out	0x24, r24	; 36
	}
	// Configurando modo FAST PWM0 TOP 0XFF
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
 238:	84 b5       	in	r24, 0x24	; 36
 23a:	83 60       	ori	r24, 0x03	; 3
 23c:	84 bd       	out	0x24, r24	; 36
	// Configurando prescaler de 1024
	if (prescaler==1024){
 23e:	61 15       	cp	r22, r1
 240:	74 40       	sbci	r23, 0x04	; 4
 242:	19 f4       	brne	.+6      	; 0x24a <initPWM0FastB+0x2a>
		TCCR0B |= (1<<CS02)|(1<<CS00);
 244:	85 b5       	in	r24, 0x25	; 37
 246:	85 60       	ori	r24, 0x05	; 5
 248:	85 bd       	out	0x25, r24	; 37
 24a:	08 95       	ret

0000024c <updateDutyCyclePWM0A>:
	}
}

void updateDutyCyclePWM0A(uint8_t duty){
	OCR0A = duty * 0.15;
 24c:	68 2f       	mov	r22, r24
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatsisf>
 258:	2a e9       	ldi	r18, 0x9A	; 154
 25a:	39 e9       	ldi	r19, 0x99	; 153
 25c:	49 e1       	ldi	r20, 0x19	; 25
 25e:	5e e3       	ldi	r21, 0x3E	; 62
 260:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__mulsf3>
 264:	0e 94 cb 01 	call	0x396	; 0x396 <__fixunssfsi>
 268:	67 bd       	out	0x27, r22	; 39
 26a:	08 95       	ret

0000026c <updateDutyCyclePWM0B>:
}

void updateDutyCyclePWM0B(uint8_t duty){
	OCR0B = duty * 0.15;
 26c:	68 2f       	mov	r22, r24
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatsisf>
 278:	2a e9       	ldi	r18, 0x9A	; 154
 27a:	39 e9       	ldi	r19, 0x99	; 153
 27c:	49 e1       	ldi	r20, 0x19	; 25
 27e:	5e e3       	ldi	r21, 0x3E	; 62
 280:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__mulsf3>
 284:	0e 94 cb 01 	call	0x396	; 0x396 <__fixunssfsi>
 288:	68 bd       	out	0x28, r22	; 40
 28a:	08 95       	ret

0000028c <initPWM1FastA>:
	// Configurando modo FAST PWM1 8-bit TOP 0X00FF
	TCCR1A |= (1<<WGM11)|(1<<WGM10);
	
	// Configurando prescaler de 1024
	if (prescaler==1024){
		TCCR1B |= (1<<CS12)|(1<<CS10);
 28c:	94 b1       	in	r25, 0x04	; 4
 28e:	92 60       	ori	r25, 0x02	; 2
 290:	94 b9       	out	0x04, r25	; 4
 292:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 296:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 29a:	88 23       	and	r24, r24
 29c:	31 f0       	breq	.+12     	; 0x2aa <initPWM1FastA+0x1e>
 29e:	e0 e8       	ldi	r30, 0x80	; 128
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	80 6c       	ori	r24, 0xC0	; 192
 2a6:	80 83       	st	Z, r24
 2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <initPWM1FastA+0x28>
 2aa:	e0 e8       	ldi	r30, 0x80	; 128
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	80 68       	ori	r24, 0x80	; 128
 2b2:	80 83       	st	Z, r24
 2b4:	e0 e8       	ldi	r30, 0x80	; 128
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	82 60       	ori	r24, 0x02	; 2
 2bc:	80 83       	st	Z, r24
 2be:	e1 e8       	ldi	r30, 0x81	; 129
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	88 61       	ori	r24, 0x18	; 24
 2c6:	80 83       	st	Z, r24
 2c8:	80 81       	ld	r24, Z
 2ca:	85 60       	ori	r24, 0x05	; 5
 2cc:	80 83       	st	Z, r24
 2ce:	08 95       	ret

000002d0 <updateDutyCyclePWM1A>:
	}
}

void updateDutyCyclePWM1A(uint8_t duty){
	// Se carga el valor a ICR1, para configurar el periodo
	ICR1H = 0x01;
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L= 0x58;
 2d6:	98 e5       	ldi	r25, 0x58	; 88
 2d8:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	// Se carga el valor de OCR1A
	OCR1A = 0.139 * duty;
 2dc:	68 2f       	mov	r22, r24
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatsisf>
 2e8:	24 e0       	ldi	r18, 0x04	; 4
 2ea:	36 e5       	ldi	r19, 0x56	; 86
 2ec:	4e e0       	ldi	r20, 0x0E	; 14
 2ee:	5e e3       	ldi	r21, 0x3E	; 62
 2f0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__mulsf3>
 2f4:	0e 94 cb 01 	call	0x396	; 0x396 <__fixunssfsi>
 2f8:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2fc:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 300:	08 95       	ret

00000302 <initPWM2FastA>:
	}
	// Configurando modo FAST PWM2 TOP 0XFF
	TCCR2A |= (1<<WGM21)|(1<<WGM20);
	
	// Configurando prescaler de 1024
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
 302:	94 b1       	in	r25, 0x04	; 4
 304:	98 60       	ori	r25, 0x08	; 8
 306:	94 b9       	out	0x04, r25	; 4
 308:	88 23       	and	r24, r24
 30a:	31 f0       	breq	.+12     	; 0x318 <initPWM2FastA+0x16>
 30c:	e0 eb       	ldi	r30, 0xB0	; 176
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	80 6c       	ori	r24, 0xC0	; 192
 314:	80 83       	st	Z, r24
 316:	05 c0       	rjmp	.+10     	; 0x322 <initPWM2FastA+0x20>
 318:	e0 eb       	ldi	r30, 0xB0	; 176
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	80 68       	ori	r24, 0x80	; 128
 320:	80 83       	st	Z, r24
 322:	e0 eb       	ldi	r30, 0xB0	; 176
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	83 60       	ori	r24, 0x03	; 3
 32a:	80 83       	st	Z, r24
 32c:	61 15       	cp	r22, r1
 32e:	74 40       	sbci	r23, 0x04	; 4
 330:	29 f4       	brne	.+10     	; 0x33c <initPWM2FastA+0x3a>
 332:	e1 eb       	ldi	r30, 0xB1	; 177
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	87 60       	ori	r24, 0x07	; 7
 33a:	80 83       	st	Z, r24
 33c:	08 95       	ret

0000033e <updateDutyCyclePWM2A>:
	
}

void updateDutyCyclePWM2A(uint8_t duty2A){
	// Se carga el valor de OCR2A con un factor de mapeado
	OCR2A = duty2A * 0.15;
 33e:	68 2f       	mov	r22, r24
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatsisf>
 34a:	2a e9       	ldi	r18, 0x9A	; 154
 34c:	39 e9       	ldi	r19, 0x99	; 153
 34e:	49 e1       	ldi	r20, 0x19	; 25
 350:	5e e3       	ldi	r21, 0x3E	; 62
 352:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__mulsf3>
 356:	0e 94 cb 01 	call	0x396	; 0x396 <__fixunssfsi>
 35a:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 35e:	08 95       	ret

00000360 <initUART9600>:


void initUART9600(void){
	
	//Paso 1: RX y TX como salida
	DDRD &= ~(1<<DDD0);
 360:	8a b1       	in	r24, 0x0a	; 10
 362:	8e 7f       	andi	r24, 0xFE	; 254
 364:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
 366:	8a b1       	in	r24, 0x0a	; 10
 368:	82 60       	ori	r24, 0x02	; 2
 36a:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2:Configurar UCSR0A
	UCSR0A = 0;
 36c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: configurar UCSR0B donde se habilita ISR de recepcion y se habilita RX y TX
	UCSR0B = 0;
 370:	e1 ec       	ldi	r30, 0xC1	; 193
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
 376:	80 81       	ld	r24, Z
 378:	88 69       	ori	r24, 0x98	; 152
 37a:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C, asincrono, paridad: none, 1 bit stop, data bits de 8 bits
	UCSR0C = 0;
 37c:	e2 ec       	ldi	r30, 0xC2	; 194
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 382:	80 81       	ld	r24, Z
 384:	86 60       	ori	r24, 0x06	; 6
 386:	80 83       	st	Z, r24
	
	//Paso 5: COnfigurar velocidad de baudrate a 9600
	UBRR0 = 103;
 388:	87 e6       	ldi	r24, 0x67	; 103
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 390:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 394:	08 95       	ret

00000396 <__fixunssfsi>:
 396:	0e 94 3f 02 	call	0x47e	; 0x47e <__fp_splitA>
 39a:	88 f0       	brcs	.+34     	; 0x3be <__fixunssfsi+0x28>
 39c:	9f 57       	subi	r25, 0x7F	; 127
 39e:	98 f0       	brcs	.+38     	; 0x3c6 <__fixunssfsi+0x30>
 3a0:	b9 2f       	mov	r27, r25
 3a2:	99 27       	eor	r25, r25
 3a4:	b7 51       	subi	r27, 0x17	; 23
 3a6:	b0 f0       	brcs	.+44     	; 0x3d4 <__fixunssfsi+0x3e>
 3a8:	e1 f0       	breq	.+56     	; 0x3e2 <__fixunssfsi+0x4c>
 3aa:	66 0f       	add	r22, r22
 3ac:	77 1f       	adc	r23, r23
 3ae:	88 1f       	adc	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	1a f0       	brmi	.+6      	; 0x3ba <__fixunssfsi+0x24>
 3b4:	ba 95       	dec	r27
 3b6:	c9 f7       	brne	.-14     	; 0x3aa <__fixunssfsi+0x14>
 3b8:	14 c0       	rjmp	.+40     	; 0x3e2 <__fixunssfsi+0x4c>
 3ba:	b1 30       	cpi	r27, 0x01	; 1
 3bc:	91 f0       	breq	.+36     	; 0x3e2 <__fixunssfsi+0x4c>
 3be:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__fp_zero>
 3c2:	b1 e0       	ldi	r27, 0x01	; 1
 3c4:	08 95       	ret
 3c6:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_zero>
 3ca:	67 2f       	mov	r22, r23
 3cc:	78 2f       	mov	r23, r24
 3ce:	88 27       	eor	r24, r24
 3d0:	b8 5f       	subi	r27, 0xF8	; 248
 3d2:	39 f0       	breq	.+14     	; 0x3e2 <__fixunssfsi+0x4c>
 3d4:	b9 3f       	cpi	r27, 0xF9	; 249
 3d6:	cc f3       	brlt	.-14     	; 0x3ca <__fixunssfsi+0x34>
 3d8:	86 95       	lsr	r24
 3da:	77 95       	ror	r23
 3dc:	67 95       	ror	r22
 3de:	b3 95       	inc	r27
 3e0:	d9 f7       	brne	.-10     	; 0x3d8 <__fixunssfsi+0x42>
 3e2:	3e f4       	brtc	.+14     	; 0x3f2 <__fixunssfsi+0x5c>
 3e4:	90 95       	com	r25
 3e6:	80 95       	com	r24
 3e8:	70 95       	com	r23
 3ea:	61 95       	neg	r22
 3ec:	7f 4f       	sbci	r23, 0xFF	; 255
 3ee:	8f 4f       	sbci	r24, 0xFF	; 255
 3f0:	9f 4f       	sbci	r25, 0xFF	; 255
 3f2:	08 95       	ret

000003f4 <__floatunsisf>:
 3f4:	e8 94       	clt
 3f6:	09 c0       	rjmp	.+18     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>

000003f8 <__floatsisf>:
 3f8:	97 fb       	bst	r25, 7
 3fa:	3e f4       	brtc	.+14     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3fc:	90 95       	com	r25
 3fe:	80 95       	com	r24
 400:	70 95       	com	r23
 402:	61 95       	neg	r22
 404:	7f 4f       	sbci	r23, 0xFF	; 255
 406:	8f 4f       	sbci	r24, 0xFF	; 255
 408:	9f 4f       	sbci	r25, 0xFF	; 255
 40a:	99 23       	and	r25, r25
 40c:	a9 f0       	breq	.+42     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 40e:	f9 2f       	mov	r31, r25
 410:	96 e9       	ldi	r25, 0x96	; 150
 412:	bb 27       	eor	r27, r27
 414:	93 95       	inc	r25
 416:	f6 95       	lsr	r31
 418:	87 95       	ror	r24
 41a:	77 95       	ror	r23
 41c:	67 95       	ror	r22
 41e:	b7 95       	ror	r27
 420:	f1 11       	cpse	r31, r1
 422:	f8 cf       	rjmp	.-16     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 424:	fa f4       	brpl	.+62     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 426:	bb 0f       	add	r27, r27
 428:	11 f4       	brne	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	60 ff       	sbrs	r22, 0
 42c:	1b c0       	rjmp	.+54     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 42e:	6f 5f       	subi	r22, 0xFF	; 255
 430:	7f 4f       	sbci	r23, 0xFF	; 255
 432:	8f 4f       	sbci	r24, 0xFF	; 255
 434:	9f 4f       	sbci	r25, 0xFF	; 255
 436:	16 c0       	rjmp	.+44     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 438:	88 23       	and	r24, r24
 43a:	11 f0       	breq	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43c:	96 e9       	ldi	r25, 0x96	; 150
 43e:	11 c0       	rjmp	.+34     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 440:	77 23       	and	r23, r23
 442:	21 f0       	breq	.+8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 444:	9e e8       	ldi	r25, 0x8E	; 142
 446:	87 2f       	mov	r24, r23
 448:	76 2f       	mov	r23, r22
 44a:	05 c0       	rjmp	.+10     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 44c:	66 23       	and	r22, r22
 44e:	71 f0       	breq	.+28     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 450:	96 e8       	ldi	r25, 0x86	; 134
 452:	86 2f       	mov	r24, r22
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	2a f0       	brmi	.+10     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 45a:	9a 95       	dec	r25
 45c:	66 0f       	add	r22, r22
 45e:	77 1f       	adc	r23, r23
 460:	88 1f       	adc	r24, r24
 462:	da f7       	brpl	.-10     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 464:	88 0f       	add	r24, r24
 466:	96 95       	lsr	r25
 468:	87 95       	ror	r24
 46a:	97 f9       	bld	r25, 7
 46c:	08 95       	ret

0000046e <__fp_split3>:
 46e:	57 fd       	sbrc	r21, 7
 470:	90 58       	subi	r25, 0x80	; 128
 472:	44 0f       	add	r20, r20
 474:	55 1f       	adc	r21, r21
 476:	59 f0       	breq	.+22     	; 0x48e <__fp_splitA+0x10>
 478:	5f 3f       	cpi	r21, 0xFF	; 255
 47a:	71 f0       	breq	.+28     	; 0x498 <__fp_splitA+0x1a>
 47c:	47 95       	ror	r20

0000047e <__fp_splitA>:
 47e:	88 0f       	add	r24, r24
 480:	97 fb       	bst	r25, 7
 482:	99 1f       	adc	r25, r25
 484:	61 f0       	breq	.+24     	; 0x49e <__fp_splitA+0x20>
 486:	9f 3f       	cpi	r25, 0xFF	; 255
 488:	79 f0       	breq	.+30     	; 0x4a8 <__fp_splitA+0x2a>
 48a:	87 95       	ror	r24
 48c:	08 95       	ret
 48e:	12 16       	cp	r1, r18
 490:	13 06       	cpc	r1, r19
 492:	14 06       	cpc	r1, r20
 494:	55 1f       	adc	r21, r21
 496:	f2 cf       	rjmp	.-28     	; 0x47c <__fp_split3+0xe>
 498:	46 95       	lsr	r20
 49a:	f1 df       	rcall	.-30     	; 0x47e <__fp_splitA>
 49c:	08 c0       	rjmp	.+16     	; 0x4ae <__fp_splitA+0x30>
 49e:	16 16       	cp	r1, r22
 4a0:	17 06       	cpc	r1, r23
 4a2:	18 06       	cpc	r1, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	f1 cf       	rjmp	.-30     	; 0x48a <__fp_splitA+0xc>
 4a8:	86 95       	lsr	r24
 4aa:	71 05       	cpc	r23, r1
 4ac:	61 05       	cpc	r22, r1
 4ae:	08 94       	sec
 4b0:	08 95       	ret

000004b2 <__fp_zero>:
 4b2:	e8 94       	clt

000004b4 <__fp_szero>:
 4b4:	bb 27       	eor	r27, r27
 4b6:	66 27       	eor	r22, r22
 4b8:	77 27       	eor	r23, r23
 4ba:	cb 01       	movw	r24, r22
 4bc:	97 f9       	bld	r25, 7
 4be:	08 95       	ret

000004c0 <__mulsf3>:
 4c0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__mulsf3x>
 4c4:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_round>
 4c8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__fp_pscA>
 4cc:	38 f0       	brcs	.+14     	; 0x4dc <__mulsf3+0x1c>
 4ce:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__fp_pscB>
 4d2:	20 f0       	brcs	.+8      	; 0x4dc <__mulsf3+0x1c>
 4d4:	95 23       	and	r25, r21
 4d6:	11 f0       	breq	.+4      	; 0x4dc <__mulsf3+0x1c>
 4d8:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_inf>
 4dc:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_nan>
 4e0:	11 24       	eor	r1, r1
 4e2:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__fp_szero>

000004e6 <__mulsf3x>:
 4e6:	0e 94 37 02 	call	0x46e	; 0x46e <__fp_split3>
 4ea:	70 f3       	brcs	.-36     	; 0x4c8 <__mulsf3+0x8>

000004ec <__mulsf3_pse>:
 4ec:	95 9f       	mul	r25, r21
 4ee:	c1 f3       	breq	.-16     	; 0x4e0 <__mulsf3+0x20>
 4f0:	95 0f       	add	r25, r21
 4f2:	50 e0       	ldi	r21, 0x00	; 0
 4f4:	55 1f       	adc	r21, r21
 4f6:	62 9f       	mul	r22, r18
 4f8:	f0 01       	movw	r30, r0
 4fa:	72 9f       	mul	r23, r18
 4fc:	bb 27       	eor	r27, r27
 4fe:	f0 0d       	add	r31, r0
 500:	b1 1d       	adc	r27, r1
 502:	63 9f       	mul	r22, r19
 504:	aa 27       	eor	r26, r26
 506:	f0 0d       	add	r31, r0
 508:	b1 1d       	adc	r27, r1
 50a:	aa 1f       	adc	r26, r26
 50c:	64 9f       	mul	r22, r20
 50e:	66 27       	eor	r22, r22
 510:	b0 0d       	add	r27, r0
 512:	a1 1d       	adc	r26, r1
 514:	66 1f       	adc	r22, r22
 516:	82 9f       	mul	r24, r18
 518:	22 27       	eor	r18, r18
 51a:	b0 0d       	add	r27, r0
 51c:	a1 1d       	adc	r26, r1
 51e:	62 1f       	adc	r22, r18
 520:	73 9f       	mul	r23, r19
 522:	b0 0d       	add	r27, r0
 524:	a1 1d       	adc	r26, r1
 526:	62 1f       	adc	r22, r18
 528:	83 9f       	mul	r24, r19
 52a:	a0 0d       	add	r26, r0
 52c:	61 1d       	adc	r22, r1
 52e:	22 1f       	adc	r18, r18
 530:	74 9f       	mul	r23, r20
 532:	33 27       	eor	r19, r19
 534:	a0 0d       	add	r26, r0
 536:	61 1d       	adc	r22, r1
 538:	23 1f       	adc	r18, r19
 53a:	84 9f       	mul	r24, r20
 53c:	60 0d       	add	r22, r0
 53e:	21 1d       	adc	r18, r1
 540:	82 2f       	mov	r24, r18
 542:	76 2f       	mov	r23, r22
 544:	6a 2f       	mov	r22, r26
 546:	11 24       	eor	r1, r1
 548:	9f 57       	subi	r25, 0x7F	; 127
 54a:	50 40       	sbci	r21, 0x00	; 0
 54c:	9a f0       	brmi	.+38     	; 0x574 <__mulsf3_pse+0x88>
 54e:	f1 f0       	breq	.+60     	; 0x58c <__mulsf3_pse+0xa0>
 550:	88 23       	and	r24, r24
 552:	4a f0       	brmi	.+18     	; 0x566 <__mulsf3_pse+0x7a>
 554:	ee 0f       	add	r30, r30
 556:	ff 1f       	adc	r31, r31
 558:	bb 1f       	adc	r27, r27
 55a:	66 1f       	adc	r22, r22
 55c:	77 1f       	adc	r23, r23
 55e:	88 1f       	adc	r24, r24
 560:	91 50       	subi	r25, 0x01	; 1
 562:	50 40       	sbci	r21, 0x00	; 0
 564:	a9 f7       	brne	.-22     	; 0x550 <__mulsf3_pse+0x64>
 566:	9e 3f       	cpi	r25, 0xFE	; 254
 568:	51 05       	cpc	r21, r1
 56a:	80 f0       	brcs	.+32     	; 0x58c <__mulsf3_pse+0xa0>
 56c:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_inf>
 570:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__fp_szero>
 574:	5f 3f       	cpi	r21, 0xFF	; 255
 576:	e4 f3       	brlt	.-8      	; 0x570 <__mulsf3_pse+0x84>
 578:	98 3e       	cpi	r25, 0xE8	; 232
 57a:	d4 f3       	brlt	.-12     	; 0x570 <__mulsf3_pse+0x84>
 57c:	86 95       	lsr	r24
 57e:	77 95       	ror	r23
 580:	67 95       	ror	r22
 582:	b7 95       	ror	r27
 584:	f7 95       	ror	r31
 586:	e7 95       	ror	r30
 588:	9f 5f       	subi	r25, 0xFF	; 255
 58a:	c1 f7       	brne	.-16     	; 0x57c <__mulsf3_pse+0x90>
 58c:	fe 2b       	or	r31, r30
 58e:	88 0f       	add	r24, r24
 590:	91 1d       	adc	r25, r1
 592:	96 95       	lsr	r25
 594:	87 95       	ror	r24
 596:	97 f9       	bld	r25, 7
 598:	08 95       	ret

0000059a <__fp_inf>:
 59a:	97 f9       	bld	r25, 7
 59c:	9f 67       	ori	r25, 0x7F	; 127
 59e:	80 e8       	ldi	r24, 0x80	; 128
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	08 95       	ret

000005a6 <__fp_nan>:
 5a6:	9f ef       	ldi	r25, 0xFF	; 255
 5a8:	80 ec       	ldi	r24, 0xC0	; 192
 5aa:	08 95       	ret

000005ac <__fp_pscA>:
 5ac:	00 24       	eor	r0, r0
 5ae:	0a 94       	dec	r0
 5b0:	16 16       	cp	r1, r22
 5b2:	17 06       	cpc	r1, r23
 5b4:	18 06       	cpc	r1, r24
 5b6:	09 06       	cpc	r0, r25
 5b8:	08 95       	ret

000005ba <__fp_pscB>:
 5ba:	00 24       	eor	r0, r0
 5bc:	0a 94       	dec	r0
 5be:	12 16       	cp	r1, r18
 5c0:	13 06       	cpc	r1, r19
 5c2:	14 06       	cpc	r1, r20
 5c4:	05 06       	cpc	r0, r21
 5c6:	08 95       	ret

000005c8 <__fp_round>:
 5c8:	09 2e       	mov	r0, r25
 5ca:	03 94       	inc	r0
 5cc:	00 0c       	add	r0, r0
 5ce:	11 f4       	brne	.+4      	; 0x5d4 <__fp_round+0xc>
 5d0:	88 23       	and	r24, r24
 5d2:	52 f0       	brmi	.+20     	; 0x5e8 <__fp_round+0x20>
 5d4:	bb 0f       	add	r27, r27
 5d6:	40 f4       	brcc	.+16     	; 0x5e8 <__fp_round+0x20>
 5d8:	bf 2b       	or	r27, r31
 5da:	11 f4       	brne	.+4      	; 0x5e0 <__fp_round+0x18>
 5dc:	60 ff       	sbrs	r22, 0
 5de:	04 c0       	rjmp	.+8      	; 0x5e8 <__fp_round+0x20>
 5e0:	6f 5f       	subi	r22, 0xFF	; 255
 5e2:	7f 4f       	sbci	r23, 0xFF	; 255
 5e4:	8f 4f       	sbci	r24, 0xFF	; 255
 5e6:	9f 4f       	sbci	r25, 0xFF	; 255
 5e8:	08 95       	ret

000005ea <_exit>:
 5ea:	f8 94       	cli

000005ec <__stop_program>:
 5ec:	ff cf       	rjmp	.-2      	; 0x5ec <__stop_program>
