
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000053c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cbc  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000927  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c3  00000000  00000000  00001ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  0000246c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e6  00000000  00000000  00002674  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003fb  00000000  00000000  00002b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00002f55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

volatile uint8_t  bufferRX;

int main(void)
{
	initUART9600();
  90:	0e 94 1d 01 	call	0x23a	; 0x23a <initUART9600>
	cli();
  94:	f8 94       	cli
	initPWM0FastA(no_invertido, 1024);
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	74 e0       	ldi	r23, 0x04	; 4
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	0e 94 a0 00 	call	0x140	; 0x140 <initPWM0FastA>
	initPWM0FastB(no_invertido, 1024);
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	74 e0       	ldi	r23, 0x04	; 4
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 b6 00 	call	0x16c	; 0x16c <initPWM0FastB>
	initPWM2FastA(no_invertido, 1024);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	74 e0       	ldi	r23, 0x04	; 4
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <initPWM2FastA>
	initPWM1FastA(no_invertido, 1024);
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	74 e0       	ldi	r23, 0x04	; 4
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 cc 00 	call	0x198	; 0x198 <initPWM1FastA>
	sei();
  be:	78 94       	sei
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <main+0x30>

000000c2 <__vector_21>:
    }
}

// Vector de interrupcion ADC -------------------------------------------------
ISR(ADC_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
	// Se escribe con un 1 lógico la bandera para apagarla
	ADCSRA |= (1<<ADIF);
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	80 83       	st	Z, r24
}
  dc:	ff 91       	pop	r31
  de:	ef 91       	pop	r30
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <__vector_18>:


ISR(USART_RX_vect)
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	2f 93       	push	r18
  f8:	3f 93       	push	r19
  fa:	4f 93       	push	r20
  fc:	5f 93       	push	r21
  fe:	6f 93       	push	r22
 100:	7f 93       	push	r23
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	af 93       	push	r26
 108:	bf 93       	push	r27
 10a:	ef 93       	push	r30
 10c:	ff 93       	push	r31
	//Se almacena en la variable lo que se recibe de UDR0
	bufferRX = UDR0;
 10e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	updateDutyCyclePWM2A(bufferRX);
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11a:	0e 94 0c 01 	call	0x218	; 0x218 <updateDutyCyclePWM2A>
 11e:	ff 91       	pop	r31
 120:	ef 91       	pop	r30
 122:	bf 91       	pop	r27
 124:	af 91       	pop	r26
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	7f 91       	pop	r23
 12c:	6f 91       	pop	r22
 12e:	5f 91       	pop	r21
 130:	4f 91       	pop	r20
 132:	3f 91       	pop	r19
 134:	2f 91       	pop	r18
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <initPWM0FastA>:
#define invertido 1
#define no_invertido 0

void initPWM0FastA(uint8_t inverted, uint16_t prescaler){
	//Configurando el pin PD6 como salida (OC0A)
	DDRD |= (1<<DDD6);
 140:	9a b1       	in	r25, 0x0a	; 10
 142:	90 64       	ori	r25, 0x40	; 64
 144:	9a b9       	out	0x0a, r25	; 10
	
	//TCCR0A = 0;
	//TCCR0B = 0;
	
	if (inverted){
 146:	88 23       	and	r24, r24
 148:	21 f0       	breq	.+8      	; 0x152 <initPWM0FastA+0x12>
		//Configurando OC0A como invertido
		TCCR0A |= (1<<COM0A1)|(1<<COM0A0);
 14a:	84 b5       	in	r24, 0x24	; 36
 14c:	80 6c       	ori	r24, 0xC0	; 192
 14e:	84 bd       	out	0x24, r24	; 36
 150:	03 c0       	rjmp	.+6      	; 0x158 <initPWM0FastA+0x18>
	}
	else {
		//Configurando OC0A como no invertido
		TCCR0A |= (1<<COM0A1);
 152:	84 b5       	in	r24, 0x24	; 36
 154:	80 68       	ori	r24, 0x80	; 128
 156:	84 bd       	out	0x24, r24	; 36
	}
	// Configurando modo FAST PWM0 TOP 0XFF
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
 158:	84 b5       	in	r24, 0x24	; 36
 15a:	83 60       	ori	r24, 0x03	; 3
 15c:	84 bd       	out	0x24, r24	; 36
	// Configurando prescaler de 1024
	if (prescaler==1024){
 15e:	61 15       	cp	r22, r1
 160:	74 40       	sbci	r23, 0x04	; 4
 162:	19 f4       	brne	.+6      	; 0x16a <initPWM0FastA+0x2a>
		TCCR0B |= (1<<CS02)|(1<<CS00);
 164:	85 b5       	in	r24, 0x25	; 37
 166:	85 60       	ori	r24, 0x05	; 5
 168:	85 bd       	out	0x25, r24	; 37
 16a:	08 95       	ret

0000016c <initPWM0FastB>:
	
}

void initPWM0FastB(uint8_t inverted, uint16_t prescaler){
	//Configurando el pin PD5 como salida (OC0B)
	DDRD |= (1<<DDD5);
 16c:	9a b1       	in	r25, 0x0a	; 10
 16e:	90 62       	ori	r25, 0x20	; 32
 170:	9a b9       	out	0x0a, r25	; 10
	
	// TCCR0B = 0;
	
	if (inverted){
 172:	88 23       	and	r24, r24
 174:	21 f0       	breq	.+8      	; 0x17e <initPWM0FastB+0x12>
		//Configurando OC0A como invertido
		TCCR0A |= (1<<COM0B1)|(1<<COM0B0);
 176:	84 b5       	in	r24, 0x24	; 36
 178:	80 63       	ori	r24, 0x30	; 48
 17a:	84 bd       	out	0x24, r24	; 36
 17c:	03 c0       	rjmp	.+6      	; 0x184 <initPWM0FastB+0x18>
	}
	else {
		//Configurando OC0A como no invertido
		TCCR0A |= (1<<COM0B1);
 17e:	84 b5       	in	r24, 0x24	; 36
 180:	80 62       	ori	r24, 0x20	; 32
 182:	84 bd       	out	0x24, r24	; 36
	}
	// Configurando modo FAST PWM0 TOP 0XFF
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
 184:	84 b5       	in	r24, 0x24	; 36
 186:	83 60       	ori	r24, 0x03	; 3
 188:	84 bd       	out	0x24, r24	; 36
	// Configurando prescaler de 1024
	if (prescaler==1024){
 18a:	61 15       	cp	r22, r1
 18c:	74 40       	sbci	r23, 0x04	; 4
 18e:	19 f4       	brne	.+6      	; 0x196 <initPWM0FastB+0x2a>
		TCCR0B |= (1<<CS02)|(1<<CS00);
 190:	85 b5       	in	r24, 0x25	; 37
 192:	85 60       	ori	r24, 0x05	; 5
 194:	85 bd       	out	0x25, r24	; 37
 196:	08 95       	ret

00000198 <initPWM1FastA>:
#define no_invertido 0


void initPWM1FastA(uint8_t inverted, uint16_t prescaler){
	//Configurando el pin PD6 como salida (OC1A)
	DDRB |= (1<<DDB1);
 198:	94 b1       	in	r25, 0x04	; 4
 19a:	92 60       	ori	r25, 0x02	; 2
 19c:	94 b9       	out	0x04, r25	; 4
	
	// Se limpian los registros TCCR1A Y TCCR1B
	TCCR1A = 0;
 19e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 1a2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	if (inverted){
 1a6:	88 23       	and	r24, r24
 1a8:	31 f0       	breq	.+12     	; 0x1b6 <initPWM1FastA+0x1e>
		//Configurando OC0A como invertido
		TCCR1A |= (1<<COM1A1)|(1<<COM1A0);
 1aa:	e0 e8       	ldi	r30, 0x80	; 128
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 6c       	ori	r24, 0xC0	; 192
 1b2:	80 83       	st	Z, r24
 1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <initPWM1FastA+0x28>
	}
	else{
		//Configurando OC0A como no invertido
		TCCR1A |= (1<<COM1A1);
 1b6:	e0 e8       	ldi	r30, 0x80	; 128
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	80 68       	ori	r24, 0x80	; 128
 1be:	80 83       	st	Z, r24
	}
	
	// Configurando modo FAST PWM1 16-bit TOP OCR1A
	//TCCR1A |= (1<<WGM10);
	TCCR1A |= (1<<WGM11);
 1c0:	e0 e8       	ldi	r30, 0x80	; 128
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	82 60       	ori	r24, 0x02	; 2
 1c8:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12)|(1<<WGM13);
 1ca:	e1 e8       	ldi	r30, 0x81	; 129
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	88 61       	ori	r24, 0x18	; 24
 1d2:	80 83       	st	Z, r24
	
	// Configurando prescaler de 1024
	TCCR1B |= (1<<CS12)|(1<<CS10);
 1d4:	80 81       	ld	r24, Z
 1d6:	85 60       	ori	r24, 0x05	; 5
 1d8:	80 83       	st	Z, r24
 1da:	08 95       	ret

000001dc <initPWM2FastA>:
	}
	// Configurando modo FAST PWM2 TOP 0XFF
	TCCR2A |= (1<<WGM21)|(1<<WGM20);
	
	// Configurando prescaler de 1024
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
 1dc:	94 b1       	in	r25, 0x04	; 4
 1de:	98 60       	ori	r25, 0x08	; 8
 1e0:	94 b9       	out	0x04, r25	; 4
 1e2:	88 23       	and	r24, r24
 1e4:	31 f0       	breq	.+12     	; 0x1f2 <initPWM2FastA+0x16>
 1e6:	e0 eb       	ldi	r30, 0xB0	; 176
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	80 6c       	ori	r24, 0xC0	; 192
 1ee:	80 83       	st	Z, r24
 1f0:	05 c0       	rjmp	.+10     	; 0x1fc <initPWM2FastA+0x20>
 1f2:	e0 eb       	ldi	r30, 0xB0	; 176
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	80 68       	ori	r24, 0x80	; 128
 1fa:	80 83       	st	Z, r24
 1fc:	e0 eb       	ldi	r30, 0xB0	; 176
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	83 60       	ori	r24, 0x03	; 3
 204:	80 83       	st	Z, r24
 206:	61 15       	cp	r22, r1
 208:	74 40       	sbci	r23, 0x04	; 4
 20a:	29 f4       	brne	.+10     	; 0x216 <initPWM2FastA+0x3a>
 20c:	e1 eb       	ldi	r30, 0xB1	; 177
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	87 60       	ori	r24, 0x07	; 7
 214:	80 83       	st	Z, r24
 216:	08 95       	ret

00000218 <updateDutyCyclePWM2A>:
	
}

void updateDutyCyclePWM2A(uint8_t duty2A){
	// Se carga el valor de OCR2A con un factor de mapeado
	OCR2A = duty2A * 0.15;
 218:	68 2f       	mov	r22, r24
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 69 01 	call	0x2d2	; 0x2d2 <__floatsisf>
 224:	2a e9       	ldi	r18, 0x9A	; 154
 226:	39 e9       	ldi	r19, 0x99	; 153
 228:	49 e1       	ldi	r20, 0x19	; 25
 22a:	5e e3       	ldi	r21, 0x3E	; 62
 22c:	0e 94 cd 01 	call	0x39a	; 0x39a <__mulsf3>
 230:	0e 94 38 01 	call	0x270	; 0x270 <__fixunssfsi>
 234:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 238:	08 95       	ret

0000023a <initUART9600>:


void initUART9600(void){
	
	//Paso 1: RX y TX como salida
	DDRD &= ~(1<<DDD0);
 23a:	8a b1       	in	r24, 0x0a	; 10
 23c:	8e 7f       	andi	r24, 0xFE	; 254
 23e:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
 240:	8a b1       	in	r24, 0x0a	; 10
 242:	82 60       	ori	r24, 0x02	; 2
 244:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2:Configurar UCSR0A
	UCSR0A = 0;
 246:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: configurar UCSR0B donde se habilita ISR de recepcion y se habilita RX y TX
	UCSR0B = 0;
 24a:	e1 ec       	ldi	r30, 0xC1	; 193
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
 250:	80 81       	ld	r24, Z
 252:	88 69       	ori	r24, 0x98	; 152
 254:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C, asincrono, paridad: none, 1 bit stop, data bits de 8 bits
	UCSR0C = 0;
 256:	e2 ec       	ldi	r30, 0xC2	; 194
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 25c:	80 81       	ld	r24, Z
 25e:	86 60       	ori	r24, 0x06	; 6
 260:	80 83       	st	Z, r24
	
	//Paso 5: COnfigurar velocidad de baudrate a 9600
	UBRR0 = 103;
 262:	87 e6       	ldi	r24, 0x67	; 103
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 26a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 26e:	08 95       	ret

00000270 <__fixunssfsi>:
 270:	0e 94 ac 01 	call	0x358	; 0x358 <__fp_splitA>
 274:	88 f0       	brcs	.+34     	; 0x298 <__fixunssfsi+0x28>
 276:	9f 57       	subi	r25, 0x7F	; 127
 278:	98 f0       	brcs	.+38     	; 0x2a0 <__fixunssfsi+0x30>
 27a:	b9 2f       	mov	r27, r25
 27c:	99 27       	eor	r25, r25
 27e:	b7 51       	subi	r27, 0x17	; 23
 280:	b0 f0       	brcs	.+44     	; 0x2ae <__fixunssfsi+0x3e>
 282:	e1 f0       	breq	.+56     	; 0x2bc <__fixunssfsi+0x4c>
 284:	66 0f       	add	r22, r22
 286:	77 1f       	adc	r23, r23
 288:	88 1f       	adc	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	1a f0       	brmi	.+6      	; 0x294 <__fixunssfsi+0x24>
 28e:	ba 95       	dec	r27
 290:	c9 f7       	brne	.-14     	; 0x284 <__fixunssfsi+0x14>
 292:	14 c0       	rjmp	.+40     	; 0x2bc <__fixunssfsi+0x4c>
 294:	b1 30       	cpi	r27, 0x01	; 1
 296:	91 f0       	breq	.+36     	; 0x2bc <__fixunssfsi+0x4c>
 298:	0e 94 c6 01 	call	0x38c	; 0x38c <__fp_zero>
 29c:	b1 e0       	ldi	r27, 0x01	; 1
 29e:	08 95       	ret
 2a0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__fp_zero>
 2a4:	67 2f       	mov	r22, r23
 2a6:	78 2f       	mov	r23, r24
 2a8:	88 27       	eor	r24, r24
 2aa:	b8 5f       	subi	r27, 0xF8	; 248
 2ac:	39 f0       	breq	.+14     	; 0x2bc <__fixunssfsi+0x4c>
 2ae:	b9 3f       	cpi	r27, 0xF9	; 249
 2b0:	cc f3       	brlt	.-14     	; 0x2a4 <__fixunssfsi+0x34>
 2b2:	86 95       	lsr	r24
 2b4:	77 95       	ror	r23
 2b6:	67 95       	ror	r22
 2b8:	b3 95       	inc	r27
 2ba:	d9 f7       	brne	.-10     	; 0x2b2 <__fixunssfsi+0x42>
 2bc:	3e f4       	brtc	.+14     	; 0x2cc <__fixunssfsi+0x5c>
 2be:	90 95       	com	r25
 2c0:	80 95       	com	r24
 2c2:	70 95       	com	r23
 2c4:	61 95       	neg	r22
 2c6:	7f 4f       	sbci	r23, 0xFF	; 255
 2c8:	8f 4f       	sbci	r24, 0xFF	; 255
 2ca:	9f 4f       	sbci	r25, 0xFF	; 255
 2cc:	08 95       	ret

000002ce <__floatunsisf>:
 2ce:	e8 94       	clt
 2d0:	09 c0       	rjmp	.+18     	; 0x2e4 <__floatsisf+0x12>

000002d2 <__floatsisf>:
 2d2:	97 fb       	bst	r25, 7
 2d4:	3e f4       	brtc	.+14     	; 0x2e4 <__floatsisf+0x12>
 2d6:	90 95       	com	r25
 2d8:	80 95       	com	r24
 2da:	70 95       	com	r23
 2dc:	61 95       	neg	r22
 2de:	7f 4f       	sbci	r23, 0xFF	; 255
 2e0:	8f 4f       	sbci	r24, 0xFF	; 255
 2e2:	9f 4f       	sbci	r25, 0xFF	; 255
 2e4:	99 23       	and	r25, r25
 2e6:	a9 f0       	breq	.+42     	; 0x312 <__floatsisf+0x40>
 2e8:	f9 2f       	mov	r31, r25
 2ea:	96 e9       	ldi	r25, 0x96	; 150
 2ec:	bb 27       	eor	r27, r27
 2ee:	93 95       	inc	r25
 2f0:	f6 95       	lsr	r31
 2f2:	87 95       	ror	r24
 2f4:	77 95       	ror	r23
 2f6:	67 95       	ror	r22
 2f8:	b7 95       	ror	r27
 2fa:	f1 11       	cpse	r31, r1
 2fc:	f8 cf       	rjmp	.-16     	; 0x2ee <__floatsisf+0x1c>
 2fe:	fa f4       	brpl	.+62     	; 0x33e <__floatsisf+0x6c>
 300:	bb 0f       	add	r27, r27
 302:	11 f4       	brne	.+4      	; 0x308 <__floatsisf+0x36>
 304:	60 ff       	sbrs	r22, 0
 306:	1b c0       	rjmp	.+54     	; 0x33e <__floatsisf+0x6c>
 308:	6f 5f       	subi	r22, 0xFF	; 255
 30a:	7f 4f       	sbci	r23, 0xFF	; 255
 30c:	8f 4f       	sbci	r24, 0xFF	; 255
 30e:	9f 4f       	sbci	r25, 0xFF	; 255
 310:	16 c0       	rjmp	.+44     	; 0x33e <__floatsisf+0x6c>
 312:	88 23       	and	r24, r24
 314:	11 f0       	breq	.+4      	; 0x31a <__floatsisf+0x48>
 316:	96 e9       	ldi	r25, 0x96	; 150
 318:	11 c0       	rjmp	.+34     	; 0x33c <__floatsisf+0x6a>
 31a:	77 23       	and	r23, r23
 31c:	21 f0       	breq	.+8      	; 0x326 <__floatsisf+0x54>
 31e:	9e e8       	ldi	r25, 0x8E	; 142
 320:	87 2f       	mov	r24, r23
 322:	76 2f       	mov	r23, r22
 324:	05 c0       	rjmp	.+10     	; 0x330 <__floatsisf+0x5e>
 326:	66 23       	and	r22, r22
 328:	71 f0       	breq	.+28     	; 0x346 <__floatsisf+0x74>
 32a:	96 e8       	ldi	r25, 0x86	; 134
 32c:	86 2f       	mov	r24, r22
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	2a f0       	brmi	.+10     	; 0x33e <__floatsisf+0x6c>
 334:	9a 95       	dec	r25
 336:	66 0f       	add	r22, r22
 338:	77 1f       	adc	r23, r23
 33a:	88 1f       	adc	r24, r24
 33c:	da f7       	brpl	.-10     	; 0x334 <__floatsisf+0x62>
 33e:	88 0f       	add	r24, r24
 340:	96 95       	lsr	r25
 342:	87 95       	ror	r24
 344:	97 f9       	bld	r25, 7
 346:	08 95       	ret

00000348 <__fp_split3>:
 348:	57 fd       	sbrc	r21, 7
 34a:	90 58       	subi	r25, 0x80	; 128
 34c:	44 0f       	add	r20, r20
 34e:	55 1f       	adc	r21, r21
 350:	59 f0       	breq	.+22     	; 0x368 <__fp_splitA+0x10>
 352:	5f 3f       	cpi	r21, 0xFF	; 255
 354:	71 f0       	breq	.+28     	; 0x372 <__fp_splitA+0x1a>
 356:	47 95       	ror	r20

00000358 <__fp_splitA>:
 358:	88 0f       	add	r24, r24
 35a:	97 fb       	bst	r25, 7
 35c:	99 1f       	adc	r25, r25
 35e:	61 f0       	breq	.+24     	; 0x378 <__fp_splitA+0x20>
 360:	9f 3f       	cpi	r25, 0xFF	; 255
 362:	79 f0       	breq	.+30     	; 0x382 <__fp_splitA+0x2a>
 364:	87 95       	ror	r24
 366:	08 95       	ret
 368:	12 16       	cp	r1, r18
 36a:	13 06       	cpc	r1, r19
 36c:	14 06       	cpc	r1, r20
 36e:	55 1f       	adc	r21, r21
 370:	f2 cf       	rjmp	.-28     	; 0x356 <__fp_split3+0xe>
 372:	46 95       	lsr	r20
 374:	f1 df       	rcall	.-30     	; 0x358 <__fp_splitA>
 376:	08 c0       	rjmp	.+16     	; 0x388 <__fp_splitA+0x30>
 378:	16 16       	cp	r1, r22
 37a:	17 06       	cpc	r1, r23
 37c:	18 06       	cpc	r1, r24
 37e:	99 1f       	adc	r25, r25
 380:	f1 cf       	rjmp	.-30     	; 0x364 <__fp_splitA+0xc>
 382:	86 95       	lsr	r24
 384:	71 05       	cpc	r23, r1
 386:	61 05       	cpc	r22, r1
 388:	08 94       	sec
 38a:	08 95       	ret

0000038c <__fp_zero>:
 38c:	e8 94       	clt

0000038e <__fp_szero>:
 38e:	bb 27       	eor	r27, r27
 390:	66 27       	eor	r22, r22
 392:	77 27       	eor	r23, r23
 394:	cb 01       	movw	r24, r22
 396:	97 f9       	bld	r25, 7
 398:	08 95       	ret

0000039a <__mulsf3>:
 39a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__mulsf3x>
 39e:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__fp_round>
 3a2:	0e 94 43 02 	call	0x486	; 0x486 <__fp_pscA>
 3a6:	38 f0       	brcs	.+14     	; 0x3b6 <__mulsf3+0x1c>
 3a8:	0e 94 4a 02 	call	0x494	; 0x494 <__fp_pscB>
 3ac:	20 f0       	brcs	.+8      	; 0x3b6 <__mulsf3+0x1c>
 3ae:	95 23       	and	r25, r21
 3b0:	11 f0       	breq	.+4      	; 0x3b6 <__mulsf3+0x1c>
 3b2:	0c 94 3a 02 	jmp	0x474	; 0x474 <__fp_inf>
 3b6:	0c 94 40 02 	jmp	0x480	; 0x480 <__fp_nan>
 3ba:	11 24       	eor	r1, r1
 3bc:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__fp_szero>

000003c0 <__mulsf3x>:
 3c0:	0e 94 a4 01 	call	0x348	; 0x348 <__fp_split3>
 3c4:	70 f3       	brcs	.-36     	; 0x3a2 <__mulsf3+0x8>

000003c6 <__mulsf3_pse>:
 3c6:	95 9f       	mul	r25, r21
 3c8:	c1 f3       	breq	.-16     	; 0x3ba <__mulsf3+0x20>
 3ca:	95 0f       	add	r25, r21
 3cc:	50 e0       	ldi	r21, 0x00	; 0
 3ce:	55 1f       	adc	r21, r21
 3d0:	62 9f       	mul	r22, r18
 3d2:	f0 01       	movw	r30, r0
 3d4:	72 9f       	mul	r23, r18
 3d6:	bb 27       	eor	r27, r27
 3d8:	f0 0d       	add	r31, r0
 3da:	b1 1d       	adc	r27, r1
 3dc:	63 9f       	mul	r22, r19
 3de:	aa 27       	eor	r26, r26
 3e0:	f0 0d       	add	r31, r0
 3e2:	b1 1d       	adc	r27, r1
 3e4:	aa 1f       	adc	r26, r26
 3e6:	64 9f       	mul	r22, r20
 3e8:	66 27       	eor	r22, r22
 3ea:	b0 0d       	add	r27, r0
 3ec:	a1 1d       	adc	r26, r1
 3ee:	66 1f       	adc	r22, r22
 3f0:	82 9f       	mul	r24, r18
 3f2:	22 27       	eor	r18, r18
 3f4:	b0 0d       	add	r27, r0
 3f6:	a1 1d       	adc	r26, r1
 3f8:	62 1f       	adc	r22, r18
 3fa:	73 9f       	mul	r23, r19
 3fc:	b0 0d       	add	r27, r0
 3fe:	a1 1d       	adc	r26, r1
 400:	62 1f       	adc	r22, r18
 402:	83 9f       	mul	r24, r19
 404:	a0 0d       	add	r26, r0
 406:	61 1d       	adc	r22, r1
 408:	22 1f       	adc	r18, r18
 40a:	74 9f       	mul	r23, r20
 40c:	33 27       	eor	r19, r19
 40e:	a0 0d       	add	r26, r0
 410:	61 1d       	adc	r22, r1
 412:	23 1f       	adc	r18, r19
 414:	84 9f       	mul	r24, r20
 416:	60 0d       	add	r22, r0
 418:	21 1d       	adc	r18, r1
 41a:	82 2f       	mov	r24, r18
 41c:	76 2f       	mov	r23, r22
 41e:	6a 2f       	mov	r22, r26
 420:	11 24       	eor	r1, r1
 422:	9f 57       	subi	r25, 0x7F	; 127
 424:	50 40       	sbci	r21, 0x00	; 0
 426:	9a f0       	brmi	.+38     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 428:	f1 f0       	breq	.+60     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 42a:	88 23       	and	r24, r24
 42c:	4a f0       	brmi	.+18     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 42e:	ee 0f       	add	r30, r30
 430:	ff 1f       	adc	r31, r31
 432:	bb 1f       	adc	r27, r27
 434:	66 1f       	adc	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	88 1f       	adc	r24, r24
 43a:	91 50       	subi	r25, 0x01	; 1
 43c:	50 40       	sbci	r21, 0x00	; 0
 43e:	a9 f7       	brne	.-22     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 440:	9e 3f       	cpi	r25, 0xFE	; 254
 442:	51 05       	cpc	r21, r1
 444:	80 f0       	brcs	.+32     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 446:	0c 94 3a 02 	jmp	0x474	; 0x474 <__fp_inf>
 44a:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__fp_szero>
 44e:	5f 3f       	cpi	r21, 0xFF	; 255
 450:	e4 f3       	brlt	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 452:	98 3e       	cpi	r25, 0xE8	; 232
 454:	d4 f3       	brlt	.-12     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 456:	86 95       	lsr	r24
 458:	77 95       	ror	r23
 45a:	67 95       	ror	r22
 45c:	b7 95       	ror	r27
 45e:	f7 95       	ror	r31
 460:	e7 95       	ror	r30
 462:	9f 5f       	subi	r25, 0xFF	; 255
 464:	c1 f7       	brne	.-16     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 466:	fe 2b       	or	r31, r30
 468:	88 0f       	add	r24, r24
 46a:	91 1d       	adc	r25, r1
 46c:	96 95       	lsr	r25
 46e:	87 95       	ror	r24
 470:	97 f9       	bld	r25, 7
 472:	08 95       	ret

00000474 <__fp_inf>:
 474:	97 f9       	bld	r25, 7
 476:	9f 67       	ori	r25, 0x7F	; 127
 478:	80 e8       	ldi	r24, 0x80	; 128
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	08 95       	ret

00000480 <__fp_nan>:
 480:	9f ef       	ldi	r25, 0xFF	; 255
 482:	80 ec       	ldi	r24, 0xC0	; 192
 484:	08 95       	ret

00000486 <__fp_pscA>:
 486:	00 24       	eor	r0, r0
 488:	0a 94       	dec	r0
 48a:	16 16       	cp	r1, r22
 48c:	17 06       	cpc	r1, r23
 48e:	18 06       	cpc	r1, r24
 490:	09 06       	cpc	r0, r25
 492:	08 95       	ret

00000494 <__fp_pscB>:
 494:	00 24       	eor	r0, r0
 496:	0a 94       	dec	r0
 498:	12 16       	cp	r1, r18
 49a:	13 06       	cpc	r1, r19
 49c:	14 06       	cpc	r1, r20
 49e:	05 06       	cpc	r0, r21
 4a0:	08 95       	ret

000004a2 <__fp_round>:
 4a2:	09 2e       	mov	r0, r25
 4a4:	03 94       	inc	r0
 4a6:	00 0c       	add	r0, r0
 4a8:	11 f4       	brne	.+4      	; 0x4ae <__fp_round+0xc>
 4aa:	88 23       	and	r24, r24
 4ac:	52 f0       	brmi	.+20     	; 0x4c2 <__fp_round+0x20>
 4ae:	bb 0f       	add	r27, r27
 4b0:	40 f4       	brcc	.+16     	; 0x4c2 <__fp_round+0x20>
 4b2:	bf 2b       	or	r27, r31
 4b4:	11 f4       	brne	.+4      	; 0x4ba <__fp_round+0x18>
 4b6:	60 ff       	sbrs	r22, 0
 4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <__fp_round+0x20>
 4ba:	6f 5f       	subi	r22, 0xFF	; 255
 4bc:	7f 4f       	sbci	r23, 0xFF	; 255
 4be:	8f 4f       	sbci	r24, 0xFF	; 255
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
 4c2:	08 95       	ret

000004c4 <_exit>:
 4c4:	f8 94       	cli

000004c6 <__stop_program>:
 4c6:	ff cf       	rjmp	.-2      	; 0x4c6 <__stop_program>
