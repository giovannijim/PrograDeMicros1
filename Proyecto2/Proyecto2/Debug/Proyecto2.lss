
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000990  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  00000a04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000a78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001155  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f6  00000000  00000000  00001d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c76  00000000  00000000  00002753  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  000033cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058f  00000000  00000000  000036bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000690  00000000  00000000  00003c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000042db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  88:	0c 94 c6 04 	jmp	0x98c	; 0x98c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
 */ 
#include <avr/io.h>
#include <stdint.h>

void initADC(uint8_t puertoADC){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	// Se selecciona un canal
	ADMUX = puertoADC;
  96:	80 83       	st	Z, r24
	
	// Se selecciona el voltaje VREF 5V
	ADMUX |= (1<<REFS0);
  98:	80 81       	ld	r24, Z
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  9e:	80 81       	ld	r24, Z
  a0:	8f 77       	andi	r24, 0x7F	; 127
  a2:	80 83       	st	Z, r24
	// Se justifica hacia la izquierda la salida del adc
	ADMUX |= (1 << ADLAR);
  a4:	80 81       	ld	r24, Z
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	80 83       	st	Z, r24
	// Habilitar prescaler de 16M/128 fadc = 125khz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	87 60       	ori	r24, 0x07	; 7
  b2:	80 83       	st	Z, r24
	// Activar la interrupcion del ADC
	ADCSRA |= (1<<ADIE);
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
	// Se activa el ADC
	ADCSRA |= (1<< ADEN);
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <setup>:
    }
}

void setup(void)
{
	estado = 0;
  c2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <estado>
	position = 0;
  c6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <position>
	DDRD |= (1<<DDD2)|(1<<DDD3)|(1<<DDD4);
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	8c 61       	ori	r24, 0x1C	; 28
  ce:	8a b9       	out	0x0a, r24	; 10
	//ESTABLECER PUERTO C1, C2 Y C3 COMO ENTRADA
	DDRC &= ~((1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3));
  d0:	87 b1       	in	r24, 0x07	; 7
  d2:	81 7f       	andi	r24, 0xF1	; 241
  d4:	87 b9       	out	0x07, r24	; 7
	//Habilitar la interrupción puerto C
	PCICR |= (1<<PCIE1);
  d6:	e8 e6       	ldi	r30, 0x68	; 104
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	80 83       	st	Z, r24
	// Habilitar mascara para pines PC1 PC2, PC3
	PCMSK1 = 0b00001110;
  e0:	8e e0       	ldi	r24, 0x0E	; 14
  e2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
  e6:	08 95       	ret

000000e8 <main>:
uint8_t memoria4;


int main(void)
{
	initUART9600();
  e8:	0e 94 fe 02 	call	0x5fc	; 0x5fc <initUART9600>
	cli();
  ec:	f8 94       	cli
	setup();
  ee:	0e 94 61 00 	call	0xc2	; 0xc2 <setup>
	initPWM0FastA(no_invertido, 1024);
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	74 e0       	ldi	r23, 0x04	; 4
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 3c 02 	call	0x478	; 0x478 <initPWM0FastA>
	initPWM0FastB(no_invertido, 1024);
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	74 e0       	ldi	r23, 0x04	; 4
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 52 02 	call	0x4a4	; 0x4a4 <initPWM0FastB>
	initPWM2FastA(no_invertido, 1024);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	74 e0       	ldi	r23, 0x04	; 4
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 cf 02 	call	0x59e	; 0x59e <initPWM2FastA>
	initPWM1FastA(no_invertido, 1024);
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	74 e0       	ldi	r23, 0x04	; 4
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 94 02 	call	0x528	; 0x528 <initPWM1FastA>
	sei();
 11a:	78 94       	sei
    while (1) 
    {
		// Modo MANUAL
		if (estado == 0){
 11c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <estado>
 120:	81 11       	cpse	r24, r1
 122:	65 c0       	rjmp	.+202    	; 0x1ee <main+0x106>
			PORTB &= ~(1<<PORTB5);
 124:	85 b1       	in	r24, 0x05	; 5
 126:	8f 7d       	andi	r24, 0xDF	; 223
 128:	85 b9       	out	0x05, r24	; 5
 			//inicializar ADC7
 			initADC(7);
 12a:	87 e0       	ldi	r24, 0x07	; 7
 12c:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
 			ADCSRA |= (1<< ADSC);				// Comenzar conversion
 130:	ea e7       	ldi	r30, 0x7A	; 122
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 64       	ori	r24, 0x40	; 64
 138:	80 83       	st	Z, r24
 			while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 13a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 13e:	86 fd       	sbrc	r24, 6
 140:	fc cf       	rjmp	.-8      	; 0x13a <main+0x52>
 			updateDutyCyclePWM2A(ADCH);			// Se llama la función de la librería
 142:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 146:	0e 94 ed 02 	call	0x5da	; 0x5da <updateDutyCyclePWM2A>

 			//inicializar ADC6
 			initADC(6);
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
 			ADCSRA |= (1<< ADSC);				// Comenzar conversion
 150:	ea e7       	ldi	r30, 0x7A	; 122
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 64       	ori	r24, 0x40	; 64
 158:	80 83       	st	Z, r24
 			while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 15a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 15e:	86 fd       	sbrc	r24, 6
 160:	fc cf       	rjmp	.-8      	; 0x15a <main+0x72>
 			updateDutyCyclePWM1A(ADCH);			// Se llama la función de la librería
 162:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 b6 02 	call	0x56c	; 0x56c <updateDutyCyclePWM1A>
		
 			//inicializar ADC5
 			initADC(5);
 16c:	85 e0       	ldi	r24, 0x05	; 5
 16e:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
 			ADCSRA |= (1<< ADSC);				// Comenzar conversion
 172:	ea e7       	ldi	r30, 0x7A	; 122
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	80 83       	st	Z, r24
 			while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 17c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 180:	86 fd       	sbrc	r24, 6
 182:	fc cf       	rjmp	.-8      	; 0x17c <main+0x94>
 			updateDutyCyclePWM0A(ADCH);			// Se llama la función de la librería
 184:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 188:	0e 94 68 02 	call	0x4d0	; 0x4d0 <updateDutyCyclePWM0A>
 		
 			//inicializar ADC4
 			initADC(4);
 18c:	84 e0       	ldi	r24, 0x04	; 4
 18e:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
 			ADCSRA |= (1<< ADSC);				// Comenzar conversion
 192:	ea e7       	ldi	r30, 0x7A	; 122
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	80 64       	ori	r24, 0x40	; 64
 19a:	80 83       	st	Z, r24
 			while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 19c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1a0:	86 fd       	sbrc	r24, 6
 1a2:	fc cf       	rjmp	.-8      	; 0x19c <main+0xb4>
 			updateDutyCyclePWM0B(ADCH);			// Se llama la función de la librería
 1a4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1a8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <updateDutyCyclePWM0B>
			 
			 if (position == 1){
 1ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <position>
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	21 f4       	brne	.+8      	; 0x1bc <main+0xd4>
			 PORTD &= ~((1<<PORTD4)|(1<<PORTD3));}
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	87 7e       	andi	r24, 0xE7	; 231
 1b8:	8b b9       	out	0x0b, r24	; 11
 1ba:	b0 cf       	rjmp	.-160    	; 0x11c <main+0x34>
			 else if(position==2){
 1bc:	82 30       	cpi	r24, 0x02	; 2
 1be:	39 f4       	brne	.+14     	; 0x1ce <main+0xe6>
				 PORTD &= ~(1<<PORTD3);
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	87 7f       	andi	r24, 0xF7	; 247
 1c4:	8b b9       	out	0x0b, r24	; 11
			 PORTD |= (1<<PORTD4);}
 1c6:	8b b1       	in	r24, 0x0b	; 11
 1c8:	80 61       	ori	r24, 0x10	; 16
 1ca:	8b b9       	out	0x0b, r24	; 11
 1cc:	a7 cf       	rjmp	.-178    	; 0x11c <main+0x34>
			 else if(position==3){
 1ce:	83 30       	cpi	r24, 0x03	; 3
 1d0:	39 f4       	brne	.+14     	; 0x1e0 <main+0xf8>
				 PORTD &= ~(1<<PORTD4);
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	8f 7e       	andi	r24, 0xEF	; 239
 1d6:	8b b9       	out	0x0b, r24	; 11
			 PORTD |= (1<<PORTD3);}
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	88 60       	ori	r24, 0x08	; 8
 1dc:	8b b9       	out	0x0b, r24	; 11
 1de:	9e cf       	rjmp	.-196    	; 0x11c <main+0x34>
			 else if(position==4){
 1e0:	84 30       	cpi	r24, 0x04	; 4
 1e2:	09 f0       	breq	.+2      	; 0x1e6 <main+0xfe>
 1e4:	9b cf       	rjmp	.-202    	; 0x11c <main+0x34>
				 PORTD |= (1<<PORTD3)|(1<<PORTD4);
 1e6:	8b b1       	in	r24, 0x0b	; 11
 1e8:	88 61       	ori	r24, 0x18	; 24
 1ea:	8b b9       	out	0x0b, r24	; 11
 1ec:	97 cf       	rjmp	.-210    	; 0x11c <main+0x34>
			 }
		}
		
		// Modo MEMORIA
		else if ( estado == 1)
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <main+0x10c>
 1f2:	94 cf       	rjmp	.-216    	; 0x11c <main+0x34>
		{
			
			PORTB |= (1<<PORTB5);
 1f4:	85 b1       	in	r24, 0x05	; 5
 1f6:	80 62       	ori	r24, 0x20	; 32
 1f8:	85 b9       	out	0x05, r24	; 5
			
			memoria1 = eeprom_read_byte((uint8_t*)(0+(5*position))) ;
 1fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <position>
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	ec 01       	movw	r28, r24
 202:	cc 0f       	add	r28, r28
 204:	dd 1f       	adc	r29, r29
 206:	cc 0f       	add	r28, r28
 208:	dd 1f       	adc	r29, r29
 20a:	c8 0f       	add	r28, r24
 20c:	d9 1f       	adc	r29, r25
 20e:	ce 01       	movw	r24, r28
 210:	0e 94 b0 04 	call	0x960	; 0x960 <eeprom_read_byte>
 214:	18 2f       	mov	r17, r24
 216:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			memoria2 = eeprom_read_byte((uint8_t*)(1+(5*position))) ;
 21a:	ce 01       	movw	r24, r28
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	0e 94 b0 04 	call	0x960	; 0x960 <eeprom_read_byte>
 222:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <memoria2>
			memoria3 = eeprom_read_byte((uint8_t*)(2+(5*position))) ;
 226:	ce 01       	movw	r24, r28
 228:	02 96       	adiw	r24, 0x02	; 2
 22a:	0e 94 b0 04 	call	0x960	; 0x960 <eeprom_read_byte>
 22e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <memoria3>
			memoria4 = eeprom_read_byte((uint8_t*)(3+(5*position))) ;
 232:	ce 01       	movw	r24, r28
 234:	03 96       	adiw	r24, 0x03	; 3
 236:	0e 94 b0 04 	call	0x960	; 0x960 <eeprom_read_byte>
 23a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <memoria4>
			updateDutyCyclePWM2A(memoria1);			// Actualizar el DutyCycle
 23e:	81 2f       	mov	r24, r17
 240:	0e 94 ed 02 	call	0x5da	; 0x5da <updateDutyCyclePWM2A>
			updateDutyCyclePWM1A(memoria2);			// Actualizar el DutyCycle
 244:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <memoria2>
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 b6 02 	call	0x56c	; 0x56c <updateDutyCyclePWM1A>
			updateDutyCyclePWM0A(memoria3);			// Actualizar el DutyCycle
 24e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <memoria3>
 252:	0e 94 68 02 	call	0x4d0	; 0x4d0 <updateDutyCyclePWM0A>
			updateDutyCyclePWM0B(memoria4);			// Actualizar el DutyCycle
 256:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <memoria4>
 25a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <updateDutyCyclePWM0B>
			if (position == 1){
 25e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <position>
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	21 f4       	brne	.+8      	; 0x26e <main+0x186>
				PORTD &= ~((1<<PORTD4)|(1<<PORTD3));}
 266:	8b b1       	in	r24, 0x0b	; 11
 268:	87 7e       	andi	r24, 0xE7	; 231
 26a:	8b b9       	out	0x0b, r24	; 11
 26c:	57 cf       	rjmp	.-338    	; 0x11c <main+0x34>
			else if(position==2){
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	39 f4       	brne	.+14     	; 0x280 <main+0x198>
				PORTD &= ~(1<<PORTD3);
 272:	8b b1       	in	r24, 0x0b	; 11
 274:	87 7f       	andi	r24, 0xF7	; 247
 276:	8b b9       	out	0x0b, r24	; 11
				PORTD |= (1<<PORTD4);}
 278:	8b b1       	in	r24, 0x0b	; 11
 27a:	80 61       	ori	r24, 0x10	; 16
 27c:	8b b9       	out	0x0b, r24	; 11
 27e:	4e cf       	rjmp	.-356    	; 0x11c <main+0x34>
			else if(position==3){
 280:	83 30       	cpi	r24, 0x03	; 3
 282:	39 f4       	brne	.+14     	; 0x292 <main+0x1aa>
				PORTD &= ~(1<<PORTD4);
 284:	8b b1       	in	r24, 0x0b	; 11
 286:	8f 7e       	andi	r24, 0xEF	; 239
 288:	8b b9       	out	0x0b, r24	; 11
				PORTD |= (1<<PORTD3);}
 28a:	8b b1       	in	r24, 0x0b	; 11
 28c:	88 60       	ori	r24, 0x08	; 8
 28e:	8b b9       	out	0x0b, r24	; 11
 290:	45 cf       	rjmp	.-374    	; 0x11c <main+0x34>
			else if(position==4){
 292:	84 30       	cpi	r24, 0x04	; 4
 294:	09 f0       	breq	.+2      	; 0x298 <main+0x1b0>
 296:	42 cf       	rjmp	.-380    	; 0x11c <main+0x34>
				PORTD |= (1<<PORTD3)|(1<<PORTD4);
 298:	8b b1       	in	r24, 0x0b	; 11
 29a:	88 61       	ori	r24, 0x18	; 24
 29c:	8b b9       	out	0x0b, r24	; 11
 29e:	3e cf       	rjmp	.-388    	; 0x11c <main+0x34>

000002a0 <__vector_21>:
	
}

// Vector de interrupcion ADC -------------------------------------------------
ISR(ADC_vect)
{
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	8f 93       	push	r24
 2ac:	ef 93       	push	r30
 2ae:	ff 93       	push	r31
	// Se escribe con un 1 lógico la bandera para apagarla
	ADCSRA |= (1<<ADIF);
 2b0:	ea e7       	ldi	r30, 0x7A	; 122
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	80 61       	ori	r24, 0x10	; 16
 2b8:	80 83       	st	Z, r24
}
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	8f 91       	pop	r24
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <__vector_18>:


ISR(USART_RX_vect)
{
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	2f 93       	push	r18
 2d6:	3f 93       	push	r19
 2d8:	4f 93       	push	r20
 2da:	5f 93       	push	r21
 2dc:	6f 93       	push	r22
 2de:	7f 93       	push	r23
 2e0:	8f 93       	push	r24
 2e2:	9f 93       	push	r25
 2e4:	af 93       	push	r26
 2e6:	bf 93       	push	r27
 2e8:	ef 93       	push	r30
 2ea:	ff 93       	push	r31
	//Se almacena en la variable lo que se recibe de UDR0
	bufferRX = UDR0;
 2ec:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2f0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bufferRX>
	updateDutyCyclePWM2A(bufferRX);
 2f4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bufferRX>
 2f8:	0e 94 ed 02 	call	0x5da	; 0x5da <updateDutyCyclePWM2A>
	}
 2fc:	ff 91       	pop	r31
 2fe:	ef 91       	pop	r30
 300:	bf 91       	pop	r27
 302:	af 91       	pop	r26
 304:	9f 91       	pop	r25
 306:	8f 91       	pop	r24
 308:	7f 91       	pop	r23
 30a:	6f 91       	pop	r22
 30c:	5f 91       	pop	r21
 30e:	4f 91       	pop	r20
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <__vector_4>:
	
ISR(PCINT1_vect)
{
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	2f 93       	push	r18
 32a:	3f 93       	push	r19
 32c:	4f 93       	push	r20
 32e:	5f 93       	push	r21
 330:	6f 93       	push	r22
 332:	7f 93       	push	r23
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	af 93       	push	r26
 33a:	bf 93       	push	r27
 33c:	ef 93       	push	r30
 33e:	ff 93       	push	r31
	if(!(PINC&(1<<PINC3))) // Si PINC3 se encuentra apagado ejecutar instrucción
 340:	33 99       	sbic	0x06, 3	; 6
 342:	0b c0       	rjmp	.+22     	; 0x35a <__vector_4+0x3c>
	{
		if(estado <= 2){estado ++;}
 344:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <estado>
 348:	83 30       	cpi	r24, 0x03	; 3
 34a:	20 f4       	brcc	.+8      	; 0x354 <__vector_4+0x36>
 34c:	8f 5f       	subi	r24, 0xFF	; 255
 34e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <estado>
 352:	7e c0       	rjmp	.+252    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
			else{estado=0; }
 354:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <estado>
 358:	7b c0       	rjmp	.+246    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
	}
	else if(!(PINC&(1<<PINC2))) // Si PINC2 se encuentra apagado ejecutar instrucción
 35a:	32 99       	sbic	0x06, 2	; 6
 35c:	0c c0       	rjmp	.+24     	; 0x376 <__vector_4+0x58>
	{
		
		if (position <= 3){
 35e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <position>
 362:	84 30       	cpi	r24, 0x04	; 4
 364:	20 f4       	brcc	.+8      	; 0x36e <__vector_4+0x50>
			position ++;	
 366:	8f 5f       	subi	r24, 0xFF	; 255
 368:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <position>
 36c:	71 c0       	rjmp	.+226    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		}
		else{
			position = 1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <position>
 374:	6d c0       	rjmp	.+218    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		}
	}
	else if(!(PINC&(1<<PINC1))) // Si PINC1 se encuentra apagado ejecutar instrucción
 376:	31 99       	sbic	0x06, 1	; 6
 378:	6b c0       	rjmp	.+214    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
	{
		//inicializar ADC7
		initADC(7);
 37a:	87 e0       	ldi	r24, 0x07	; 7
 37c:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
		ADCSRA |= (1<< ADSC);				// Comenzar conversion
 380:	ea e7       	ldi	r30, 0x7A	; 122
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	80 64       	ori	r24, 0x40	; 64
 388:	80 83       	st	Z, r24
		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 38a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 38e:	86 fd       	sbrc	r24, 6
 390:	fc cf       	rjmp	.-8      	; 0x38a <__vector_4+0x6c>
		eeprom_write_byte((unsigned char*)(0+(position*5)), ADCH);
 392:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 396:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <position>
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	9c 01       	movw	r18, r24
 39e:	22 0f       	add	r18, r18
 3a0:	33 1f       	adc	r19, r19
 3a2:	22 0f       	add	r18, r18
 3a4:	33 1f       	adc	r19, r19
 3a6:	82 0f       	add	r24, r18
 3a8:	93 1f       	adc	r25, r19
 3aa:	0e 94 b8 04 	call	0x970	; 0x970 <eeprom_write_byte>

		//inicializar ADC6
		initADC(6);
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
		ADCSRA |= (1<< ADSC);				// Comenzar conversion
 3b4:	ea e7       	ldi	r30, 0x7A	; 122
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	80 64       	ori	r24, 0x40	; 64
 3bc:	80 83       	st	Z, r24
		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 3be:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 3c2:	86 fd       	sbrc	r24, 6
 3c4:	fc cf       	rjmp	.-8      	; 0x3be <__vector_4+0xa0>
		eeprom_write_byte((unsigned char*)(1+(position*5)), ADCH);
 3c6:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 3ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <position>
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	9c 01       	movw	r18, r24
 3d2:	22 0f       	add	r18, r18
 3d4:	33 1f       	adc	r19, r19
 3d6:	22 0f       	add	r18, r18
 3d8:	33 1f       	adc	r19, r19
 3da:	82 0f       	add	r24, r18
 3dc:	93 1f       	adc	r25, r19
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	0e 94 b8 04 	call	0x970	; 0x970 <eeprom_write_byte>
		
		//inicializar ADC5
		initADC(5);
 3e4:	85 e0       	ldi	r24, 0x05	; 5
 3e6:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
		ADCSRA |= (1<< ADSC);				// Comenzar conversion
 3ea:	ea e7       	ldi	r30, 0x7A	; 122
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	80 64       	ori	r24, 0x40	; 64
 3f2:	80 83       	st	Z, r24
		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 3f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 3f8:	86 fd       	sbrc	r24, 6
 3fa:	fc cf       	rjmp	.-8      	; 0x3f4 <__vector_4+0xd6>
		eeprom_write_byte((unsigned char*)(2+(position*5)), ADCH);
 3fc:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 400:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <position>
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	9c 01       	movw	r18, r24
 408:	22 0f       	add	r18, r18
 40a:	33 1f       	adc	r19, r19
 40c:	22 0f       	add	r18, r18
 40e:	33 1f       	adc	r19, r19
 410:	82 0f       	add	r24, r18
 412:	93 1f       	adc	r25, r19
 414:	02 96       	adiw	r24, 0x02	; 2
 416:	0e 94 b8 04 	call	0x970	; 0x970 <eeprom_write_byte>
		
		//inicializar ADC4
		initADC(4);
 41a:	84 e0       	ldi	r24, 0x04	; 4
 41c:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
		ADCSRA |= (1<< ADSC);				// Comenzar conversion
 420:	ea e7       	ldi	r30, 0x7A	; 122
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	80 64       	ori	r24, 0x40	; 64
 428:	80 83       	st	Z, r24
		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 42a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 42e:	86 fd       	sbrc	r24, 6
 430:	fc cf       	rjmp	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		eeprom_write_byte((unsigned char*)(3+(position*5)), ADCH);
 432:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 436:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <position>
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	9c 01       	movw	r18, r24
 43e:	22 0f       	add	r18, r18
 440:	33 1f       	adc	r19, r19
 442:	22 0f       	add	r18, r18
 444:	33 1f       	adc	r19, r19
 446:	82 0f       	add	r24, r18
 448:	93 1f       	adc	r25, r19
 44a:	03 96       	adiw	r24, 0x03	; 3
 44c:	0e 94 b8 04 	call	0x970	; 0x970 <eeprom_write_byte>
	}
	
	PCIFR |= (1<<PCIF1); // Apagar la bandera de interrupción
 450:	8b b3       	in	r24, 0x1b	; 27
 452:	82 60       	ori	r24, 0x02	; 2
 454:	8b bb       	out	0x1b, r24	; 27
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	bf 91       	pop	r27
 45c:	af 91       	pop	r26
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	7f 91       	pop	r23
 464:	6f 91       	pop	r22
 466:	5f 91       	pop	r21
 468:	4f 91       	pop	r20
 46a:	3f 91       	pop	r19
 46c:	2f 91       	pop	r18
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <initPWM0FastA>:
#define invertido 1
#define no_invertido 0

void initPWM0FastA(uint8_t inverted, uint16_t prescaler){
	//Configurando el pin PD6 como salida (OC0A)
	DDRD |= (1<<DDD6);
 478:	9a b1       	in	r25, 0x0a	; 10
 47a:	90 64       	ori	r25, 0x40	; 64
 47c:	9a b9       	out	0x0a, r25	; 10
	
	//TCCR0A = 0;
	//TCCR0B = 0;
	
	if (inverted){
 47e:	88 23       	and	r24, r24
 480:	21 f0       	breq	.+8      	; 0x48a <initPWM0FastA+0x12>
		//Configurando OC0A como invertido
		TCCR0A |= (1<<COM0A1)|(1<<COM0A0);
 482:	84 b5       	in	r24, 0x24	; 36
 484:	80 6c       	ori	r24, 0xC0	; 192
 486:	84 bd       	out	0x24, r24	; 36
 488:	03 c0       	rjmp	.+6      	; 0x490 <initPWM0FastA+0x18>
	}
	else {
		//Configurando OC0A como no invertido
		TCCR0A |= (1<<COM0A1);
 48a:	84 b5       	in	r24, 0x24	; 36
 48c:	80 68       	ori	r24, 0x80	; 128
 48e:	84 bd       	out	0x24, r24	; 36
	}
	// Configurando modo FAST PWM0 TOP 0XFF
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
 490:	84 b5       	in	r24, 0x24	; 36
 492:	83 60       	ori	r24, 0x03	; 3
 494:	84 bd       	out	0x24, r24	; 36
	// Configurando prescaler de 1024
	if (prescaler==1024){
 496:	61 15       	cp	r22, r1
 498:	74 40       	sbci	r23, 0x04	; 4
 49a:	19 f4       	brne	.+6      	; 0x4a2 <initPWM0FastA+0x2a>
		TCCR0B |= (1<<CS02)|(1<<CS00);
 49c:	85 b5       	in	r24, 0x25	; 37
 49e:	85 60       	ori	r24, 0x05	; 5
 4a0:	85 bd       	out	0x25, r24	; 37
 4a2:	08 95       	ret

000004a4 <initPWM0FastB>:
	
}

void initPWM0FastB(uint8_t inverted, uint16_t prescaler){
	//Configurando el pin PD5 como salida (OC0B)
	DDRD |= (1<<DDD5);
 4a4:	9a b1       	in	r25, 0x0a	; 10
 4a6:	90 62       	ori	r25, 0x20	; 32
 4a8:	9a b9       	out	0x0a, r25	; 10
	
	// TCCR0B = 0;
	
	if (inverted){
 4aa:	88 23       	and	r24, r24
 4ac:	21 f0       	breq	.+8      	; 0x4b6 <initPWM0FastB+0x12>
		//Configurando OC0A como invertido
		TCCR0A |= (1<<COM0B1)|(1<<COM0B0);
 4ae:	84 b5       	in	r24, 0x24	; 36
 4b0:	80 63       	ori	r24, 0x30	; 48
 4b2:	84 bd       	out	0x24, r24	; 36
 4b4:	03 c0       	rjmp	.+6      	; 0x4bc <initPWM0FastB+0x18>
	}
	else {
		//Configurando OC0A como no invertido
		TCCR0A |= (1<<COM0B1);
 4b6:	84 b5       	in	r24, 0x24	; 36
 4b8:	80 62       	ori	r24, 0x20	; 32
 4ba:	84 bd       	out	0x24, r24	; 36
	}
	// Configurando modo FAST PWM0 TOP 0XFF
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
 4bc:	84 b5       	in	r24, 0x24	; 36
 4be:	83 60       	ori	r24, 0x03	; 3
 4c0:	84 bd       	out	0x24, r24	; 36
	// Configurando prescaler de 1024
	if (prescaler==1024){
 4c2:	61 15       	cp	r22, r1
 4c4:	74 40       	sbci	r23, 0x04	; 4
 4c6:	19 f4       	brne	.+6      	; 0x4ce <initPWM0FastB+0x2a>
		TCCR0B |= (1<<CS02)|(1<<CS00);
 4c8:	85 b5       	in	r24, 0x25	; 37
 4ca:	85 60       	ori	r24, 0x05	; 5
 4cc:	85 bd       	out	0x25, r24	; 37
 4ce:	08 95       	ret

000004d0 <updateDutyCyclePWM0A>:
	}
}

void updateDutyCyclePWM0A(uint8_t duty){
	OCR0A = duty * 0.15 + 0x000A;
 4d0:	68 2f       	mov	r22, r24
 4d2:	70 e0       	ldi	r23, 0x00	; 0
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 b7 03 	call	0x76e	; 0x76e <__floatsisf>
 4dc:	2a e9       	ldi	r18, 0x9A	; 154
 4de:	39 e9       	ldi	r19, 0x99	; 153
 4e0:	49 e1       	ldi	r20, 0x19	; 25
 4e2:	5e e3       	ldi	r21, 0x3E	; 62
 4e4:	0e 94 43 04 	call	0x886	; 0x886 <__mulsf3>
 4e8:	20 e0       	ldi	r18, 0x00	; 0
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	40 e2       	ldi	r20, 0x20	; 32
 4ee:	51 e4       	ldi	r21, 0x41	; 65
 4f0:	0e 94 1a 03 	call	0x634	; 0x634 <__addsf3>
 4f4:	0e 94 86 03 	call	0x70c	; 0x70c <__fixunssfsi>
 4f8:	67 bd       	out	0x27, r22	; 39
 4fa:	08 95       	ret

000004fc <updateDutyCyclePWM0B>:
}

void updateDutyCyclePWM0B(uint8_t duty){
	OCR0B = duty * 0.15 + 0x000A;
 4fc:	68 2f       	mov	r22, r24
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 b7 03 	call	0x76e	; 0x76e <__floatsisf>
 508:	2a e9       	ldi	r18, 0x9A	; 154
 50a:	39 e9       	ldi	r19, 0x99	; 153
 50c:	49 e1       	ldi	r20, 0x19	; 25
 50e:	5e e3       	ldi	r21, 0x3E	; 62
 510:	0e 94 43 04 	call	0x886	; 0x886 <__mulsf3>
 514:	20 e0       	ldi	r18, 0x00	; 0
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	40 e2       	ldi	r20, 0x20	; 32
 51a:	51 e4       	ldi	r21, 0x41	; 65
 51c:	0e 94 1a 03 	call	0x634	; 0x634 <__addsf3>
 520:	0e 94 86 03 	call	0x70c	; 0x70c <__fixunssfsi>
 524:	68 bd       	out	0x28, r22	; 40
 526:	08 95       	ret

00000528 <initPWM1FastA>:
	// Configurando modo FAST PWM1 8-bit TOP 0X00FF
	TCCR1A |= (1<<WGM11)|(1<<WGM10);
	
	// Configurando prescaler de 1024
	if (prescaler==1024){
		TCCR1B |= (1<<CS12)|(1<<CS10);
 528:	94 b1       	in	r25, 0x04	; 4
 52a:	92 60       	ori	r25, 0x02	; 2
 52c:	94 b9       	out	0x04, r25	; 4
 52e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 532:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 536:	88 23       	and	r24, r24
 538:	31 f0       	breq	.+12     	; 0x546 <initPWM1FastA+0x1e>
 53a:	e0 e8       	ldi	r30, 0x80	; 128
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	80 6c       	ori	r24, 0xC0	; 192
 542:	80 83       	st	Z, r24
 544:	05 c0       	rjmp	.+10     	; 0x550 <initPWM1FastA+0x28>
 546:	e0 e8       	ldi	r30, 0x80	; 128
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	80 68       	ori	r24, 0x80	; 128
 54e:	80 83       	st	Z, r24
 550:	e0 e8       	ldi	r30, 0x80	; 128
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	80 81       	ld	r24, Z
 556:	82 60       	ori	r24, 0x02	; 2
 558:	80 83       	st	Z, r24
 55a:	e1 e8       	ldi	r30, 0x81	; 129
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	88 61       	ori	r24, 0x18	; 24
 562:	80 83       	st	Z, r24
 564:	80 81       	ld	r24, Z
 566:	85 60       	ori	r24, 0x05	; 5
 568:	80 83       	st	Z, r24
 56a:	08 95       	ret

0000056c <updateDutyCyclePWM1A>:
	}
}

void updateDutyCyclePWM1A(uint8_t duty){
	// Se carga el valor a ICR1, para configurar el periodo
	ICR1H = 0x01;
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L= 0x58;
 572:	98 e5       	ldi	r25, 0x58	; 88
 574:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	// Se carga el valor de OCR1A
	OCR1A = 0.139 * duty;
 578:	68 2f       	mov	r22, r24
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 b7 03 	call	0x76e	; 0x76e <__floatsisf>
 584:	24 e0       	ldi	r18, 0x04	; 4
 586:	36 e5       	ldi	r19, 0x56	; 86
 588:	4e e0       	ldi	r20, 0x0E	; 14
 58a:	5e e3       	ldi	r21, 0x3E	; 62
 58c:	0e 94 43 04 	call	0x886	; 0x886 <__mulsf3>
 590:	0e 94 86 03 	call	0x70c	; 0x70c <__fixunssfsi>
 594:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 598:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 59c:	08 95       	ret

0000059e <initPWM2FastA>:
	}
	// Configurando modo FAST PWM2 TOP 0XFF
	TCCR2A |= (1<<WGM21)|(1<<WGM20);
	
	// Configurando prescaler de 1024
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
 59e:	94 b1       	in	r25, 0x04	; 4
 5a0:	98 60       	ori	r25, 0x08	; 8
 5a2:	94 b9       	out	0x04, r25	; 4
 5a4:	88 23       	and	r24, r24
 5a6:	31 f0       	breq	.+12     	; 0x5b4 <initPWM2FastA+0x16>
 5a8:	e0 eb       	ldi	r30, 0xB0	; 176
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	80 81       	ld	r24, Z
 5ae:	80 6c       	ori	r24, 0xC0	; 192
 5b0:	80 83       	st	Z, r24
 5b2:	05 c0       	rjmp	.+10     	; 0x5be <initPWM2FastA+0x20>
 5b4:	e0 eb       	ldi	r30, 0xB0	; 176
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	80 81       	ld	r24, Z
 5ba:	80 68       	ori	r24, 0x80	; 128
 5bc:	80 83       	st	Z, r24
 5be:	e0 eb       	ldi	r30, 0xB0	; 176
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 81       	ld	r24, Z
 5c4:	83 60       	ori	r24, 0x03	; 3
 5c6:	80 83       	st	Z, r24
 5c8:	61 15       	cp	r22, r1
 5ca:	74 40       	sbci	r23, 0x04	; 4
 5cc:	29 f4       	brne	.+10     	; 0x5d8 <initPWM2FastA+0x3a>
 5ce:	e1 eb       	ldi	r30, 0xB1	; 177
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	80 81       	ld	r24, Z
 5d4:	87 60       	ori	r24, 0x07	; 7
 5d6:	80 83       	st	Z, r24
 5d8:	08 95       	ret

000005da <updateDutyCyclePWM2A>:
	
}

void updateDutyCyclePWM2A(uint8_t duty2A){
	// Se carga el valor de OCR2A con un factor de mapeado
	OCR2A = duty2A * 0.166 ;
 5da:	68 2f       	mov	r22, r24
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 b7 03 	call	0x76e	; 0x76e <__floatsisf>
 5e6:	27 ee       	ldi	r18, 0xE7	; 231
 5e8:	3b ef       	ldi	r19, 0xFB	; 251
 5ea:	49 e2       	ldi	r20, 0x29	; 41
 5ec:	5e e3       	ldi	r21, 0x3E	; 62
 5ee:	0e 94 43 04 	call	0x886	; 0x886 <__mulsf3>
 5f2:	0e 94 86 03 	call	0x70c	; 0x70c <__fixunssfsi>
 5f6:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 5fa:	08 95       	ret

000005fc <initUART9600>:


void initUART9600(void){
	
	//Paso 1: RX y TX como salida
	DDRD &= ~(1<<DDD0);
 5fc:	8a b1       	in	r24, 0x0a	; 10
 5fe:	8e 7f       	andi	r24, 0xFE	; 254
 600:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
 602:	8a b1       	in	r24, 0x0a	; 10
 604:	82 60       	ori	r24, 0x02	; 2
 606:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2:Configurar UCSR0A
	UCSR0A = 0;
 608:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: configurar UCSR0B donde se habilita ISR de recepcion y se habilita RX y TX
	UCSR0B = 0;
 60c:	e1 ec       	ldi	r30, 0xC1	; 193
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
 612:	80 81       	ld	r24, Z
 614:	88 69       	ori	r24, 0x98	; 152
 616:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C, asincrono, paridad: none, 1 bit stop, data bits de 8 bits
	UCSR0C = 0;
 618:	e2 ec       	ldi	r30, 0xC2	; 194
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 61e:	80 81       	ld	r24, Z
 620:	86 60       	ori	r24, 0x06	; 6
 622:	80 83       	st	Z, r24
	
	//Paso 5: COnfigurar velocidad de baudrate a 9600
	UBRR0 = 103;
 624:	87 e6       	ldi	r24, 0x67	; 103
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 62c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 630:	08 95       	ret

00000632 <__subsf3>:
 632:	50 58       	subi	r21, 0x80	; 128

00000634 <__addsf3>:
 634:	bb 27       	eor	r27, r27
 636:	aa 27       	eor	r26, r26
 638:	0e 94 31 03 	call	0x662	; 0x662 <__addsf3x>
 63c:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_round>
 640:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_pscA>
 644:	38 f0       	brcs	.+14     	; 0x654 <__addsf3+0x20>
 646:	0e 94 02 04 	call	0x804	; 0x804 <__fp_pscB>
 64a:	20 f0       	brcs	.+8      	; 0x654 <__addsf3+0x20>
 64c:	39 f4       	brne	.+14     	; 0x65c <__addsf3+0x28>
 64e:	9f 3f       	cpi	r25, 0xFF	; 255
 650:	19 f4       	brne	.+6      	; 0x658 <__addsf3+0x24>
 652:	26 f4       	brtc	.+8      	; 0x65c <__addsf3+0x28>
 654:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__fp_nan>
 658:	0e f4       	brtc	.+2      	; 0x65c <__addsf3+0x28>
 65a:	e0 95       	com	r30
 65c:	e7 fb       	bst	r30, 7
 65e:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__fp_inf>

00000662 <__addsf3x>:
 662:	e9 2f       	mov	r30, r25
 664:	0e 94 1a 04 	call	0x834	; 0x834 <__fp_split3>
 668:	58 f3       	brcs	.-42     	; 0x640 <__addsf3+0xc>
 66a:	ba 17       	cp	r27, r26
 66c:	62 07       	cpc	r22, r18
 66e:	73 07       	cpc	r23, r19
 670:	84 07       	cpc	r24, r20
 672:	95 07       	cpc	r25, r21
 674:	20 f0       	brcs	.+8      	; 0x67e <__addsf3x+0x1c>
 676:	79 f4       	brne	.+30     	; 0x696 <__addsf3x+0x34>
 678:	a6 f5       	brtc	.+104    	; 0x6e2 <__addsf3x+0x80>
 67a:	0c 94 3c 04 	jmp	0x878	; 0x878 <__fp_zero>
 67e:	0e f4       	brtc	.+2      	; 0x682 <__addsf3x+0x20>
 680:	e0 95       	com	r30
 682:	0b 2e       	mov	r0, r27
 684:	ba 2f       	mov	r27, r26
 686:	a0 2d       	mov	r26, r0
 688:	0b 01       	movw	r0, r22
 68a:	b9 01       	movw	r22, r18
 68c:	90 01       	movw	r18, r0
 68e:	0c 01       	movw	r0, r24
 690:	ca 01       	movw	r24, r20
 692:	a0 01       	movw	r20, r0
 694:	11 24       	eor	r1, r1
 696:	ff 27       	eor	r31, r31
 698:	59 1b       	sub	r21, r25
 69a:	99 f0       	breq	.+38     	; 0x6c2 <__addsf3x+0x60>
 69c:	59 3f       	cpi	r21, 0xF9	; 249
 69e:	50 f4       	brcc	.+20     	; 0x6b4 <__addsf3x+0x52>
 6a0:	50 3e       	cpi	r21, 0xE0	; 224
 6a2:	68 f1       	brcs	.+90     	; 0x6fe <__addsf3x+0x9c>
 6a4:	1a 16       	cp	r1, r26
 6a6:	f0 40       	sbci	r31, 0x00	; 0
 6a8:	a2 2f       	mov	r26, r18
 6aa:	23 2f       	mov	r18, r19
 6ac:	34 2f       	mov	r19, r20
 6ae:	44 27       	eor	r20, r20
 6b0:	58 5f       	subi	r21, 0xF8	; 248
 6b2:	f3 cf       	rjmp	.-26     	; 0x69a <__addsf3x+0x38>
 6b4:	46 95       	lsr	r20
 6b6:	37 95       	ror	r19
 6b8:	27 95       	ror	r18
 6ba:	a7 95       	ror	r26
 6bc:	f0 40       	sbci	r31, 0x00	; 0
 6be:	53 95       	inc	r21
 6c0:	c9 f7       	brne	.-14     	; 0x6b4 <__addsf3x+0x52>
 6c2:	7e f4       	brtc	.+30     	; 0x6e2 <__addsf3x+0x80>
 6c4:	1f 16       	cp	r1, r31
 6c6:	ba 0b       	sbc	r27, r26
 6c8:	62 0b       	sbc	r22, r18
 6ca:	73 0b       	sbc	r23, r19
 6cc:	84 0b       	sbc	r24, r20
 6ce:	ba f0       	brmi	.+46     	; 0x6fe <__addsf3x+0x9c>
 6d0:	91 50       	subi	r25, 0x01	; 1
 6d2:	a1 f0       	breq	.+40     	; 0x6fc <__addsf3x+0x9a>
 6d4:	ff 0f       	add	r31, r31
 6d6:	bb 1f       	adc	r27, r27
 6d8:	66 1f       	adc	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	c2 f7       	brpl	.-16     	; 0x6d0 <__addsf3x+0x6e>
 6e0:	0e c0       	rjmp	.+28     	; 0x6fe <__addsf3x+0x9c>
 6e2:	ba 0f       	add	r27, r26
 6e4:	62 1f       	adc	r22, r18
 6e6:	73 1f       	adc	r23, r19
 6e8:	84 1f       	adc	r24, r20
 6ea:	48 f4       	brcc	.+18     	; 0x6fe <__addsf3x+0x9c>
 6ec:	87 95       	ror	r24
 6ee:	77 95       	ror	r23
 6f0:	67 95       	ror	r22
 6f2:	b7 95       	ror	r27
 6f4:	f7 95       	ror	r31
 6f6:	9e 3f       	cpi	r25, 0xFE	; 254
 6f8:	08 f0       	brcs	.+2      	; 0x6fc <__addsf3x+0x9a>
 6fa:	b0 cf       	rjmp	.-160    	; 0x65c <__addsf3+0x28>
 6fc:	93 95       	inc	r25
 6fe:	88 0f       	add	r24, r24
 700:	08 f0       	brcs	.+2      	; 0x704 <__addsf3x+0xa2>
 702:	99 27       	eor	r25, r25
 704:	ee 0f       	add	r30, r30
 706:	97 95       	ror	r25
 708:	87 95       	ror	r24
 70a:	08 95       	ret

0000070c <__fixunssfsi>:
 70c:	0e 94 22 04 	call	0x844	; 0x844 <__fp_splitA>
 710:	88 f0       	brcs	.+34     	; 0x734 <__fixunssfsi+0x28>
 712:	9f 57       	subi	r25, 0x7F	; 127
 714:	98 f0       	brcs	.+38     	; 0x73c <__fixunssfsi+0x30>
 716:	b9 2f       	mov	r27, r25
 718:	99 27       	eor	r25, r25
 71a:	b7 51       	subi	r27, 0x17	; 23
 71c:	b0 f0       	brcs	.+44     	; 0x74a <__fixunssfsi+0x3e>
 71e:	e1 f0       	breq	.+56     	; 0x758 <__fixunssfsi+0x4c>
 720:	66 0f       	add	r22, r22
 722:	77 1f       	adc	r23, r23
 724:	88 1f       	adc	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	1a f0       	brmi	.+6      	; 0x730 <__fixunssfsi+0x24>
 72a:	ba 95       	dec	r27
 72c:	c9 f7       	brne	.-14     	; 0x720 <__fixunssfsi+0x14>
 72e:	14 c0       	rjmp	.+40     	; 0x758 <__fixunssfsi+0x4c>
 730:	b1 30       	cpi	r27, 0x01	; 1
 732:	91 f0       	breq	.+36     	; 0x758 <__fixunssfsi+0x4c>
 734:	0e 94 3c 04 	call	0x878	; 0x878 <__fp_zero>
 738:	b1 e0       	ldi	r27, 0x01	; 1
 73a:	08 95       	ret
 73c:	0c 94 3c 04 	jmp	0x878	; 0x878 <__fp_zero>
 740:	67 2f       	mov	r22, r23
 742:	78 2f       	mov	r23, r24
 744:	88 27       	eor	r24, r24
 746:	b8 5f       	subi	r27, 0xF8	; 248
 748:	39 f0       	breq	.+14     	; 0x758 <__fixunssfsi+0x4c>
 74a:	b9 3f       	cpi	r27, 0xF9	; 249
 74c:	cc f3       	brlt	.-14     	; 0x740 <__fixunssfsi+0x34>
 74e:	86 95       	lsr	r24
 750:	77 95       	ror	r23
 752:	67 95       	ror	r22
 754:	b3 95       	inc	r27
 756:	d9 f7       	brne	.-10     	; 0x74e <__fixunssfsi+0x42>
 758:	3e f4       	brtc	.+14     	; 0x768 <__fixunssfsi+0x5c>
 75a:	90 95       	com	r25
 75c:	80 95       	com	r24
 75e:	70 95       	com	r23
 760:	61 95       	neg	r22
 762:	7f 4f       	sbci	r23, 0xFF	; 255
 764:	8f 4f       	sbci	r24, 0xFF	; 255
 766:	9f 4f       	sbci	r25, 0xFF	; 255
 768:	08 95       	ret

0000076a <__floatunsisf>:
 76a:	e8 94       	clt
 76c:	09 c0       	rjmp	.+18     	; 0x780 <__floatsisf+0x12>

0000076e <__floatsisf>:
 76e:	97 fb       	bst	r25, 7
 770:	3e f4       	brtc	.+14     	; 0x780 <__floatsisf+0x12>
 772:	90 95       	com	r25
 774:	80 95       	com	r24
 776:	70 95       	com	r23
 778:	61 95       	neg	r22
 77a:	7f 4f       	sbci	r23, 0xFF	; 255
 77c:	8f 4f       	sbci	r24, 0xFF	; 255
 77e:	9f 4f       	sbci	r25, 0xFF	; 255
 780:	99 23       	and	r25, r25
 782:	a9 f0       	breq	.+42     	; 0x7ae <__floatsisf+0x40>
 784:	f9 2f       	mov	r31, r25
 786:	96 e9       	ldi	r25, 0x96	; 150
 788:	bb 27       	eor	r27, r27
 78a:	93 95       	inc	r25
 78c:	f6 95       	lsr	r31
 78e:	87 95       	ror	r24
 790:	77 95       	ror	r23
 792:	67 95       	ror	r22
 794:	b7 95       	ror	r27
 796:	f1 11       	cpse	r31, r1
 798:	f8 cf       	rjmp	.-16     	; 0x78a <__floatsisf+0x1c>
 79a:	fa f4       	brpl	.+62     	; 0x7da <__floatsisf+0x6c>
 79c:	bb 0f       	add	r27, r27
 79e:	11 f4       	brne	.+4      	; 0x7a4 <__floatsisf+0x36>
 7a0:	60 ff       	sbrs	r22, 0
 7a2:	1b c0       	rjmp	.+54     	; 0x7da <__floatsisf+0x6c>
 7a4:	6f 5f       	subi	r22, 0xFF	; 255
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255
 7a8:	8f 4f       	sbci	r24, 0xFF	; 255
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	16 c0       	rjmp	.+44     	; 0x7da <__floatsisf+0x6c>
 7ae:	88 23       	and	r24, r24
 7b0:	11 f0       	breq	.+4      	; 0x7b6 <__floatsisf+0x48>
 7b2:	96 e9       	ldi	r25, 0x96	; 150
 7b4:	11 c0       	rjmp	.+34     	; 0x7d8 <__floatsisf+0x6a>
 7b6:	77 23       	and	r23, r23
 7b8:	21 f0       	breq	.+8      	; 0x7c2 <__floatsisf+0x54>
 7ba:	9e e8       	ldi	r25, 0x8E	; 142
 7bc:	87 2f       	mov	r24, r23
 7be:	76 2f       	mov	r23, r22
 7c0:	05 c0       	rjmp	.+10     	; 0x7cc <__floatsisf+0x5e>
 7c2:	66 23       	and	r22, r22
 7c4:	71 f0       	breq	.+28     	; 0x7e2 <__floatsisf+0x74>
 7c6:	96 e8       	ldi	r25, 0x86	; 134
 7c8:	86 2f       	mov	r24, r22
 7ca:	70 e0       	ldi	r23, 0x00	; 0
 7cc:	60 e0       	ldi	r22, 0x00	; 0
 7ce:	2a f0       	brmi	.+10     	; 0x7da <__floatsisf+0x6c>
 7d0:	9a 95       	dec	r25
 7d2:	66 0f       	add	r22, r22
 7d4:	77 1f       	adc	r23, r23
 7d6:	88 1f       	adc	r24, r24
 7d8:	da f7       	brpl	.-10     	; 0x7d0 <__floatsisf+0x62>
 7da:	88 0f       	add	r24, r24
 7dc:	96 95       	lsr	r25
 7de:	87 95       	ror	r24
 7e0:	97 f9       	bld	r25, 7
 7e2:	08 95       	ret

000007e4 <__fp_inf>:
 7e4:	97 f9       	bld	r25, 7
 7e6:	9f 67       	ori	r25, 0x7F	; 127
 7e8:	80 e8       	ldi	r24, 0x80	; 128
 7ea:	70 e0       	ldi	r23, 0x00	; 0
 7ec:	60 e0       	ldi	r22, 0x00	; 0
 7ee:	08 95       	ret

000007f0 <__fp_nan>:
 7f0:	9f ef       	ldi	r25, 0xFF	; 255
 7f2:	80 ec       	ldi	r24, 0xC0	; 192
 7f4:	08 95       	ret

000007f6 <__fp_pscA>:
 7f6:	00 24       	eor	r0, r0
 7f8:	0a 94       	dec	r0
 7fa:	16 16       	cp	r1, r22
 7fc:	17 06       	cpc	r1, r23
 7fe:	18 06       	cpc	r1, r24
 800:	09 06       	cpc	r0, r25
 802:	08 95       	ret

00000804 <__fp_pscB>:
 804:	00 24       	eor	r0, r0
 806:	0a 94       	dec	r0
 808:	12 16       	cp	r1, r18
 80a:	13 06       	cpc	r1, r19
 80c:	14 06       	cpc	r1, r20
 80e:	05 06       	cpc	r0, r21
 810:	08 95       	ret

00000812 <__fp_round>:
 812:	09 2e       	mov	r0, r25
 814:	03 94       	inc	r0
 816:	00 0c       	add	r0, r0
 818:	11 f4       	brne	.+4      	; 0x81e <__fp_round+0xc>
 81a:	88 23       	and	r24, r24
 81c:	52 f0       	brmi	.+20     	; 0x832 <__fp_round+0x20>
 81e:	bb 0f       	add	r27, r27
 820:	40 f4       	brcc	.+16     	; 0x832 <__fp_round+0x20>
 822:	bf 2b       	or	r27, r31
 824:	11 f4       	brne	.+4      	; 0x82a <__fp_round+0x18>
 826:	60 ff       	sbrs	r22, 0
 828:	04 c0       	rjmp	.+8      	; 0x832 <__fp_round+0x20>
 82a:	6f 5f       	subi	r22, 0xFF	; 255
 82c:	7f 4f       	sbci	r23, 0xFF	; 255
 82e:	8f 4f       	sbci	r24, 0xFF	; 255
 830:	9f 4f       	sbci	r25, 0xFF	; 255
 832:	08 95       	ret

00000834 <__fp_split3>:
 834:	57 fd       	sbrc	r21, 7
 836:	90 58       	subi	r25, 0x80	; 128
 838:	44 0f       	add	r20, r20
 83a:	55 1f       	adc	r21, r21
 83c:	59 f0       	breq	.+22     	; 0x854 <__fp_splitA+0x10>
 83e:	5f 3f       	cpi	r21, 0xFF	; 255
 840:	71 f0       	breq	.+28     	; 0x85e <__fp_splitA+0x1a>
 842:	47 95       	ror	r20

00000844 <__fp_splitA>:
 844:	88 0f       	add	r24, r24
 846:	97 fb       	bst	r25, 7
 848:	99 1f       	adc	r25, r25
 84a:	61 f0       	breq	.+24     	; 0x864 <__fp_splitA+0x20>
 84c:	9f 3f       	cpi	r25, 0xFF	; 255
 84e:	79 f0       	breq	.+30     	; 0x86e <__fp_splitA+0x2a>
 850:	87 95       	ror	r24
 852:	08 95       	ret
 854:	12 16       	cp	r1, r18
 856:	13 06       	cpc	r1, r19
 858:	14 06       	cpc	r1, r20
 85a:	55 1f       	adc	r21, r21
 85c:	f2 cf       	rjmp	.-28     	; 0x842 <__fp_split3+0xe>
 85e:	46 95       	lsr	r20
 860:	f1 df       	rcall	.-30     	; 0x844 <__fp_splitA>
 862:	08 c0       	rjmp	.+16     	; 0x874 <__fp_splitA+0x30>
 864:	16 16       	cp	r1, r22
 866:	17 06       	cpc	r1, r23
 868:	18 06       	cpc	r1, r24
 86a:	99 1f       	adc	r25, r25
 86c:	f1 cf       	rjmp	.-30     	; 0x850 <__fp_splitA+0xc>
 86e:	86 95       	lsr	r24
 870:	71 05       	cpc	r23, r1
 872:	61 05       	cpc	r22, r1
 874:	08 94       	sec
 876:	08 95       	ret

00000878 <__fp_zero>:
 878:	e8 94       	clt

0000087a <__fp_szero>:
 87a:	bb 27       	eor	r27, r27
 87c:	66 27       	eor	r22, r22
 87e:	77 27       	eor	r23, r23
 880:	cb 01       	movw	r24, r22
 882:	97 f9       	bld	r25, 7
 884:	08 95       	ret

00000886 <__mulsf3>:
 886:	0e 94 56 04 	call	0x8ac	; 0x8ac <__mulsf3x>
 88a:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_round>
 88e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_pscA>
 892:	38 f0       	brcs	.+14     	; 0x8a2 <__mulsf3+0x1c>
 894:	0e 94 02 04 	call	0x804	; 0x804 <__fp_pscB>
 898:	20 f0       	brcs	.+8      	; 0x8a2 <__mulsf3+0x1c>
 89a:	95 23       	and	r25, r21
 89c:	11 f0       	breq	.+4      	; 0x8a2 <__mulsf3+0x1c>
 89e:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__fp_inf>
 8a2:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__fp_nan>
 8a6:	11 24       	eor	r1, r1
 8a8:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_szero>

000008ac <__mulsf3x>:
 8ac:	0e 94 1a 04 	call	0x834	; 0x834 <__fp_split3>
 8b0:	70 f3       	brcs	.-36     	; 0x88e <__mulsf3+0x8>

000008b2 <__mulsf3_pse>:
 8b2:	95 9f       	mul	r25, r21
 8b4:	c1 f3       	breq	.-16     	; 0x8a6 <__mulsf3+0x20>
 8b6:	95 0f       	add	r25, r21
 8b8:	50 e0       	ldi	r21, 0x00	; 0
 8ba:	55 1f       	adc	r21, r21
 8bc:	62 9f       	mul	r22, r18
 8be:	f0 01       	movw	r30, r0
 8c0:	72 9f       	mul	r23, r18
 8c2:	bb 27       	eor	r27, r27
 8c4:	f0 0d       	add	r31, r0
 8c6:	b1 1d       	adc	r27, r1
 8c8:	63 9f       	mul	r22, r19
 8ca:	aa 27       	eor	r26, r26
 8cc:	f0 0d       	add	r31, r0
 8ce:	b1 1d       	adc	r27, r1
 8d0:	aa 1f       	adc	r26, r26
 8d2:	64 9f       	mul	r22, r20
 8d4:	66 27       	eor	r22, r22
 8d6:	b0 0d       	add	r27, r0
 8d8:	a1 1d       	adc	r26, r1
 8da:	66 1f       	adc	r22, r22
 8dc:	82 9f       	mul	r24, r18
 8de:	22 27       	eor	r18, r18
 8e0:	b0 0d       	add	r27, r0
 8e2:	a1 1d       	adc	r26, r1
 8e4:	62 1f       	adc	r22, r18
 8e6:	73 9f       	mul	r23, r19
 8e8:	b0 0d       	add	r27, r0
 8ea:	a1 1d       	adc	r26, r1
 8ec:	62 1f       	adc	r22, r18
 8ee:	83 9f       	mul	r24, r19
 8f0:	a0 0d       	add	r26, r0
 8f2:	61 1d       	adc	r22, r1
 8f4:	22 1f       	adc	r18, r18
 8f6:	74 9f       	mul	r23, r20
 8f8:	33 27       	eor	r19, r19
 8fa:	a0 0d       	add	r26, r0
 8fc:	61 1d       	adc	r22, r1
 8fe:	23 1f       	adc	r18, r19
 900:	84 9f       	mul	r24, r20
 902:	60 0d       	add	r22, r0
 904:	21 1d       	adc	r18, r1
 906:	82 2f       	mov	r24, r18
 908:	76 2f       	mov	r23, r22
 90a:	6a 2f       	mov	r22, r26
 90c:	11 24       	eor	r1, r1
 90e:	9f 57       	subi	r25, 0x7F	; 127
 910:	50 40       	sbci	r21, 0x00	; 0
 912:	9a f0       	brmi	.+38     	; 0x93a <__stack+0x3b>
 914:	f1 f0       	breq	.+60     	; 0x952 <__stack+0x53>
 916:	88 23       	and	r24, r24
 918:	4a f0       	brmi	.+18     	; 0x92c <__stack+0x2d>
 91a:	ee 0f       	add	r30, r30
 91c:	ff 1f       	adc	r31, r31
 91e:	bb 1f       	adc	r27, r27
 920:	66 1f       	adc	r22, r22
 922:	77 1f       	adc	r23, r23
 924:	88 1f       	adc	r24, r24
 926:	91 50       	subi	r25, 0x01	; 1
 928:	50 40       	sbci	r21, 0x00	; 0
 92a:	a9 f7       	brne	.-22     	; 0x916 <__stack+0x17>
 92c:	9e 3f       	cpi	r25, 0xFE	; 254
 92e:	51 05       	cpc	r21, r1
 930:	80 f0       	brcs	.+32     	; 0x952 <__stack+0x53>
 932:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__fp_inf>
 936:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_szero>
 93a:	5f 3f       	cpi	r21, 0xFF	; 255
 93c:	e4 f3       	brlt	.-8      	; 0x936 <__stack+0x37>
 93e:	98 3e       	cpi	r25, 0xE8	; 232
 940:	d4 f3       	brlt	.-12     	; 0x936 <__stack+0x37>
 942:	86 95       	lsr	r24
 944:	77 95       	ror	r23
 946:	67 95       	ror	r22
 948:	b7 95       	ror	r27
 94a:	f7 95       	ror	r31
 94c:	e7 95       	ror	r30
 94e:	9f 5f       	subi	r25, 0xFF	; 255
 950:	c1 f7       	brne	.-16     	; 0x942 <__stack+0x43>
 952:	fe 2b       	or	r31, r30
 954:	88 0f       	add	r24, r24
 956:	91 1d       	adc	r25, r1
 958:	96 95       	lsr	r25
 95a:	87 95       	ror	r24
 95c:	97 f9       	bld	r25, 7
 95e:	08 95       	ret

00000960 <eeprom_read_byte>:
 960:	f9 99       	sbic	0x1f, 1	; 31
 962:	fe cf       	rjmp	.-4      	; 0x960 <eeprom_read_byte>
 964:	92 bd       	out	0x22, r25	; 34
 966:	81 bd       	out	0x21, r24	; 33
 968:	f8 9a       	sbi	0x1f, 0	; 31
 96a:	99 27       	eor	r25, r25
 96c:	80 b5       	in	r24, 0x20	; 32
 96e:	08 95       	ret

00000970 <eeprom_write_byte>:
 970:	26 2f       	mov	r18, r22

00000972 <eeprom_write_r18>:
 972:	f9 99       	sbic	0x1f, 1	; 31
 974:	fe cf       	rjmp	.-4      	; 0x972 <eeprom_write_r18>
 976:	1f ba       	out	0x1f, r1	; 31
 978:	92 bd       	out	0x22, r25	; 34
 97a:	81 bd       	out	0x21, r24	; 33
 97c:	20 bd       	out	0x20, r18	; 32
 97e:	0f b6       	in	r0, 0x3f	; 63
 980:	f8 94       	cli
 982:	fa 9a       	sbi	0x1f, 2	; 31
 984:	f9 9a       	sbi	0x1f, 1	; 31
 986:	0f be       	out	0x3f, r0	; 63
 988:	01 96       	adiw	r24, 0x01	; 1
 98a:	08 95       	ret

0000098c <_exit>:
 98c:	f8 94       	cli

0000098e <__stop_program>:
 98e:	ff cf       	rjmp	.-2      	; 0x98e <__stop_program>
