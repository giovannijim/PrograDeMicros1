
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000570  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000005e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000614  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6d  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a2  00000000  00000000  000013b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075d  00000000  00000000  00001c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  000023b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a3  00000000  00000000  00002520  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a2  00000000  00000000  000029c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002c65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  88:	0c 94 b6 02 	jmp	0x56c	; 0x56c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
 */ 
#include <avr/io.h>
#include <stdint.h>

void initADC(uint8_t puertoADC){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	// Se selecciona un canal
	ADMUX = puertoADC;
  96:	80 83       	st	Z, r24
	
	// Se selecciona el voltaje VREF 5V
	ADMUX |= (1<<REFS0);
  98:	80 81       	ld	r24, Z
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  9e:	80 81       	ld	r24, Z
  a0:	8f 77       	andi	r24, 0x7F	; 127
  a2:	80 83       	st	Z, r24
	// Se justifica hacia la izquierda la salida del adc
	ADMUX |= (1 << ADLAR);
  a4:	80 81       	ld	r24, Z
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	80 83       	st	Z, r24
	// Habilitar prescaler de 16M/128 fadc = 125khz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	87 60       	ori	r24, 0x07	; 7
  b2:	80 83       	st	Z, r24
	// Activar la interrupcion del ADC
	ADCSRA |= (1<<ADIE);
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
	// Se activa el ADC
	ADCSRA |= (1<< ADEN);
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <main>:
uint8_t duty;

int main(void)
{
	// Se apaga tx y rx
	UCSR0B = 0;
  c2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	duty =0;
  c6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <duty>
	cli();
  ca:	f8 94       	cli
	initPWM0FastA(no_invertido, 1024);
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	74 e0       	ldi	r23, 0x04	; 4
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <initPWM0FastA>
	initPWM0FastB(no_invertido, 1024);
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	74 e0       	ldi	r23, 0x04	; 4
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <initPWM0FastB>
	initPWM2FastA(no_invertido, 1024);
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	74 e0       	ldi	r23, 0x04	; 4
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 5d 01 	call	0x2ba	; 0x2ba <initPWM2FastA>
	initPWM1FastA(no_invertido, 1024);
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	74 e0       	ldi	r23, 0x04	; 4
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 22 01 	call	0x244	; 0x244 <initPWM1FastA>
	sei();
  f4:	78 94       	sei
	
    while (1) 
    {

 		//inicializar ADC7
 		initADC(7);
  f6:	87 e0       	ldi	r24, 0x07	; 7
  f8:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
 		ADCSRA |= (1<< ADSC);				// Comenzar conversion
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 64       	ori	r24, 0x40	; 64
 104:	80 83       	st	Z, r24
 		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 106:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 10a:	86 fd       	sbrc	r24, 6
 10c:	fc cf       	rjmp	.-8      	; 0x106 <main+0x44>
		varADCH = ADCH;
 10e:	e9 e7       	ldi	r30, 0x79	; 121
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 		updateDutyCyclePWM2A(ADCH);			// Se llama la función de la librería
 118:	80 81       	ld	r24, Z
 11a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <updateDutyCyclePWM2A>
		

 		//inicializar ADC6
 		initADC(6);
 11e:	86 e0       	ldi	r24, 0x06	; 6
 120:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
 		ADCSRA |= (1<< ADSC);				// Comenzar conversion
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
 		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 12e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 132:	86 fd       	sbrc	r24, 6
 134:	fc cf       	rjmp	.-8      	; 0x12e <main+0x6c>
 		updateDutyCyclePWM1A(ADCH);			// Se llama la función de la librería
 136:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 44 01 	call	0x288	; 0x288 <updateDutyCyclePWM1A>
		
 		//inicializar ADC5
 		initADC(5);
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
 		ADCSRA |= (1<< ADSC);				// Comenzar conversion
 146:	ea e7       	ldi	r30, 0x7A	; 122
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	80 83       	st	Z, r24
 		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 150:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 154:	86 fd       	sbrc	r24, 6
 156:	fc cf       	rjmp	.-8      	; 0x150 <main+0x8e>
 		updateDutyCyclePWM0A(ADCH);			// Se llama la función de la librería
 158:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 15c:	0e 94 02 01 	call	0x204	; 0x204 <updateDutyCyclePWM0A>
 		
 		//inicializar ADC4
 		initADC(4);
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
 		ADCSRA |= (1<< ADSC);				// Comenzar conversion
 166:	ea e7       	ldi	r30, 0x7A	; 122
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	80 83       	st	Z, r24
 		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 170:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 174:	86 fd       	sbrc	r24, 6
 176:	fc cf       	rjmp	.-8      	; 0x170 <main+0xae>
 		updateDutyCyclePWM0B(ADCH);			// Se llama la función de la librería
 178:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 17c:	0e 94 12 01 	call	0x224	; 0x224 <updateDutyCyclePWM0B>
    }
 180:	ba cf       	rjmp	.-140    	; 0xf6 <main+0x34>

00000182 <__vector_21>:
}

// Vector de interrupcion ADC -------------------------------------------------
ISR(ADC_vect)
{
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	8f 93       	push	r24
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
	// Se escribe con un 1 lógico la bandera para apagarla
	ADCSRA |= (1<<ADIF);
 192:	ea e7       	ldi	r30, 0x7A	; 122
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	80 61       	ori	r24, 0x10	; 16
 19a:	80 83       	st	Z, r24
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	8f 91       	pop	r24
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <initPWM0FastA>:
#define invertido 1
#define no_invertido 0

void initPWM0FastA(uint8_t inverted, uint16_t prescaler){
	//Configurando el pin PD6 como salida (OC0A)
	DDRD |= (1<<DDD6);
 1ac:	9a b1       	in	r25, 0x0a	; 10
 1ae:	90 64       	ori	r25, 0x40	; 64
 1b0:	9a b9       	out	0x0a, r25	; 10
	
	//TCCR0A = 0;
	//TCCR0B = 0;
	
	if (inverted){
 1b2:	88 23       	and	r24, r24
 1b4:	21 f0       	breq	.+8      	; 0x1be <initPWM0FastA+0x12>
		//Configurando OC0A como invertido
		TCCR0A |= (1<<COM0A1)|(1<<COM0A0);
 1b6:	84 b5       	in	r24, 0x24	; 36
 1b8:	80 6c       	ori	r24, 0xC0	; 192
 1ba:	84 bd       	out	0x24, r24	; 36
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <initPWM0FastA+0x18>
	}
	else {
		//Configurando OC0A como no invertido
		TCCR0A |= (1<<COM0A1);
 1be:	84 b5       	in	r24, 0x24	; 36
 1c0:	80 68       	ori	r24, 0x80	; 128
 1c2:	84 bd       	out	0x24, r24	; 36
	}
	// Configurando modo FAST PWM0 TOP 0XFF
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
 1c4:	84 b5       	in	r24, 0x24	; 36
 1c6:	83 60       	ori	r24, 0x03	; 3
 1c8:	84 bd       	out	0x24, r24	; 36
	// Configurando prescaler de 1024
	if (prescaler==1024){
 1ca:	61 15       	cp	r22, r1
 1cc:	74 40       	sbci	r23, 0x04	; 4
 1ce:	19 f4       	brne	.+6      	; 0x1d6 <initPWM0FastA+0x2a>
		TCCR0B |= (1<<CS02)|(1<<CS00);
 1d0:	85 b5       	in	r24, 0x25	; 37
 1d2:	85 60       	ori	r24, 0x05	; 5
 1d4:	85 bd       	out	0x25, r24	; 37
 1d6:	08 95       	ret

000001d8 <initPWM0FastB>:
	
}

void initPWM0FastB(uint8_t inverted, uint16_t prescaler){
	//Configurando el pin PD5 como salida (OC0B)
	DDRD |= (1<<DDD5);
 1d8:	9a b1       	in	r25, 0x0a	; 10
 1da:	90 62       	ori	r25, 0x20	; 32
 1dc:	9a b9       	out	0x0a, r25	; 10
	
	// TCCR0B = 0;
	
	if (inverted){
 1de:	88 23       	and	r24, r24
 1e0:	21 f0       	breq	.+8      	; 0x1ea <initPWM0FastB+0x12>
		//Configurando OC0A como invertido
		TCCR0A |= (1<<COM0B1)|(1<<COM0B0);
 1e2:	84 b5       	in	r24, 0x24	; 36
 1e4:	80 63       	ori	r24, 0x30	; 48
 1e6:	84 bd       	out	0x24, r24	; 36
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <initPWM0FastB+0x18>
	}
	else {
		//Configurando OC0A como no invertido
		TCCR0A |= (1<<COM0B1);
 1ea:	84 b5       	in	r24, 0x24	; 36
 1ec:	80 62       	ori	r24, 0x20	; 32
 1ee:	84 bd       	out	0x24, r24	; 36
	}
	// Configurando modo FAST PWM0 TOP 0XFF
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
 1f0:	84 b5       	in	r24, 0x24	; 36
 1f2:	83 60       	ori	r24, 0x03	; 3
 1f4:	84 bd       	out	0x24, r24	; 36
	// Configurando prescaler de 1024
	if (prescaler==1024){
 1f6:	61 15       	cp	r22, r1
 1f8:	74 40       	sbci	r23, 0x04	; 4
 1fa:	19 f4       	brne	.+6      	; 0x202 <initPWM0FastB+0x2a>
		TCCR0B |= (1<<CS02)|(1<<CS00);
 1fc:	85 b5       	in	r24, 0x25	; 37
 1fe:	85 60       	ori	r24, 0x05	; 5
 200:	85 bd       	out	0x25, r24	; 37
 202:	08 95       	ret

00000204 <updateDutyCyclePWM0A>:
	}
}

void updateDutyCyclePWM0A(uint8_t duty){
	OCR0A = duty * 0.15;
 204:	68 2f       	mov	r22, r24
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 bd 01 	call	0x37a	; 0x37a <__floatsisf>
 210:	2a e9       	ldi	r18, 0x9A	; 154
 212:	39 e9       	ldi	r19, 0x99	; 153
 214:	49 e1       	ldi	r20, 0x19	; 25
 216:	5e e3       	ldi	r21, 0x3E	; 62
 218:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
 21c:	0e 94 8c 01 	call	0x318	; 0x318 <__fixunssfsi>
 220:	67 bd       	out	0x27, r22	; 39
 222:	08 95       	ret

00000224 <updateDutyCyclePWM0B>:
}

void updateDutyCyclePWM0B(uint8_t duty){
	OCR0B = duty * 0.15;
 224:	68 2f       	mov	r22, r24
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 bd 01 	call	0x37a	; 0x37a <__floatsisf>
 230:	2a e9       	ldi	r18, 0x9A	; 154
 232:	39 e9       	ldi	r19, 0x99	; 153
 234:	49 e1       	ldi	r20, 0x19	; 25
 236:	5e e3       	ldi	r21, 0x3E	; 62
 238:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
 23c:	0e 94 8c 01 	call	0x318	; 0x318 <__fixunssfsi>
 240:	68 bd       	out	0x28, r22	; 40
 242:	08 95       	ret

00000244 <initPWM1FastA>:
	// Configurando modo FAST PWM1 8-bit TOP 0X00FF
	TCCR1A |= (1<<WGM11)|(1<<WGM10);
	
	// Configurando prescaler de 1024
	if (prescaler==1024){
		TCCR1B |= (1<<CS12)|(1<<CS10);
 244:	94 b1       	in	r25, 0x04	; 4
 246:	92 60       	ori	r25, 0x02	; 2
 248:	94 b9       	out	0x04, r25	; 4
 24a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 24e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 252:	88 23       	and	r24, r24
 254:	31 f0       	breq	.+12     	; 0x262 <initPWM1FastA+0x1e>
 256:	e0 e8       	ldi	r30, 0x80	; 128
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	80 6c       	ori	r24, 0xC0	; 192
 25e:	80 83       	st	Z, r24
 260:	05 c0       	rjmp	.+10     	; 0x26c <initPWM1FastA+0x28>
 262:	e0 e8       	ldi	r30, 0x80	; 128
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	80 68       	ori	r24, 0x80	; 128
 26a:	80 83       	st	Z, r24
 26c:	e0 e8       	ldi	r30, 0x80	; 128
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	82 60       	ori	r24, 0x02	; 2
 274:	80 83       	st	Z, r24
 276:	e1 e8       	ldi	r30, 0x81	; 129
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	88 61       	ori	r24, 0x18	; 24
 27e:	80 83       	st	Z, r24
 280:	80 81       	ld	r24, Z
 282:	85 60       	ori	r24, 0x05	; 5
 284:	80 83       	st	Z, r24
 286:	08 95       	ret

00000288 <updateDutyCyclePWM1A>:
	}
}

void updateDutyCyclePWM1A(uint8_t duty){
	// Se carga el valor a ICR1, para configurar el periodo
	ICR1H = 0x01;
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L= 0x58;
 28e:	98 e5       	ldi	r25, 0x58	; 88
 290:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	// Se carga el valor de OCR1A
	OCR1A = 0.139 * duty;
 294:	68 2f       	mov	r22, r24
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 bd 01 	call	0x37a	; 0x37a <__floatsisf>
 2a0:	24 e0       	ldi	r18, 0x04	; 4
 2a2:	36 e5       	ldi	r19, 0x56	; 86
 2a4:	4e e0       	ldi	r20, 0x0E	; 14
 2a6:	5e e3       	ldi	r21, 0x3E	; 62
 2a8:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
 2ac:	0e 94 8c 01 	call	0x318	; 0x318 <__fixunssfsi>
 2b0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2b4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 2b8:	08 95       	ret

000002ba <initPWM2FastA>:
	}
	// Configurando modo FAST PWM2 TOP 0XFF
	TCCR2A |= (1<<WGM21)|(1<<WGM20);
	
	// Configurando prescaler de 1024
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
 2ba:	94 b1       	in	r25, 0x04	; 4
 2bc:	98 60       	ori	r25, 0x08	; 8
 2be:	94 b9       	out	0x04, r25	; 4
 2c0:	88 23       	and	r24, r24
 2c2:	31 f0       	breq	.+12     	; 0x2d0 <initPWM2FastA+0x16>
 2c4:	e0 eb       	ldi	r30, 0xB0	; 176
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	80 6c       	ori	r24, 0xC0	; 192
 2cc:	80 83       	st	Z, r24
 2ce:	05 c0       	rjmp	.+10     	; 0x2da <initPWM2FastA+0x20>
 2d0:	e0 eb       	ldi	r30, 0xB0	; 176
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	80 68       	ori	r24, 0x80	; 128
 2d8:	80 83       	st	Z, r24
 2da:	e0 eb       	ldi	r30, 0xB0	; 176
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	83 60       	ori	r24, 0x03	; 3
 2e2:	80 83       	st	Z, r24
 2e4:	61 15       	cp	r22, r1
 2e6:	74 40       	sbci	r23, 0x04	; 4
 2e8:	29 f4       	brne	.+10     	; 0x2f4 <initPWM2FastA+0x3a>
 2ea:	e1 eb       	ldi	r30, 0xB1	; 177
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	87 60       	ori	r24, 0x07	; 7
 2f2:	80 83       	st	Z, r24
 2f4:	08 95       	ret

000002f6 <updateDutyCyclePWM2A>:
	
}

void updateDutyCyclePWM2A(uint8_t duty2A){
	// Se carga el valor de OCR2A con un factor de mapeado
	OCR2A = duty2A * 0.15;
 2f6:	68 2f       	mov	r22, r24
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 bd 01 	call	0x37a	; 0x37a <__floatsisf>
 302:	2a e9       	ldi	r18, 0x9A	; 154
 304:	39 e9       	ldi	r19, 0x99	; 153
 306:	49 e1       	ldi	r20, 0x19	; 25
 308:	5e e3       	ldi	r21, 0x3E	; 62
 30a:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
 30e:	0e 94 8c 01 	call	0x318	; 0x318 <__fixunssfsi>
 312:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 316:	08 95       	ret

00000318 <__fixunssfsi>:
 318:	0e 94 00 02 	call	0x400	; 0x400 <__fp_splitA>
 31c:	88 f0       	brcs	.+34     	; 0x340 <__fixunssfsi+0x28>
 31e:	9f 57       	subi	r25, 0x7F	; 127
 320:	98 f0       	brcs	.+38     	; 0x348 <__fixunssfsi+0x30>
 322:	b9 2f       	mov	r27, r25
 324:	99 27       	eor	r25, r25
 326:	b7 51       	subi	r27, 0x17	; 23
 328:	b0 f0       	brcs	.+44     	; 0x356 <__fixunssfsi+0x3e>
 32a:	e1 f0       	breq	.+56     	; 0x364 <__fixunssfsi+0x4c>
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	88 1f       	adc	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	1a f0       	brmi	.+6      	; 0x33c <__fixunssfsi+0x24>
 336:	ba 95       	dec	r27
 338:	c9 f7       	brne	.-14     	; 0x32c <__fixunssfsi+0x14>
 33a:	14 c0       	rjmp	.+40     	; 0x364 <__fixunssfsi+0x4c>
 33c:	b1 30       	cpi	r27, 0x01	; 1
 33e:	91 f0       	breq	.+36     	; 0x364 <__fixunssfsi+0x4c>
 340:	0e 94 1a 02 	call	0x434	; 0x434 <__fp_zero>
 344:	b1 e0       	ldi	r27, 0x01	; 1
 346:	08 95       	ret
 348:	0c 94 1a 02 	jmp	0x434	; 0x434 <__fp_zero>
 34c:	67 2f       	mov	r22, r23
 34e:	78 2f       	mov	r23, r24
 350:	88 27       	eor	r24, r24
 352:	b8 5f       	subi	r27, 0xF8	; 248
 354:	39 f0       	breq	.+14     	; 0x364 <__fixunssfsi+0x4c>
 356:	b9 3f       	cpi	r27, 0xF9	; 249
 358:	cc f3       	brlt	.-14     	; 0x34c <__fixunssfsi+0x34>
 35a:	86 95       	lsr	r24
 35c:	77 95       	ror	r23
 35e:	67 95       	ror	r22
 360:	b3 95       	inc	r27
 362:	d9 f7       	brne	.-10     	; 0x35a <__fixunssfsi+0x42>
 364:	3e f4       	brtc	.+14     	; 0x374 <__fixunssfsi+0x5c>
 366:	90 95       	com	r25
 368:	80 95       	com	r24
 36a:	70 95       	com	r23
 36c:	61 95       	neg	r22
 36e:	7f 4f       	sbci	r23, 0xFF	; 255
 370:	8f 4f       	sbci	r24, 0xFF	; 255
 372:	9f 4f       	sbci	r25, 0xFF	; 255
 374:	08 95       	ret

00000376 <__floatunsisf>:
 376:	e8 94       	clt
 378:	09 c0       	rjmp	.+18     	; 0x38c <__floatsisf+0x12>

0000037a <__floatsisf>:
 37a:	97 fb       	bst	r25, 7
 37c:	3e f4       	brtc	.+14     	; 0x38c <__floatsisf+0x12>
 37e:	90 95       	com	r25
 380:	80 95       	com	r24
 382:	70 95       	com	r23
 384:	61 95       	neg	r22
 386:	7f 4f       	sbci	r23, 0xFF	; 255
 388:	8f 4f       	sbci	r24, 0xFF	; 255
 38a:	9f 4f       	sbci	r25, 0xFF	; 255
 38c:	99 23       	and	r25, r25
 38e:	a9 f0       	breq	.+42     	; 0x3ba <__floatsisf+0x40>
 390:	f9 2f       	mov	r31, r25
 392:	96 e9       	ldi	r25, 0x96	; 150
 394:	bb 27       	eor	r27, r27
 396:	93 95       	inc	r25
 398:	f6 95       	lsr	r31
 39a:	87 95       	ror	r24
 39c:	77 95       	ror	r23
 39e:	67 95       	ror	r22
 3a0:	b7 95       	ror	r27
 3a2:	f1 11       	cpse	r31, r1
 3a4:	f8 cf       	rjmp	.-16     	; 0x396 <__floatsisf+0x1c>
 3a6:	fa f4       	brpl	.+62     	; 0x3e6 <__floatsisf+0x6c>
 3a8:	bb 0f       	add	r27, r27
 3aa:	11 f4       	brne	.+4      	; 0x3b0 <__floatsisf+0x36>
 3ac:	60 ff       	sbrs	r22, 0
 3ae:	1b c0       	rjmp	.+54     	; 0x3e6 <__floatsisf+0x6c>
 3b0:	6f 5f       	subi	r22, 0xFF	; 255
 3b2:	7f 4f       	sbci	r23, 0xFF	; 255
 3b4:	8f 4f       	sbci	r24, 0xFF	; 255
 3b6:	9f 4f       	sbci	r25, 0xFF	; 255
 3b8:	16 c0       	rjmp	.+44     	; 0x3e6 <__floatsisf+0x6c>
 3ba:	88 23       	and	r24, r24
 3bc:	11 f0       	breq	.+4      	; 0x3c2 <__floatsisf+0x48>
 3be:	96 e9       	ldi	r25, 0x96	; 150
 3c0:	11 c0       	rjmp	.+34     	; 0x3e4 <__floatsisf+0x6a>
 3c2:	77 23       	and	r23, r23
 3c4:	21 f0       	breq	.+8      	; 0x3ce <__floatsisf+0x54>
 3c6:	9e e8       	ldi	r25, 0x8E	; 142
 3c8:	87 2f       	mov	r24, r23
 3ca:	76 2f       	mov	r23, r22
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <__floatsisf+0x5e>
 3ce:	66 23       	and	r22, r22
 3d0:	71 f0       	breq	.+28     	; 0x3ee <__floatsisf+0x74>
 3d2:	96 e8       	ldi	r25, 0x86	; 134
 3d4:	86 2f       	mov	r24, r22
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	2a f0       	brmi	.+10     	; 0x3e6 <__floatsisf+0x6c>
 3dc:	9a 95       	dec	r25
 3de:	66 0f       	add	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	88 1f       	adc	r24, r24
 3e4:	da f7       	brpl	.-10     	; 0x3dc <__floatsisf+0x62>
 3e6:	88 0f       	add	r24, r24
 3e8:	96 95       	lsr	r25
 3ea:	87 95       	ror	r24
 3ec:	97 f9       	bld	r25, 7
 3ee:	08 95       	ret

000003f0 <__fp_split3>:
 3f0:	57 fd       	sbrc	r21, 7
 3f2:	90 58       	subi	r25, 0x80	; 128
 3f4:	44 0f       	add	r20, r20
 3f6:	55 1f       	adc	r21, r21
 3f8:	59 f0       	breq	.+22     	; 0x410 <__fp_splitA+0x10>
 3fa:	5f 3f       	cpi	r21, 0xFF	; 255
 3fc:	71 f0       	breq	.+28     	; 0x41a <__fp_splitA+0x1a>
 3fe:	47 95       	ror	r20

00000400 <__fp_splitA>:
 400:	88 0f       	add	r24, r24
 402:	97 fb       	bst	r25, 7
 404:	99 1f       	adc	r25, r25
 406:	61 f0       	breq	.+24     	; 0x420 <__fp_splitA+0x20>
 408:	9f 3f       	cpi	r25, 0xFF	; 255
 40a:	79 f0       	breq	.+30     	; 0x42a <__fp_splitA+0x2a>
 40c:	87 95       	ror	r24
 40e:	08 95       	ret
 410:	12 16       	cp	r1, r18
 412:	13 06       	cpc	r1, r19
 414:	14 06       	cpc	r1, r20
 416:	55 1f       	adc	r21, r21
 418:	f2 cf       	rjmp	.-28     	; 0x3fe <__fp_split3+0xe>
 41a:	46 95       	lsr	r20
 41c:	f1 df       	rcall	.-30     	; 0x400 <__fp_splitA>
 41e:	08 c0       	rjmp	.+16     	; 0x430 <__fp_splitA+0x30>
 420:	16 16       	cp	r1, r22
 422:	17 06       	cpc	r1, r23
 424:	18 06       	cpc	r1, r24
 426:	99 1f       	adc	r25, r25
 428:	f1 cf       	rjmp	.-30     	; 0x40c <__fp_splitA+0xc>
 42a:	86 95       	lsr	r24
 42c:	71 05       	cpc	r23, r1
 42e:	61 05       	cpc	r22, r1
 430:	08 94       	sec
 432:	08 95       	ret

00000434 <__fp_zero>:
 434:	e8 94       	clt

00000436 <__fp_szero>:
 436:	bb 27       	eor	r27, r27
 438:	66 27       	eor	r22, r22
 43a:	77 27       	eor	r23, r23
 43c:	cb 01       	movw	r24, r22
 43e:	97 f9       	bld	r25, 7
 440:	08 95       	ret

00000442 <__mulsf3>:
 442:	0e 94 34 02 	call	0x468	; 0x468 <__mulsf3x>
 446:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__fp_round>
 44a:	0e 94 97 02 	call	0x52e	; 0x52e <__fp_pscA>
 44e:	38 f0       	brcs	.+14     	; 0x45e <__mulsf3+0x1c>
 450:	0e 94 9e 02 	call	0x53c	; 0x53c <__fp_pscB>
 454:	20 f0       	brcs	.+8      	; 0x45e <__mulsf3+0x1c>
 456:	95 23       	and	r25, r21
 458:	11 f0       	breq	.+4      	; 0x45e <__mulsf3+0x1c>
 45a:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__fp_inf>
 45e:	0c 94 94 02 	jmp	0x528	; 0x528 <__fp_nan>
 462:	11 24       	eor	r1, r1
 464:	0c 94 1b 02 	jmp	0x436	; 0x436 <__fp_szero>

00000468 <__mulsf3x>:
 468:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__fp_split3>
 46c:	70 f3       	brcs	.-36     	; 0x44a <__mulsf3+0x8>

0000046e <__mulsf3_pse>:
 46e:	95 9f       	mul	r25, r21
 470:	c1 f3       	breq	.-16     	; 0x462 <__mulsf3+0x20>
 472:	95 0f       	add	r25, r21
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	55 1f       	adc	r21, r21
 478:	62 9f       	mul	r22, r18
 47a:	f0 01       	movw	r30, r0
 47c:	72 9f       	mul	r23, r18
 47e:	bb 27       	eor	r27, r27
 480:	f0 0d       	add	r31, r0
 482:	b1 1d       	adc	r27, r1
 484:	63 9f       	mul	r22, r19
 486:	aa 27       	eor	r26, r26
 488:	f0 0d       	add	r31, r0
 48a:	b1 1d       	adc	r27, r1
 48c:	aa 1f       	adc	r26, r26
 48e:	64 9f       	mul	r22, r20
 490:	66 27       	eor	r22, r22
 492:	b0 0d       	add	r27, r0
 494:	a1 1d       	adc	r26, r1
 496:	66 1f       	adc	r22, r22
 498:	82 9f       	mul	r24, r18
 49a:	22 27       	eor	r18, r18
 49c:	b0 0d       	add	r27, r0
 49e:	a1 1d       	adc	r26, r1
 4a0:	62 1f       	adc	r22, r18
 4a2:	73 9f       	mul	r23, r19
 4a4:	b0 0d       	add	r27, r0
 4a6:	a1 1d       	adc	r26, r1
 4a8:	62 1f       	adc	r22, r18
 4aa:	83 9f       	mul	r24, r19
 4ac:	a0 0d       	add	r26, r0
 4ae:	61 1d       	adc	r22, r1
 4b0:	22 1f       	adc	r18, r18
 4b2:	74 9f       	mul	r23, r20
 4b4:	33 27       	eor	r19, r19
 4b6:	a0 0d       	add	r26, r0
 4b8:	61 1d       	adc	r22, r1
 4ba:	23 1f       	adc	r18, r19
 4bc:	84 9f       	mul	r24, r20
 4be:	60 0d       	add	r22, r0
 4c0:	21 1d       	adc	r18, r1
 4c2:	82 2f       	mov	r24, r18
 4c4:	76 2f       	mov	r23, r22
 4c6:	6a 2f       	mov	r22, r26
 4c8:	11 24       	eor	r1, r1
 4ca:	9f 57       	subi	r25, 0x7F	; 127
 4cc:	50 40       	sbci	r21, 0x00	; 0
 4ce:	9a f0       	brmi	.+38     	; 0x4f6 <__mulsf3_pse+0x88>
 4d0:	f1 f0       	breq	.+60     	; 0x50e <__mulsf3_pse+0xa0>
 4d2:	88 23       	and	r24, r24
 4d4:	4a f0       	brmi	.+18     	; 0x4e8 <__mulsf3_pse+0x7a>
 4d6:	ee 0f       	add	r30, r30
 4d8:	ff 1f       	adc	r31, r31
 4da:	bb 1f       	adc	r27, r27
 4dc:	66 1f       	adc	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	91 50       	subi	r25, 0x01	; 1
 4e4:	50 40       	sbci	r21, 0x00	; 0
 4e6:	a9 f7       	brne	.-22     	; 0x4d2 <__mulsf3_pse+0x64>
 4e8:	9e 3f       	cpi	r25, 0xFE	; 254
 4ea:	51 05       	cpc	r21, r1
 4ec:	80 f0       	brcs	.+32     	; 0x50e <__mulsf3_pse+0xa0>
 4ee:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__fp_inf>
 4f2:	0c 94 1b 02 	jmp	0x436	; 0x436 <__fp_szero>
 4f6:	5f 3f       	cpi	r21, 0xFF	; 255
 4f8:	e4 f3       	brlt	.-8      	; 0x4f2 <__mulsf3_pse+0x84>
 4fa:	98 3e       	cpi	r25, 0xE8	; 232
 4fc:	d4 f3       	brlt	.-12     	; 0x4f2 <__mulsf3_pse+0x84>
 4fe:	86 95       	lsr	r24
 500:	77 95       	ror	r23
 502:	67 95       	ror	r22
 504:	b7 95       	ror	r27
 506:	f7 95       	ror	r31
 508:	e7 95       	ror	r30
 50a:	9f 5f       	subi	r25, 0xFF	; 255
 50c:	c1 f7       	brne	.-16     	; 0x4fe <__mulsf3_pse+0x90>
 50e:	fe 2b       	or	r31, r30
 510:	88 0f       	add	r24, r24
 512:	91 1d       	adc	r25, r1
 514:	96 95       	lsr	r25
 516:	87 95       	ror	r24
 518:	97 f9       	bld	r25, 7
 51a:	08 95       	ret

0000051c <__fp_inf>:
 51c:	97 f9       	bld	r25, 7
 51e:	9f 67       	ori	r25, 0x7F	; 127
 520:	80 e8       	ldi	r24, 0x80	; 128
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	08 95       	ret

00000528 <__fp_nan>:
 528:	9f ef       	ldi	r25, 0xFF	; 255
 52a:	80 ec       	ldi	r24, 0xC0	; 192
 52c:	08 95       	ret

0000052e <__fp_pscA>:
 52e:	00 24       	eor	r0, r0
 530:	0a 94       	dec	r0
 532:	16 16       	cp	r1, r22
 534:	17 06       	cpc	r1, r23
 536:	18 06       	cpc	r1, r24
 538:	09 06       	cpc	r0, r25
 53a:	08 95       	ret

0000053c <__fp_pscB>:
 53c:	00 24       	eor	r0, r0
 53e:	0a 94       	dec	r0
 540:	12 16       	cp	r1, r18
 542:	13 06       	cpc	r1, r19
 544:	14 06       	cpc	r1, r20
 546:	05 06       	cpc	r0, r21
 548:	08 95       	ret

0000054a <__fp_round>:
 54a:	09 2e       	mov	r0, r25
 54c:	03 94       	inc	r0
 54e:	00 0c       	add	r0, r0
 550:	11 f4       	brne	.+4      	; 0x556 <__fp_round+0xc>
 552:	88 23       	and	r24, r24
 554:	52 f0       	brmi	.+20     	; 0x56a <__fp_round+0x20>
 556:	bb 0f       	add	r27, r27
 558:	40 f4       	brcc	.+16     	; 0x56a <__fp_round+0x20>
 55a:	bf 2b       	or	r27, r31
 55c:	11 f4       	brne	.+4      	; 0x562 <__fp_round+0x18>
 55e:	60 ff       	sbrs	r22, 0
 560:	04 c0       	rjmp	.+8      	; 0x56a <__fp_round+0x20>
 562:	6f 5f       	subi	r22, 0xFF	; 255
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	8f 4f       	sbci	r24, 0xFF	; 255
 568:	9f 4f       	sbci	r25, 0xFF	; 255
 56a:	08 95       	ret

0000056c <_exit>:
 56c:	f8 94       	cli

0000056e <__stop_program>:
 56e:	ff cf       	rjmp	.-2      	; 0x56e <__stop_program>
