
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000087e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  000008f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000924  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000968  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001155  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f6  00000000  00000000  00001c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c76  00000000  00000000  00002643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  000032bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058f  00000000  00000000  000035ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000690  00000000  00000000  00003b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000041cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 8c 01 	jmp	0x318	; 0x318 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  88:	0c 94 3d 04 	jmp	0x87a	; 0x87a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
 */ 
#include <avr/io.h>
#include <stdint.h>

void initADC(uint8_t puertoADC){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	// Se selecciona un canal
	ADMUX = puertoADC;
  96:	80 83       	st	Z, r24
	
	// Se selecciona el voltaje VREF 5V
	ADMUX |= (1<<REFS0);
  98:	80 81       	ld	r24, Z
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  9e:	80 81       	ld	r24, Z
  a0:	8f 77       	andi	r24, 0x7F	; 127
  a2:	80 83       	st	Z, r24
	// Se justifica hacia la izquierda la salida del adc
	ADMUX |= (1 << ADLAR);
  a4:	80 81       	ld	r24, Z
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	80 83       	st	Z, r24
	// Habilitar prescaler de 16M/128 fadc = 125khz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	87 60       	ori	r24, 0x07	; 7
  b2:	80 83       	st	Z, r24
	// Activar la interrupcion del ADC
	ADCSRA |= (1<<ADIE);
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
	// Se activa el ADC
	ADCSRA |= (1<< ADEN);
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <setup>:
    }
}

void setup(void)
{
	estado = 0;
  c2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <estado>
	position = 0;
  c6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <position>
	DDRD |= (1<<DDD2)|(1<<DDD3)|(1<<DDD4);
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	8c 61       	ori	r24, 0x1C	; 28
  ce:	8a b9       	out	0x0a, r24	; 10
	//ESTABLECER PUERTO C1, C2 Y C3 COMO ENTRADA
	DDRC &= ~((1<<PORTC1)|(1<<PORTC2)|(1<<PORTC3));
  d0:	87 b1       	in	r24, 0x07	; 7
  d2:	81 7f       	andi	r24, 0xF1	; 241
  d4:	87 b9       	out	0x07, r24	; 7
	//Habilitar la interrupción puerto C
	PCICR |= (1<<PCIE1);
  d6:	e8 e6       	ldi	r30, 0x68	; 104
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	80 83       	st	Z, r24
	// Habilitar mascara para pines PC1 PC2, PC3
	PCMSK1 = 0b00001110;
  e0:	8e e0       	ldi	r24, 0x0E	; 14
  e2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
  e6:	08 95       	ret

000000e8 <main>:
uint8_t memoria4;


int main(void)
{
	initUART9600();
  e8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <initUART9600>
	cli();
  ec:	f8 94       	cli
	setup();
  ee:	0e 94 61 00 	call	0xc2	; 0xc2 <setup>
	initPWM0FastA(no_invertido, 1024);
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	74 e0       	ldi	r23, 0x04	; 4
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 2c 02 	call	0x458	; 0x458 <initPWM0FastA>
	initPWM0FastB(no_invertido, 1024);
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	74 e0       	ldi	r23, 0x04	; 4
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 42 02 	call	0x484	; 0x484 <initPWM0FastB>
	initPWM2FastA(no_invertido, 1024);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	74 e0       	ldi	r23, 0x04	; 4
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 b3 02 	call	0x566	; 0x566 <initPWM2FastA>
	initPWM1FastA(no_invertido, 1024);
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	74 e0       	ldi	r23, 0x04	; 4
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 78 02 	call	0x4f0	; 0x4f0 <initPWM1FastA>
	sei();
 11a:	78 94       	sei
    while (1) 
    {
		// Modo MANUAL
		if (estado == 0){
 11c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <estado>
 120:	81 11       	cpse	r24, r1
 122:	65 c0       	rjmp	.+202    	; 0x1ee <main+0x106>
			PORTB &= ~(1<<PORTB5);
 124:	85 b1       	in	r24, 0x05	; 5
 126:	8f 7d       	andi	r24, 0xDF	; 223
 128:	85 b9       	out	0x05, r24	; 5
 			//inicializar ADC7
 			initADC(7);
 12a:	87 e0       	ldi	r24, 0x07	; 7
 12c:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
 			ADCSRA |= (1<< ADSC);				// Comenzar conversion
 130:	ea e7       	ldi	r30, 0x7A	; 122
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 64       	ori	r24, 0x40	; 64
 138:	80 83       	st	Z, r24
 			while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 13a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 13e:	86 fd       	sbrc	r24, 6
 140:	fc cf       	rjmp	.-8      	; 0x13a <main+0x52>
 			updateDutyCyclePWM2A(ADCH);			// Se llama la función de la librería
 142:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 146:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <updateDutyCyclePWM2A>

 			//inicializar ADC6
 			initADC(6);
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
 			ADCSRA |= (1<< ADSC);				// Comenzar conversion
 150:	ea e7       	ldi	r30, 0x7A	; 122
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 64       	ori	r24, 0x40	; 64
 158:	80 83       	st	Z, r24
 			while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 15a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 15e:	86 fd       	sbrc	r24, 6
 160:	fc cf       	rjmp	.-8      	; 0x15a <main+0x72>
 			updateDutyCyclePWM1A(ADCH);			// Se llama la función de la librería
 162:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 9a 02 	call	0x534	; 0x534 <updateDutyCyclePWM1A>
		
 			//inicializar ADC5
 			initADC(5);
 16c:	85 e0       	ldi	r24, 0x05	; 5
 16e:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
 			ADCSRA |= (1<< ADSC);				// Comenzar conversion
 172:	ea e7       	ldi	r30, 0x7A	; 122
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	80 83       	st	Z, r24
 			while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 17c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 180:	86 fd       	sbrc	r24, 6
 182:	fc cf       	rjmp	.-8      	; 0x17c <main+0x94>
 			updateDutyCyclePWM0A(ADCH);			// Se llama la función de la librería
 184:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 188:	0e 94 58 02 	call	0x4b0	; 0x4b0 <updateDutyCyclePWM0A>
 		
 			//inicializar ADC4
 			initADC(4);
 18c:	84 e0       	ldi	r24, 0x04	; 4
 18e:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
 			ADCSRA |= (1<< ADSC);				// Comenzar conversion
 192:	ea e7       	ldi	r30, 0x7A	; 122
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	80 64       	ori	r24, 0x40	; 64
 19a:	80 83       	st	Z, r24
 			while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 19c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1a0:	86 fd       	sbrc	r24, 6
 1a2:	fc cf       	rjmp	.-8      	; 0x19c <main+0xb4>
 			updateDutyCyclePWM0B(ADCH);			// Se llama la función de la librería
 1a4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1a8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <updateDutyCyclePWM0B>
			 
			 if (position == 0){
 1ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <position>
 1b0:	81 11       	cpse	r24, r1
 1b2:	04 c0       	rjmp	.+8      	; 0x1bc <main+0xd4>
			 PORTD &= ~((1<<PORTD4)|(1<<PORTD3));}
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	87 7e       	andi	r24, 0xE7	; 231
 1b8:	8b b9       	out	0x0b, r24	; 11
 1ba:	b0 cf       	rjmp	.-160    	; 0x11c <main+0x34>
			 else if(position==1){
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	39 f4       	brne	.+14     	; 0x1ce <main+0xe6>
				 PORTD &= ~(1<<PORTD3);
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	87 7f       	andi	r24, 0xF7	; 247
 1c4:	8b b9       	out	0x0b, r24	; 11
			 PORTD |= (1<<PORTD4);}
 1c6:	8b b1       	in	r24, 0x0b	; 11
 1c8:	80 61       	ori	r24, 0x10	; 16
 1ca:	8b b9       	out	0x0b, r24	; 11
 1cc:	a7 cf       	rjmp	.-178    	; 0x11c <main+0x34>
			 else if(position==2){
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	39 f4       	brne	.+14     	; 0x1e0 <main+0xf8>
				 PORTD &= ~(1<<PORTD4);
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	8f 7e       	andi	r24, 0xEF	; 239
 1d6:	8b b9       	out	0x0b, r24	; 11
			 PORTD |= (1<<PORTD3);}
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	88 60       	ori	r24, 0x08	; 8
 1dc:	8b b9       	out	0x0b, r24	; 11
 1de:	9e cf       	rjmp	.-196    	; 0x11c <main+0x34>
			 else if(position==3){
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	09 f0       	breq	.+2      	; 0x1e6 <main+0xfe>
 1e4:	9b cf       	rjmp	.-202    	; 0x11c <main+0x34>
				 PORTD |= (1<<PORTD3)|(1<<PORTD4);
 1e6:	8b b1       	in	r24, 0x0b	; 11
 1e8:	88 61       	ori	r24, 0x18	; 24
 1ea:	8b b9       	out	0x0b, r24	; 11
 1ec:	97 cf       	rjmp	.-210    	; 0x11c <main+0x34>
			 }
		}
		
		// Modo MEMORIA
		else if ( estado == 1)
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <main+0x10c>
 1f2:	94 cf       	rjmp	.-216    	; 0x11c <main+0x34>
		{
			
			PORTB |= (1<<PORTB5);
 1f4:	85 b1       	in	r24, 0x05	; 5
 1f6:	80 62       	ori	r24, 0x20	; 32
 1f8:	85 b9       	out	0x05, r24	; 5
			
			memoria1 = eeprom_read_byte((uint8_t*)(0+(4*position))) ;
 1fa:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <position>
 1fe:	d0 e0       	ldi	r29, 0x00	; 0
 200:	cc 0f       	add	r28, r28
 202:	dd 1f       	adc	r29, r29
 204:	cc 0f       	add	r28, r28
 206:	dd 1f       	adc	r29, r29
 208:	ce 01       	movw	r24, r28
 20a:	0e 94 27 04 	call	0x84e	; 0x84e <eeprom_read_byte>
 20e:	18 2f       	mov	r17, r24
 210:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			memoria2 = eeprom_read_byte((uint8_t*)(1+(4*position))) ;
 214:	ce 01       	movw	r24, r28
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	0e 94 27 04 	call	0x84e	; 0x84e <eeprom_read_byte>
 21c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <memoria2>
			memoria3 = eeprom_read_byte((uint8_t*)(2+(4*position))) ;
 220:	ce 01       	movw	r24, r28
 222:	02 96       	adiw	r24, 0x02	; 2
 224:	0e 94 27 04 	call	0x84e	; 0x84e <eeprom_read_byte>
 228:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <memoria3>
			memoria4 = eeprom_read_byte((uint8_t*)(3+(4*position))) ;
 22c:	ce 01       	movw	r24, r28
 22e:	03 96       	adiw	r24, 0x03	; 3
 230:	0e 94 27 04 	call	0x84e	; 0x84e <eeprom_read_byte>
 234:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <memoria4>
			updateDutyCyclePWM2A(memoria1);			// Actualizar el DutyCycle
 238:	81 2f       	mov	r24, r17
 23a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <updateDutyCyclePWM2A>
			updateDutyCyclePWM1A(memoria2);			// Actualizar el DutyCycle
 23e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <memoria2>
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 9a 02 	call	0x534	; 0x534 <updateDutyCyclePWM1A>
			updateDutyCyclePWM0A(memoria3);			// Actualizar el DutyCycle
 248:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <memoria3>
 24c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <updateDutyCyclePWM0A>
			updateDutyCyclePWM0B(memoria4);			// Actualizar el DutyCycle
 250:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <memoria4>
 254:	0e 94 68 02 	call	0x4d0	; 0x4d0 <updateDutyCyclePWM0B>
			if (position == 0){
 258:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <position>
 25c:	81 11       	cpse	r24, r1
 25e:	04 c0       	rjmp	.+8      	; 0x268 <main+0x180>
				PORTD &= ~((1<<PORTD4)|(1<<PORTD3));}
 260:	8b b1       	in	r24, 0x0b	; 11
 262:	87 7e       	andi	r24, 0xE7	; 231
 264:	8b b9       	out	0x0b, r24	; 11
 266:	5a cf       	rjmp	.-332    	; 0x11c <main+0x34>
			else if(position==1){
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	39 f4       	brne	.+14     	; 0x27a <main+0x192>
				PORTD &= ~(1<<PORTD3);
 26c:	8b b1       	in	r24, 0x0b	; 11
 26e:	87 7f       	andi	r24, 0xF7	; 247
 270:	8b b9       	out	0x0b, r24	; 11
				PORTD |= (1<<PORTD4);}
 272:	8b b1       	in	r24, 0x0b	; 11
 274:	80 61       	ori	r24, 0x10	; 16
 276:	8b b9       	out	0x0b, r24	; 11
 278:	51 cf       	rjmp	.-350    	; 0x11c <main+0x34>
			else if(position==2){
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	39 f4       	brne	.+14     	; 0x28c <main+0x1a4>
				PORTD &= ~(1<<PORTD4);
 27e:	8b b1       	in	r24, 0x0b	; 11
 280:	8f 7e       	andi	r24, 0xEF	; 239
 282:	8b b9       	out	0x0b, r24	; 11
				PORTD |= (1<<PORTD3);}
 284:	8b b1       	in	r24, 0x0b	; 11
 286:	88 60       	ori	r24, 0x08	; 8
 288:	8b b9       	out	0x0b, r24	; 11
 28a:	48 cf       	rjmp	.-368    	; 0x11c <main+0x34>
			else if(position==3){
 28c:	83 30       	cpi	r24, 0x03	; 3
 28e:	09 f0       	breq	.+2      	; 0x292 <main+0x1aa>
 290:	45 cf       	rjmp	.-374    	; 0x11c <main+0x34>
				PORTD |= (1<<PORTD3)|(1<<PORTD4);
 292:	8b b1       	in	r24, 0x0b	; 11
 294:	88 61       	ori	r24, 0x18	; 24
 296:	8b b9       	out	0x0b, r24	; 11
 298:	41 cf       	rjmp	.-382    	; 0x11c <main+0x34>

0000029a <__vector_21>:
	
}

// Vector de interrupcion ADC -------------------------------------------------
ISR(ADC_vect)
{
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	8f 93       	push	r24
 2a6:	ef 93       	push	r30
 2a8:	ff 93       	push	r31
	// Se escribe con un 1 lógico la bandera para apagarla
	ADCSRA |= (1<<ADIF);
 2aa:	ea e7       	ldi	r30, 0x7A	; 122
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	80 61       	ori	r24, 0x10	; 16
 2b2:	80 83       	st	Z, r24
}
 2b4:	ff 91       	pop	r31
 2b6:	ef 91       	pop	r30
 2b8:	8f 91       	pop	r24
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <__vector_18>:


ISR(USART_RX_vect)
{
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	2f 93       	push	r18
 2d0:	3f 93       	push	r19
 2d2:	4f 93       	push	r20
 2d4:	5f 93       	push	r21
 2d6:	6f 93       	push	r22
 2d8:	7f 93       	push	r23
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	af 93       	push	r26
 2e0:	bf 93       	push	r27
 2e2:	ef 93       	push	r30
 2e4:	ff 93       	push	r31
	//Se almacena en la variable lo que se recibe de UDR0
	bufferRX = UDR0;
 2e6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2ea:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bufferRX>
	updateDutyCyclePWM2A(bufferRX);
 2ee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bufferRX>
 2f2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <updateDutyCyclePWM2A>
	}
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	bf 91       	pop	r27
 2fc:	af 91       	pop	r26
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	7f 91       	pop	r23
 304:	6f 91       	pop	r22
 306:	5f 91       	pop	r21
 308:	4f 91       	pop	r20
 30a:	3f 91       	pop	r19
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <__vector_4>:
	
ISR(PCINT1_vect)
{
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	2f 93       	push	r18
 324:	3f 93       	push	r19
 326:	4f 93       	push	r20
 328:	5f 93       	push	r21
 32a:	6f 93       	push	r22
 32c:	7f 93       	push	r23
 32e:	8f 93       	push	r24
 330:	9f 93       	push	r25
 332:	af 93       	push	r26
 334:	bf 93       	push	r27
 336:	ef 93       	push	r30
 338:	ff 93       	push	r31
	if(!(PINC&(1<<PINC3))) // Si PINC3 se encuentra apagado ejecutar instrucción
 33a:	33 99       	sbic	0x06, 3	; 6
 33c:	0b c0       	rjmp	.+22     	; 0x354 <__vector_4+0x3c>
	{
		if(estado <= 2){estado ++;}
 33e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <estado>
 342:	83 30       	cpi	r24, 0x03	; 3
 344:	20 f4       	brcc	.+8      	; 0x34e <__vector_4+0x36>
 346:	8f 5f       	subi	r24, 0xFF	; 255
 348:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <estado>
 34c:	71 c0       	rjmp	.+226    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			else{estado=0; }
 34e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <estado>
 352:	6e c0       	rjmp	.+220    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	}
	else if(!(PINC&(1<<PINC2))) // Si PINC2 se encuentra apagado ejecutar instrucción
 354:	32 99       	sbic	0x06, 2	; 6
 356:	0b c0       	rjmp	.+22     	; 0x36e <__vector_4+0x56>
	{
		
		if (position <= 2){
 358:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <position>
 35c:	83 30       	cpi	r24, 0x03	; 3
 35e:	20 f4       	brcc	.+8      	; 0x368 <__vector_4+0x50>
			position ++;	
 360:	8f 5f       	subi	r24, 0xFF	; 255
 362:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <position>
 366:	64 c0       	rjmp	.+200    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
		}
		else{
			position = 0;
 368:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <position>
 36c:	61 c0       	rjmp	.+194    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
		}
	}
	else if(!(PINC&(1<<PINC1))) // Si PINC1 se encuentra apagado ejecutar instrucción
 36e:	31 99       	sbic	0x06, 1	; 6
 370:	5f c0       	rjmp	.+190    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	{
		//inicializar ADC7
		initADC(7);
 372:	87 e0       	ldi	r24, 0x07	; 7
 374:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
		ADCSRA |= (1<< ADSC);				// Comenzar conversion
 378:	ea e7       	ldi	r30, 0x7A	; 122
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	80 64       	ori	r24, 0x40	; 64
 380:	80 83       	st	Z, r24
		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 382:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 386:	86 fd       	sbrc	r24, 6
 388:	fc cf       	rjmp	.-8      	; 0x382 <__vector_4+0x6a>
		eeprom_write_byte((unsigned char*)(0+(position*4)), ADCH);
 38a:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 38e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <position>
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	0e 94 2f 04 	call	0x85e	; 0x85e <eeprom_write_byte>

		//inicializar ADC6
		initADC(6);
 3a0:	86 e0       	ldi	r24, 0x06	; 6
 3a2:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
		ADCSRA |= (1<< ADSC);				// Comenzar conversion
 3a6:	ea e7       	ldi	r30, 0x7A	; 122
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	80 64       	ori	r24, 0x40	; 64
 3ae:	80 83       	st	Z, r24
		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 3b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 3b4:	86 fd       	sbrc	r24, 6
 3b6:	fc cf       	rjmp	.-8      	; 0x3b0 <__vector_4+0x98>
		eeprom_write_byte((unsigned char*)(1+(position*4)), ADCH);
 3b8:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 3bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <position>
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	0e 94 2f 04 	call	0x85e	; 0x85e <eeprom_write_byte>
		
		//inicializar ADC5
		initADC(5);
 3d0:	85 e0       	ldi	r24, 0x05	; 5
 3d2:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
		ADCSRA |= (1<< ADSC);				// Comenzar conversion
 3d6:	ea e7       	ldi	r30, 0x7A	; 122
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	80 64       	ori	r24, 0x40	; 64
 3de:	80 83       	st	Z, r24
		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 3e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 3e4:	86 fd       	sbrc	r24, 6
 3e6:	fc cf       	rjmp	.-8      	; 0x3e0 <__vector_4+0xc8>
		eeprom_write_byte((unsigned char*)(2+(position*4)), ADCH);
 3e8:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 3ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <position>
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	02 96       	adiw	r24, 0x02	; 2
 3fc:	0e 94 2f 04 	call	0x85e	; 0x85e <eeprom_write_byte>
		
		//inicializar ADC4
		initADC(4);
 400:	84 e0       	ldi	r24, 0x04	; 4
 402:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
		ADCSRA |= (1<< ADSC);				// Comenzar conversion
 406:	ea e7       	ldi	r30, 0x7A	; 122
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	80 64       	ori	r24, 0x40	; 64
 40e:	80 83       	st	Z, r24
		while(ADCSRA&(1<<ADSC));			// Revisar si la conversion ya termino
 410:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 414:	86 fd       	sbrc	r24, 6
 416:	fc cf       	rjmp	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
		eeprom_write_byte((unsigned char*)(3+(position*4)), ADCH);
 418:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 41c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <position>
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	03 96       	adiw	r24, 0x03	; 3
 42c:	0e 94 2f 04 	call	0x85e	; 0x85e <eeprom_write_byte>
	}
	
	PCIFR |= (1<<PCIF1); // Apagar la bandera de interrupción
 430:	8b b3       	in	r24, 0x1b	; 27
 432:	82 60       	ori	r24, 0x02	; 2
 434:	8b bb       	out	0x1b, r24	; 27
 436:	ff 91       	pop	r31
 438:	ef 91       	pop	r30
 43a:	bf 91       	pop	r27
 43c:	af 91       	pop	r26
 43e:	9f 91       	pop	r25
 440:	8f 91       	pop	r24
 442:	7f 91       	pop	r23
 444:	6f 91       	pop	r22
 446:	5f 91       	pop	r21
 448:	4f 91       	pop	r20
 44a:	3f 91       	pop	r19
 44c:	2f 91       	pop	r18
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <initPWM0FastA>:
#define invertido 1
#define no_invertido 0

void initPWM0FastA(uint8_t inverted, uint16_t prescaler){
	//Configurando el pin PD6 como salida (OC0A)
	DDRD |= (1<<DDD6);
 458:	9a b1       	in	r25, 0x0a	; 10
 45a:	90 64       	ori	r25, 0x40	; 64
 45c:	9a b9       	out	0x0a, r25	; 10
	
	//TCCR0A = 0;
	//TCCR0B = 0;
	
	if (inverted){
 45e:	88 23       	and	r24, r24
 460:	21 f0       	breq	.+8      	; 0x46a <initPWM0FastA+0x12>
		//Configurando OC0A como invertido
		TCCR0A |= (1<<COM0A1)|(1<<COM0A0);
 462:	84 b5       	in	r24, 0x24	; 36
 464:	80 6c       	ori	r24, 0xC0	; 192
 466:	84 bd       	out	0x24, r24	; 36
 468:	03 c0       	rjmp	.+6      	; 0x470 <initPWM0FastA+0x18>
	}
	else {
		//Configurando OC0A como no invertido
		TCCR0A |= (1<<COM0A1);
 46a:	84 b5       	in	r24, 0x24	; 36
 46c:	80 68       	ori	r24, 0x80	; 128
 46e:	84 bd       	out	0x24, r24	; 36
	}
	// Configurando modo FAST PWM0 TOP 0XFF
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
 470:	84 b5       	in	r24, 0x24	; 36
 472:	83 60       	ori	r24, 0x03	; 3
 474:	84 bd       	out	0x24, r24	; 36
	// Configurando prescaler de 1024
	if (prescaler==1024){
 476:	61 15       	cp	r22, r1
 478:	74 40       	sbci	r23, 0x04	; 4
 47a:	19 f4       	brne	.+6      	; 0x482 <initPWM0FastA+0x2a>
		TCCR0B |= (1<<CS02)|(1<<CS00);
 47c:	85 b5       	in	r24, 0x25	; 37
 47e:	85 60       	ori	r24, 0x05	; 5
 480:	85 bd       	out	0x25, r24	; 37
 482:	08 95       	ret

00000484 <initPWM0FastB>:
	
}

void initPWM0FastB(uint8_t inverted, uint16_t prescaler){
	//Configurando el pin PD5 como salida (OC0B)
	DDRD |= (1<<DDD5);
 484:	9a b1       	in	r25, 0x0a	; 10
 486:	90 62       	ori	r25, 0x20	; 32
 488:	9a b9       	out	0x0a, r25	; 10
	
	// TCCR0B = 0;
	
	if (inverted){
 48a:	88 23       	and	r24, r24
 48c:	21 f0       	breq	.+8      	; 0x496 <initPWM0FastB+0x12>
		//Configurando OC0A como invertido
		TCCR0A |= (1<<COM0B1)|(1<<COM0B0);
 48e:	84 b5       	in	r24, 0x24	; 36
 490:	80 63       	ori	r24, 0x30	; 48
 492:	84 bd       	out	0x24, r24	; 36
 494:	03 c0       	rjmp	.+6      	; 0x49c <initPWM0FastB+0x18>
	}
	else {
		//Configurando OC0A como no invertido
		TCCR0A |= (1<<COM0B1);
 496:	84 b5       	in	r24, 0x24	; 36
 498:	80 62       	ori	r24, 0x20	; 32
 49a:	84 bd       	out	0x24, r24	; 36
	}
	// Configurando modo FAST PWM0 TOP 0XFF
	TCCR0A |= (1<<WGM01)|(1<<WGM00);
 49c:	84 b5       	in	r24, 0x24	; 36
 49e:	83 60       	ori	r24, 0x03	; 3
 4a0:	84 bd       	out	0x24, r24	; 36
	// Configurando prescaler de 1024
	if (prescaler==1024){
 4a2:	61 15       	cp	r22, r1
 4a4:	74 40       	sbci	r23, 0x04	; 4
 4a6:	19 f4       	brne	.+6      	; 0x4ae <initPWM0FastB+0x2a>
		TCCR0B |= (1<<CS02)|(1<<CS00);
 4a8:	85 b5       	in	r24, 0x25	; 37
 4aa:	85 60       	ori	r24, 0x05	; 5
 4ac:	85 bd       	out	0x25, r24	; 37
 4ae:	08 95       	ret

000004b0 <updateDutyCyclePWM0A>:
	}
}

void updateDutyCyclePWM0A(uint8_t duty){
	OCR0A = duty * 0.15;
 4b0:	68 2f       	mov	r22, r24
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 2e 03 	call	0x65c	; 0x65c <__floatsisf>
 4bc:	2a e9       	ldi	r18, 0x9A	; 154
 4be:	39 e9       	ldi	r19, 0x99	; 153
 4c0:	49 e1       	ldi	r20, 0x19	; 25
 4c2:	5e e3       	ldi	r21, 0x3E	; 62
 4c4:	0e 94 92 03 	call	0x724	; 0x724 <__mulsf3>
 4c8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__fixunssfsi>
 4cc:	67 bd       	out	0x27, r22	; 39
 4ce:	08 95       	ret

000004d0 <updateDutyCyclePWM0B>:
}

void updateDutyCyclePWM0B(uint8_t duty){
	OCR0B = duty * 0.15;
 4d0:	68 2f       	mov	r22, r24
 4d2:	70 e0       	ldi	r23, 0x00	; 0
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 2e 03 	call	0x65c	; 0x65c <__floatsisf>
 4dc:	2a e9       	ldi	r18, 0x9A	; 154
 4de:	39 e9       	ldi	r19, 0x99	; 153
 4e0:	49 e1       	ldi	r20, 0x19	; 25
 4e2:	5e e3       	ldi	r21, 0x3E	; 62
 4e4:	0e 94 92 03 	call	0x724	; 0x724 <__mulsf3>
 4e8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__fixunssfsi>
 4ec:	68 bd       	out	0x28, r22	; 40
 4ee:	08 95       	ret

000004f0 <initPWM1FastA>:
	// Configurando modo FAST PWM1 8-bit TOP 0X00FF
	TCCR1A |= (1<<WGM11)|(1<<WGM10);
	
	// Configurando prescaler de 1024
	if (prescaler==1024){
		TCCR1B |= (1<<CS12)|(1<<CS10);
 4f0:	94 b1       	in	r25, 0x04	; 4
 4f2:	92 60       	ori	r25, 0x02	; 2
 4f4:	94 b9       	out	0x04, r25	; 4
 4f6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 4fa:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 4fe:	88 23       	and	r24, r24
 500:	31 f0       	breq	.+12     	; 0x50e <initPWM1FastA+0x1e>
 502:	e0 e8       	ldi	r30, 0x80	; 128
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	80 6c       	ori	r24, 0xC0	; 192
 50a:	80 83       	st	Z, r24
 50c:	05 c0       	rjmp	.+10     	; 0x518 <initPWM1FastA+0x28>
 50e:	e0 e8       	ldi	r30, 0x80	; 128
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	80 68       	ori	r24, 0x80	; 128
 516:	80 83       	st	Z, r24
 518:	e0 e8       	ldi	r30, 0x80	; 128
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	80 81       	ld	r24, Z
 51e:	82 60       	ori	r24, 0x02	; 2
 520:	80 83       	st	Z, r24
 522:	e1 e8       	ldi	r30, 0x81	; 129
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	88 61       	ori	r24, 0x18	; 24
 52a:	80 83       	st	Z, r24
 52c:	80 81       	ld	r24, Z
 52e:	85 60       	ori	r24, 0x05	; 5
 530:	80 83       	st	Z, r24
 532:	08 95       	ret

00000534 <updateDutyCyclePWM1A>:
	}
}

void updateDutyCyclePWM1A(uint8_t duty){
	// Se carga el valor a ICR1, para configurar el periodo
	ICR1H = 0x01;
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L= 0x58;
 53a:	98 e5       	ldi	r25, 0x58	; 88
 53c:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	// Se carga el valor de OCR1A
	OCR1A = 0.139 * duty;
 540:	68 2f       	mov	r22, r24
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 2e 03 	call	0x65c	; 0x65c <__floatsisf>
 54c:	24 e0       	ldi	r18, 0x04	; 4
 54e:	36 e5       	ldi	r19, 0x56	; 86
 550:	4e e0       	ldi	r20, 0x0E	; 14
 552:	5e e3       	ldi	r21, 0x3E	; 62
 554:	0e 94 92 03 	call	0x724	; 0x724 <__mulsf3>
 558:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__fixunssfsi>
 55c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 560:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 564:	08 95       	ret

00000566 <initPWM2FastA>:
	}
	// Configurando modo FAST PWM2 TOP 0XFF
	TCCR2A |= (1<<WGM21)|(1<<WGM20);
	
	// Configurando prescaler de 1024
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
 566:	94 b1       	in	r25, 0x04	; 4
 568:	98 60       	ori	r25, 0x08	; 8
 56a:	94 b9       	out	0x04, r25	; 4
 56c:	88 23       	and	r24, r24
 56e:	31 f0       	breq	.+12     	; 0x57c <initPWM2FastA+0x16>
 570:	e0 eb       	ldi	r30, 0xB0	; 176
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	80 6c       	ori	r24, 0xC0	; 192
 578:	80 83       	st	Z, r24
 57a:	05 c0       	rjmp	.+10     	; 0x586 <initPWM2FastA+0x20>
 57c:	e0 eb       	ldi	r30, 0xB0	; 176
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	80 81       	ld	r24, Z
 582:	80 68       	ori	r24, 0x80	; 128
 584:	80 83       	st	Z, r24
 586:	e0 eb       	ldi	r30, 0xB0	; 176
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	83 60       	ori	r24, 0x03	; 3
 58e:	80 83       	st	Z, r24
 590:	61 15       	cp	r22, r1
 592:	74 40       	sbci	r23, 0x04	; 4
 594:	29 f4       	brne	.+10     	; 0x5a0 <initPWM2FastA+0x3a>
 596:	e1 eb       	ldi	r30, 0xB1	; 177
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	80 81       	ld	r24, Z
 59c:	87 60       	ori	r24, 0x07	; 7
 59e:	80 83       	st	Z, r24
 5a0:	08 95       	ret

000005a2 <updateDutyCyclePWM2A>:
	
}

void updateDutyCyclePWM2A(uint8_t duty2A){
	// Se carga el valor de OCR2A con un factor de mapeado
	OCR2A = duty2A * 0.15 ;
 5a2:	68 2f       	mov	r22, r24
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	0e 94 2e 03 	call	0x65c	; 0x65c <__floatsisf>
 5ae:	2a e9       	ldi	r18, 0x9A	; 154
 5b0:	39 e9       	ldi	r19, 0x99	; 153
 5b2:	49 e1       	ldi	r20, 0x19	; 25
 5b4:	5e e3       	ldi	r21, 0x3E	; 62
 5b6:	0e 94 92 03 	call	0x724	; 0x724 <__mulsf3>
 5ba:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__fixunssfsi>
 5be:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 5c2:	08 95       	ret

000005c4 <initUART9600>:


void initUART9600(void){
	
	//Paso 1: RX y TX como salida
	DDRD &= ~(1<<DDD0);
 5c4:	8a b1       	in	r24, 0x0a	; 10
 5c6:	8e 7f       	andi	r24, 0xFE	; 254
 5c8:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
 5ca:	8a b1       	in	r24, 0x0a	; 10
 5cc:	82 60       	ori	r24, 0x02	; 2
 5ce:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2:Configurar UCSR0A
	UCSR0A = 0;
 5d0:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: configurar UCSR0B donde se habilita ISR de recepcion y se habilita RX y TX
	UCSR0B = 0;
 5d4:	e1 ec       	ldi	r30, 0xC1	; 193
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
 5da:	80 81       	ld	r24, Z
 5dc:	88 69       	ori	r24, 0x98	; 152
 5de:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C, asincrono, paridad: none, 1 bit stop, data bits de 8 bits
	UCSR0C = 0;
 5e0:	e2 ec       	ldi	r30, 0xC2	; 194
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 5e6:	80 81       	ld	r24, Z
 5e8:	86 60       	ori	r24, 0x06	; 6
 5ea:	80 83       	st	Z, r24
	
	//Paso 5: COnfigurar velocidad de baudrate a 9600
	UBRR0 = 103;
 5ec:	87 e6       	ldi	r24, 0x67	; 103
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 5f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 5f8:	08 95       	ret

000005fa <__fixunssfsi>:
 5fa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__fp_splitA>
 5fe:	88 f0       	brcs	.+34     	; 0x622 <__fixunssfsi+0x28>
 600:	9f 57       	subi	r25, 0x7F	; 127
 602:	98 f0       	brcs	.+38     	; 0x62a <__fixunssfsi+0x30>
 604:	b9 2f       	mov	r27, r25
 606:	99 27       	eor	r25, r25
 608:	b7 51       	subi	r27, 0x17	; 23
 60a:	b0 f0       	brcs	.+44     	; 0x638 <__fixunssfsi+0x3e>
 60c:	e1 f0       	breq	.+56     	; 0x646 <__fixunssfsi+0x4c>
 60e:	66 0f       	add	r22, r22
 610:	77 1f       	adc	r23, r23
 612:	88 1f       	adc	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	1a f0       	brmi	.+6      	; 0x61e <__fixunssfsi+0x24>
 618:	ba 95       	dec	r27
 61a:	c9 f7       	brne	.-14     	; 0x60e <__fixunssfsi+0x14>
 61c:	14 c0       	rjmp	.+40     	; 0x646 <__fixunssfsi+0x4c>
 61e:	b1 30       	cpi	r27, 0x01	; 1
 620:	91 f0       	breq	.+36     	; 0x646 <__fixunssfsi+0x4c>
 622:	0e 94 8b 03 	call	0x716	; 0x716 <__fp_zero>
 626:	b1 e0       	ldi	r27, 0x01	; 1
 628:	08 95       	ret
 62a:	0c 94 8b 03 	jmp	0x716	; 0x716 <__fp_zero>
 62e:	67 2f       	mov	r22, r23
 630:	78 2f       	mov	r23, r24
 632:	88 27       	eor	r24, r24
 634:	b8 5f       	subi	r27, 0xF8	; 248
 636:	39 f0       	breq	.+14     	; 0x646 <__fixunssfsi+0x4c>
 638:	b9 3f       	cpi	r27, 0xF9	; 249
 63a:	cc f3       	brlt	.-14     	; 0x62e <__fixunssfsi+0x34>
 63c:	86 95       	lsr	r24
 63e:	77 95       	ror	r23
 640:	67 95       	ror	r22
 642:	b3 95       	inc	r27
 644:	d9 f7       	brne	.-10     	; 0x63c <__fixunssfsi+0x42>
 646:	3e f4       	brtc	.+14     	; 0x656 <__fixunssfsi+0x5c>
 648:	90 95       	com	r25
 64a:	80 95       	com	r24
 64c:	70 95       	com	r23
 64e:	61 95       	neg	r22
 650:	7f 4f       	sbci	r23, 0xFF	; 255
 652:	8f 4f       	sbci	r24, 0xFF	; 255
 654:	9f 4f       	sbci	r25, 0xFF	; 255
 656:	08 95       	ret

00000658 <__floatunsisf>:
 658:	e8 94       	clt
 65a:	09 c0       	rjmp	.+18     	; 0x66e <__floatsisf+0x12>

0000065c <__floatsisf>:
 65c:	97 fb       	bst	r25, 7
 65e:	3e f4       	brtc	.+14     	; 0x66e <__floatsisf+0x12>
 660:	90 95       	com	r25
 662:	80 95       	com	r24
 664:	70 95       	com	r23
 666:	61 95       	neg	r22
 668:	7f 4f       	sbci	r23, 0xFF	; 255
 66a:	8f 4f       	sbci	r24, 0xFF	; 255
 66c:	9f 4f       	sbci	r25, 0xFF	; 255
 66e:	99 23       	and	r25, r25
 670:	a9 f0       	breq	.+42     	; 0x69c <__floatsisf+0x40>
 672:	f9 2f       	mov	r31, r25
 674:	96 e9       	ldi	r25, 0x96	; 150
 676:	bb 27       	eor	r27, r27
 678:	93 95       	inc	r25
 67a:	f6 95       	lsr	r31
 67c:	87 95       	ror	r24
 67e:	77 95       	ror	r23
 680:	67 95       	ror	r22
 682:	b7 95       	ror	r27
 684:	f1 11       	cpse	r31, r1
 686:	f8 cf       	rjmp	.-16     	; 0x678 <__floatsisf+0x1c>
 688:	fa f4       	brpl	.+62     	; 0x6c8 <__floatsisf+0x6c>
 68a:	bb 0f       	add	r27, r27
 68c:	11 f4       	brne	.+4      	; 0x692 <__floatsisf+0x36>
 68e:	60 ff       	sbrs	r22, 0
 690:	1b c0       	rjmp	.+54     	; 0x6c8 <__floatsisf+0x6c>
 692:	6f 5f       	subi	r22, 0xFF	; 255
 694:	7f 4f       	sbci	r23, 0xFF	; 255
 696:	8f 4f       	sbci	r24, 0xFF	; 255
 698:	9f 4f       	sbci	r25, 0xFF	; 255
 69a:	16 c0       	rjmp	.+44     	; 0x6c8 <__floatsisf+0x6c>
 69c:	88 23       	and	r24, r24
 69e:	11 f0       	breq	.+4      	; 0x6a4 <__floatsisf+0x48>
 6a0:	96 e9       	ldi	r25, 0x96	; 150
 6a2:	11 c0       	rjmp	.+34     	; 0x6c6 <__floatsisf+0x6a>
 6a4:	77 23       	and	r23, r23
 6a6:	21 f0       	breq	.+8      	; 0x6b0 <__floatsisf+0x54>
 6a8:	9e e8       	ldi	r25, 0x8E	; 142
 6aa:	87 2f       	mov	r24, r23
 6ac:	76 2f       	mov	r23, r22
 6ae:	05 c0       	rjmp	.+10     	; 0x6ba <__floatsisf+0x5e>
 6b0:	66 23       	and	r22, r22
 6b2:	71 f0       	breq	.+28     	; 0x6d0 <__floatsisf+0x74>
 6b4:	96 e8       	ldi	r25, 0x86	; 134
 6b6:	86 2f       	mov	r24, r22
 6b8:	70 e0       	ldi	r23, 0x00	; 0
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	2a f0       	brmi	.+10     	; 0x6c8 <__floatsisf+0x6c>
 6be:	9a 95       	dec	r25
 6c0:	66 0f       	add	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	88 1f       	adc	r24, r24
 6c6:	da f7       	brpl	.-10     	; 0x6be <__floatsisf+0x62>
 6c8:	88 0f       	add	r24, r24
 6ca:	96 95       	lsr	r25
 6cc:	87 95       	ror	r24
 6ce:	97 f9       	bld	r25, 7
 6d0:	08 95       	ret

000006d2 <__fp_split3>:
 6d2:	57 fd       	sbrc	r21, 7
 6d4:	90 58       	subi	r25, 0x80	; 128
 6d6:	44 0f       	add	r20, r20
 6d8:	55 1f       	adc	r21, r21
 6da:	59 f0       	breq	.+22     	; 0x6f2 <__fp_splitA+0x10>
 6dc:	5f 3f       	cpi	r21, 0xFF	; 255
 6de:	71 f0       	breq	.+28     	; 0x6fc <__fp_splitA+0x1a>
 6e0:	47 95       	ror	r20

000006e2 <__fp_splitA>:
 6e2:	88 0f       	add	r24, r24
 6e4:	97 fb       	bst	r25, 7
 6e6:	99 1f       	adc	r25, r25
 6e8:	61 f0       	breq	.+24     	; 0x702 <__fp_splitA+0x20>
 6ea:	9f 3f       	cpi	r25, 0xFF	; 255
 6ec:	79 f0       	breq	.+30     	; 0x70c <__fp_splitA+0x2a>
 6ee:	87 95       	ror	r24
 6f0:	08 95       	ret
 6f2:	12 16       	cp	r1, r18
 6f4:	13 06       	cpc	r1, r19
 6f6:	14 06       	cpc	r1, r20
 6f8:	55 1f       	adc	r21, r21
 6fa:	f2 cf       	rjmp	.-28     	; 0x6e0 <__fp_split3+0xe>
 6fc:	46 95       	lsr	r20
 6fe:	f1 df       	rcall	.-30     	; 0x6e2 <__fp_splitA>
 700:	08 c0       	rjmp	.+16     	; 0x712 <__fp_splitA+0x30>
 702:	16 16       	cp	r1, r22
 704:	17 06       	cpc	r1, r23
 706:	18 06       	cpc	r1, r24
 708:	99 1f       	adc	r25, r25
 70a:	f1 cf       	rjmp	.-30     	; 0x6ee <__fp_splitA+0xc>
 70c:	86 95       	lsr	r24
 70e:	71 05       	cpc	r23, r1
 710:	61 05       	cpc	r22, r1
 712:	08 94       	sec
 714:	08 95       	ret

00000716 <__fp_zero>:
 716:	e8 94       	clt

00000718 <__fp_szero>:
 718:	bb 27       	eor	r27, r27
 71a:	66 27       	eor	r22, r22
 71c:	77 27       	eor	r23, r23
 71e:	cb 01       	movw	r24, r22
 720:	97 f9       	bld	r25, 7
 722:	08 95       	ret

00000724 <__mulsf3>:
 724:	0e 94 a5 03 	call	0x74a	; 0x74a <__mulsf3x>
 728:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_round>
 72c:	0e 94 08 04 	call	0x810	; 0x810 <__fp_pscA>
 730:	38 f0       	brcs	.+14     	; 0x740 <__mulsf3+0x1c>
 732:	0e 94 0f 04 	call	0x81e	; 0x81e <__fp_pscB>
 736:	20 f0       	brcs	.+8      	; 0x740 <__mulsf3+0x1c>
 738:	95 23       	and	r25, r21
 73a:	11 f0       	breq	.+4      	; 0x740 <__mulsf3+0x1c>
 73c:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__fp_inf>
 740:	0c 94 05 04 	jmp	0x80a	; 0x80a <__fp_nan>
 744:	11 24       	eor	r1, r1
 746:	0c 94 8c 03 	jmp	0x718	; 0x718 <__fp_szero>

0000074a <__mulsf3x>:
 74a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_split3>
 74e:	70 f3       	brcs	.-36     	; 0x72c <__mulsf3+0x8>

00000750 <__mulsf3_pse>:
 750:	95 9f       	mul	r25, r21
 752:	c1 f3       	breq	.-16     	; 0x744 <__mulsf3+0x20>
 754:	95 0f       	add	r25, r21
 756:	50 e0       	ldi	r21, 0x00	; 0
 758:	55 1f       	adc	r21, r21
 75a:	62 9f       	mul	r22, r18
 75c:	f0 01       	movw	r30, r0
 75e:	72 9f       	mul	r23, r18
 760:	bb 27       	eor	r27, r27
 762:	f0 0d       	add	r31, r0
 764:	b1 1d       	adc	r27, r1
 766:	63 9f       	mul	r22, r19
 768:	aa 27       	eor	r26, r26
 76a:	f0 0d       	add	r31, r0
 76c:	b1 1d       	adc	r27, r1
 76e:	aa 1f       	adc	r26, r26
 770:	64 9f       	mul	r22, r20
 772:	66 27       	eor	r22, r22
 774:	b0 0d       	add	r27, r0
 776:	a1 1d       	adc	r26, r1
 778:	66 1f       	adc	r22, r22
 77a:	82 9f       	mul	r24, r18
 77c:	22 27       	eor	r18, r18
 77e:	b0 0d       	add	r27, r0
 780:	a1 1d       	adc	r26, r1
 782:	62 1f       	adc	r22, r18
 784:	73 9f       	mul	r23, r19
 786:	b0 0d       	add	r27, r0
 788:	a1 1d       	adc	r26, r1
 78a:	62 1f       	adc	r22, r18
 78c:	83 9f       	mul	r24, r19
 78e:	a0 0d       	add	r26, r0
 790:	61 1d       	adc	r22, r1
 792:	22 1f       	adc	r18, r18
 794:	74 9f       	mul	r23, r20
 796:	33 27       	eor	r19, r19
 798:	a0 0d       	add	r26, r0
 79a:	61 1d       	adc	r22, r1
 79c:	23 1f       	adc	r18, r19
 79e:	84 9f       	mul	r24, r20
 7a0:	60 0d       	add	r22, r0
 7a2:	21 1d       	adc	r18, r1
 7a4:	82 2f       	mov	r24, r18
 7a6:	76 2f       	mov	r23, r22
 7a8:	6a 2f       	mov	r22, r26
 7aa:	11 24       	eor	r1, r1
 7ac:	9f 57       	subi	r25, 0x7F	; 127
 7ae:	50 40       	sbci	r21, 0x00	; 0
 7b0:	9a f0       	brmi	.+38     	; 0x7d8 <__mulsf3_pse+0x88>
 7b2:	f1 f0       	breq	.+60     	; 0x7f0 <__mulsf3_pse+0xa0>
 7b4:	88 23       	and	r24, r24
 7b6:	4a f0       	brmi	.+18     	; 0x7ca <__mulsf3_pse+0x7a>
 7b8:	ee 0f       	add	r30, r30
 7ba:	ff 1f       	adc	r31, r31
 7bc:	bb 1f       	adc	r27, r27
 7be:	66 1f       	adc	r22, r22
 7c0:	77 1f       	adc	r23, r23
 7c2:	88 1f       	adc	r24, r24
 7c4:	91 50       	subi	r25, 0x01	; 1
 7c6:	50 40       	sbci	r21, 0x00	; 0
 7c8:	a9 f7       	brne	.-22     	; 0x7b4 <__mulsf3_pse+0x64>
 7ca:	9e 3f       	cpi	r25, 0xFE	; 254
 7cc:	51 05       	cpc	r21, r1
 7ce:	80 f0       	brcs	.+32     	; 0x7f0 <__mulsf3_pse+0xa0>
 7d0:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__fp_inf>
 7d4:	0c 94 8c 03 	jmp	0x718	; 0x718 <__fp_szero>
 7d8:	5f 3f       	cpi	r21, 0xFF	; 255
 7da:	e4 f3       	brlt	.-8      	; 0x7d4 <__mulsf3_pse+0x84>
 7dc:	98 3e       	cpi	r25, 0xE8	; 232
 7de:	d4 f3       	brlt	.-12     	; 0x7d4 <__mulsf3_pse+0x84>
 7e0:	86 95       	lsr	r24
 7e2:	77 95       	ror	r23
 7e4:	67 95       	ror	r22
 7e6:	b7 95       	ror	r27
 7e8:	f7 95       	ror	r31
 7ea:	e7 95       	ror	r30
 7ec:	9f 5f       	subi	r25, 0xFF	; 255
 7ee:	c1 f7       	brne	.-16     	; 0x7e0 <__mulsf3_pse+0x90>
 7f0:	fe 2b       	or	r31, r30
 7f2:	88 0f       	add	r24, r24
 7f4:	91 1d       	adc	r25, r1
 7f6:	96 95       	lsr	r25
 7f8:	87 95       	ror	r24
 7fa:	97 f9       	bld	r25, 7
 7fc:	08 95       	ret

000007fe <__fp_inf>:
 7fe:	97 f9       	bld	r25, 7
 800:	9f 67       	ori	r25, 0x7F	; 127
 802:	80 e8       	ldi	r24, 0x80	; 128
 804:	70 e0       	ldi	r23, 0x00	; 0
 806:	60 e0       	ldi	r22, 0x00	; 0
 808:	08 95       	ret

0000080a <__fp_nan>:
 80a:	9f ef       	ldi	r25, 0xFF	; 255
 80c:	80 ec       	ldi	r24, 0xC0	; 192
 80e:	08 95       	ret

00000810 <__fp_pscA>:
 810:	00 24       	eor	r0, r0
 812:	0a 94       	dec	r0
 814:	16 16       	cp	r1, r22
 816:	17 06       	cpc	r1, r23
 818:	18 06       	cpc	r1, r24
 81a:	09 06       	cpc	r0, r25
 81c:	08 95       	ret

0000081e <__fp_pscB>:
 81e:	00 24       	eor	r0, r0
 820:	0a 94       	dec	r0
 822:	12 16       	cp	r1, r18
 824:	13 06       	cpc	r1, r19
 826:	14 06       	cpc	r1, r20
 828:	05 06       	cpc	r0, r21
 82a:	08 95       	ret

0000082c <__fp_round>:
 82c:	09 2e       	mov	r0, r25
 82e:	03 94       	inc	r0
 830:	00 0c       	add	r0, r0
 832:	11 f4       	brne	.+4      	; 0x838 <__fp_round+0xc>
 834:	88 23       	and	r24, r24
 836:	52 f0       	brmi	.+20     	; 0x84c <__fp_round+0x20>
 838:	bb 0f       	add	r27, r27
 83a:	40 f4       	brcc	.+16     	; 0x84c <__fp_round+0x20>
 83c:	bf 2b       	or	r27, r31
 83e:	11 f4       	brne	.+4      	; 0x844 <__fp_round+0x18>
 840:	60 ff       	sbrs	r22, 0
 842:	04 c0       	rjmp	.+8      	; 0x84c <__fp_round+0x20>
 844:	6f 5f       	subi	r22, 0xFF	; 255
 846:	7f 4f       	sbci	r23, 0xFF	; 255
 848:	8f 4f       	sbci	r24, 0xFF	; 255
 84a:	9f 4f       	sbci	r25, 0xFF	; 255
 84c:	08 95       	ret

0000084e <eeprom_read_byte>:
 84e:	f9 99       	sbic	0x1f, 1	; 31
 850:	fe cf       	rjmp	.-4      	; 0x84e <eeprom_read_byte>
 852:	92 bd       	out	0x22, r25	; 34
 854:	81 bd       	out	0x21, r24	; 33
 856:	f8 9a       	sbi	0x1f, 0	; 31
 858:	99 27       	eor	r25, r25
 85a:	80 b5       	in	r24, 0x20	; 32
 85c:	08 95       	ret

0000085e <eeprom_write_byte>:
 85e:	26 2f       	mov	r18, r22

00000860 <eeprom_write_r18>:
 860:	f9 99       	sbic	0x1f, 1	; 31
 862:	fe cf       	rjmp	.-4      	; 0x860 <eeprom_write_r18>
 864:	1f ba       	out	0x1f, r1	; 31
 866:	92 bd       	out	0x22, r25	; 34
 868:	81 bd       	out	0x21, r24	; 33
 86a:	20 bd       	out	0x20, r18	; 32
 86c:	0f b6       	in	r0, 0x3f	; 63
 86e:	f8 94       	cli
 870:	fa 9a       	sbi	0x1f, 2	; 31
 872:	f9 9a       	sbi	0x1f, 1	; 31
 874:	0f be       	out	0x3f, r0	; 63
 876:	01 96       	adiw	r24, 0x01	; 1
 878:	08 95       	ret

0000087a <_exit>:
 87a:	f8 94       	cli

0000087c <__stop_program>:
 87c:	ff cf       	rjmp	.-2      	; 0x87c <__stop_program>
