
Prelab05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000518  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000058c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b47  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000884  00000000  00000000  00001223  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f3  00000000  00000000  00001aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000219c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048d  00000000  00000000  000022fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e6  00000000  00000000  00002789  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000296f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  88:	0c 94 8a 02 	jmp	0x514	; 0x514 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
 */ 
#include <avr/io.h>
#include <stdint.h>

void initADC(uint8_t puertoADC){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	// Se selecciona un canal
	ADMUX = puertoADC;
  96:	80 83       	st	Z, r24
	
	// Se selecciona el voltaje VREF 5V
	ADMUX |= (1<<REFS0);
  98:	80 81       	ld	r24, Z
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  9e:	80 81       	ld	r24, Z
  a0:	8f 77       	andi	r24, 0x7F	; 127
  a2:	80 83       	st	Z, r24
	// Se justifica hacia la izquierda la salida del adc
	ADMUX |= (1 << ADLAR);
  a4:	80 81       	ld	r24, Z
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	80 83       	st	Z, r24
	// Habilitar prescaler de 16M/128 fadc = 125khz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	87 60       	ori	r24, 0x07	; 7
  b2:	80 83       	st	Z, r24
	// Activar la interrupcion del ADC
	ADCSRA |= (1<<ADIE);
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
	// Se activa el ADC
	ADCSRA |= (1<< ADEN);
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <setup>:
}

// Subrutina setup ------------------------------------------------------------
void setup(void){
	// Se apaga tx y rx
	UCSR0B = 0;
  c2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Establece el contado en 0
	contador = 0;
  c6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <contador>
  ca:	08 95       	ret

000000cc <main>:
uint8_t varADCH;

int main(void)
{
	
    cli();								// Deshabilitar interrupciones globales
  cc:	f8 94       	cli
    setup();							// Dirigirse a la subrutina setup
  ce:	0e 94 61 00 	call	0xc2	; 0xc2 <setup>
	initPWM1FastA(no_invertido, 1024);	// Se llama la funcion de la libreria y se envian datos
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	74 e0       	ldi	r23, 0x04	; 4
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <initPWM1FastA>
	initPWM2FastA(no_invertido, 1024);	// Se llama la funcion de la libreria y se envian datos
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	74 e0       	ldi	r23, 0x04	; 4
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 12 01 	call	0x224	; 0x224 <initPWM2FastA>
	initTimer0();						// Se llama la funcion de la libreria
  e6:	0e 94 45 01 	call	0x28a	; 0x28a <initTimer0>
    sei();								// Habilitar interrupciones globales
  ea:	78 94       	sei
	
    while (1)
    {
	    			
		initADC(5);				// Se comienza la conversion en ADC5
  ec:	85 e0       	ldi	r24, 0x05	; 5
  ee:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
		ADCSRA |= (1<< ADSC);	// Comenzar conversion
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	80 83       	st	Z, r24
		while(ADCSRA&(1<<ADSC));// Revisar si la conversion ya termino
  fc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 100:	86 fd       	sbrc	r24, 6
 102:	fc cf       	rjmp	.-8      	; 0xfc <main+0x30>
		updateDutyCyclePWM2A(ADCH);		// Se llama la funcion de la libreria
 104:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 108:	0e 94 34 01 	call	0x268	; 0x268 <updateDutyCyclePWM2A>
		
		initADC(6);				// Se comienza la conversion en ADC6
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	    ADCSRA |= (1<< ADSC);	// Comenzar conversion
 112:	ea e7       	ldi	r30, 0x7A	; 122
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 64       	ori	r24, 0x40	; 64
 11a:	80 83       	st	Z, r24
	    while(ADCSRA&(1<<ADSC));// Revisar si la conversion ya termino
 11c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 120:	86 fd       	sbrc	r24, 6
 122:	fc cf       	rjmp	.-8      	; 0x11c <main+0x50>
		updateDutyCyclePWM1A(ADCH);		// Se llama la funcion de la libreria
 124:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <updateDutyCyclePWM1A>

		initADC(7);				// Se comienza la conversion en ADC7
 12e:	87 e0       	ldi	r24, 0x07	; 7
 130:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
		ADCSRA |= (1<< ADSC);	// Comenzar conversion
 134:	ea e7       	ldi	r30, 0x7A	; 122
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	80 64       	ori	r24, 0x40	; 64
 13c:	80 83       	st	Z, r24
		while(ADCSRA&(1<<ADSC));// Revisar si la conversion ya termino
 13e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 142:	86 fd       	sbrc	r24, 6
 144:	fc cf       	rjmp	.-8      	; 0x13e <main+0x72>
		varADCH = ADCH;			// Guarda el valor de ADCH en la variable varADCH
 146:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 14a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
		manualPWM(contador, varADCH);	// Se llama la funcion de la libreria
 14e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contador>
 152:	0e 94 56 01 	call	0x2ac	; 0x2ac <manualPWM>
    }
 156:	ca cf       	rjmp	.-108    	; 0xec <main+0x20>

00000158 <__vector_21>:
	contador = 0;
}

// Vector de interrupcion ADC -------------------------------------------------
ISR(ADC_vect)
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
	// Se escribe con un 1 lógico la bandera para apagarla
	ADCSRA |= (1<<ADIF);
 168:	ea e7       	ldi	r30, 0x7A	; 122
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 61       	ori	r24, 0x10	; 16
 170:	80 83       	st	Z, r24
}
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <__vector_16>:

// Vector de interrupcion TIMER0 -------------------------------------------------
ISR(TIMER0_OVF_vect)
{
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	8f 93       	push	r24
	// Aumenta el valor del contador
	contador ++;
 18e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <contador>
 192:	8f 5f       	subi	r24, 0xFF	; 255
 194:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <contador>
	// Se carga el valor inicial
	TCNT0 = 240;
 198:	80 ef       	ldi	r24, 0xF0	; 240
 19a:	86 bd       	out	0x26, r24	; 38
	// Se escribe con un 1 lógico la bandera para apagarla
	TIFR0 |= (1<<TOV0);
 19c:	85 b3       	in	r24, 0x15	; 21
 19e:	81 60       	ori	r24, 0x01	; 1
 1a0:	85 bb       	out	0x15, r24	; 21
 1a2:	8f 91       	pop	r24
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <initPWM1FastA>:
	// Configurando modo FAST PWM1 8-bit TOP 0X00FF
	TCCR1A |= (1<<WGM11)|(1<<WGM10);
	
	// Configurando prescaler de 1024
	if (prescaler==1024){
		TCCR1B |= (1<<CS12)|(1<<CS10);
 1ae:	94 b1       	in	r25, 0x04	; 4
 1b0:	92 60       	ori	r25, 0x02	; 2
 1b2:	94 b9       	out	0x04, r25	; 4
 1b4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 1b8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 1bc:	88 23       	and	r24, r24
 1be:	31 f0       	breq	.+12     	; 0x1cc <initPWM1FastA+0x1e>
 1c0:	e0 e8       	ldi	r30, 0x80	; 128
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	80 6c       	ori	r24, 0xC0	; 192
 1c8:	80 83       	st	Z, r24
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <initPWM1FastA+0x28>
 1cc:	e0 e8       	ldi	r30, 0x80	; 128
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	80 68       	ori	r24, 0x80	; 128
 1d4:	80 83       	st	Z, r24
 1d6:	e0 e8       	ldi	r30, 0x80	; 128
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	82 60       	ori	r24, 0x02	; 2
 1de:	80 83       	st	Z, r24
 1e0:	e1 e8       	ldi	r30, 0x81	; 129
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	88 61       	ori	r24, 0x18	; 24
 1e8:	80 83       	st	Z, r24
 1ea:	80 81       	ld	r24, Z
 1ec:	85 60       	ori	r24, 0x05	; 5
 1ee:	80 83       	st	Z, r24
 1f0:	08 95       	ret

000001f2 <updateDutyCyclePWM1A>:
	}
}

void updateDutyCyclePWM1A(uint8_t duty){
	// Se carga el valor a ICR1, para configurar el periodo
	ICR1H = 0x01;
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
	ICR1L= 0x58;
 1f8:	98 e5       	ldi	r25, 0x58	; 88
 1fa:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	// Se carga el valor de OCR1A
	OCR1A = 0.139 * duty;
 1fe:	68 2f       	mov	r22, r24
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 91 01 	call	0x322	; 0x322 <__floatsisf>
 20a:	24 e0       	ldi	r18, 0x04	; 4
 20c:	36 e5       	ldi	r19, 0x56	; 86
 20e:	4e e0       	ldi	r20, 0x0E	; 14
 210:	5e e3       	ldi	r21, 0x3E	; 62
 212:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__mulsf3>
 216:	0e 94 60 01 	call	0x2c0	; 0x2c0 <__fixunssfsi>
 21a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 21e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 222:	08 95       	ret

00000224 <initPWM2FastA>:
#define invertido 1
#define no_invertido 0

void initPWM2FastA(uint8_t inverted, uint16_t prescaler){
	//Configurando el pin PD6 como salida (OC2A)
	DDRB |= (1<<DDB3);
 224:	94 b1       	in	r25, 0x04	; 4
 226:	98 60       	ori	r25, 0x08	; 8
 228:	94 b9       	out	0x04, r25	; 4
	
	// Limpiar los registros TCC2A Y TCCR2B
	TCCR2A = 0;
 22a:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
 22e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	if (inverted){
 232:	88 23       	and	r24, r24
 234:	31 f0       	breq	.+12     	; 0x242 <initPWM2FastA+0x1e>
		//Configurando OC2A como invertido
		TCCR2A |= (1<<COM2A1)|(1<<COM2A0);
 236:	e0 eb       	ldi	r30, 0xB0	; 176
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	80 6c       	ori	r24, 0xC0	; 192
 23e:	80 83       	st	Z, r24
 240:	05 c0       	rjmp	.+10     	; 0x24c <initPWM2FastA+0x28>
	}
	else {
		//Configurando OC2A como no invertido
		TCCR2A |= (1<<COM2A1);
 242:	e0 eb       	ldi	r30, 0xB0	; 176
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 68       	ori	r24, 0x80	; 128
 24a:	80 83       	st	Z, r24
	}
	// Configurando modo FAST PWM2 TOP 0XFF
	TCCR2A |= (1<<WGM21)|(1<<WGM20);
 24c:	e0 eb       	ldi	r30, 0xB0	; 176
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	83 60       	ori	r24, 0x03	; 3
 254:	80 83       	st	Z, r24
	
	// Configurando prescaler de 1024
	if (prescaler==1024){
 256:	61 15       	cp	r22, r1
 258:	74 40       	sbci	r23, 0x04	; 4
 25a:	29 f4       	brne	.+10     	; 0x266 <initPWM2FastA+0x42>
		TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
 25c:	e1 eb       	ldi	r30, 0xB1	; 177
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	87 60       	ori	r24, 0x07	; 7
 264:	80 83       	st	Z, r24
 266:	08 95       	ret

00000268 <updateDutyCyclePWM2A>:
	
}

void updateDutyCyclePWM2A(uint8_t duty2){
	// Se carga el valor de OCR2A con un factor de mapeado
	OCR2A = duty2 * 0.15;
 268:	68 2f       	mov	r22, r24
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 91 01 	call	0x322	; 0x322 <__floatsisf>
 274:	2a e9       	ldi	r18, 0x9A	; 154
 276:	39 e9       	ldi	r19, 0x99	; 153
 278:	49 e1       	ldi	r20, 0x19	; 25
 27a:	5e e3       	ldi	r21, 0x3E	; 62
 27c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__mulsf3>
 280:	0e 94 60 01 	call	0x2c0	; 0x2c0 <__fixunssfsi>
 284:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 288:	08 95       	ret

0000028a <initTimer0>:
//Se incluyen librerias
#include <avr/io.h>
#include <stdint.h>

void initTimer0(void){
	DDRD |= (1<<DDD1);						// Configurando PD1 como salida
 28a:	8a b1       	in	r24, 0x0a	; 10
 28c:	82 60       	ori	r24, 0x02	; 2
 28e:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD1);					// Se apaga el puertoD1
 290:	8b b1       	in	r24, 0x0b	; 11
 292:	82 60       	ori	r24, 0x02	; 2
 294:	8b b9       	out	0x0b, r24	; 11
	TCCR0B |= (1<<CS01) ;					// CONFIGURA EL PRESCALER A 8 PARA UN RELOJ DE 16MHZ
 296:	85 b5       	in	r24, 0x25	; 37
 298:	82 60       	ori	r24, 0x02	; 2
 29a:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 240;							// CARGA EL VALOR INICIAL DEL CONTADOR
 29c:	80 ef       	ldi	r24, 0xF0	; 240
 29e:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= (1 << TOIE0);					// Habilita la interrupción del overflow en el timer 2
 2a0:	ee e6       	ldi	r30, 0x6E	; 110
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	81 60       	ori	r24, 0x01	; 1
 2a8:	80 83       	st	Z, r24
 2aa:	08 95       	ret

000002ac <manualPWM>:
}

void manualPWM(uint8_t counter, uint8_t CounterADCH){
	// Verificar si el contador es mayor al valor ADCH, si si apagar el puertoD1
	if((counter >= CounterADCH)){
 2ac:	86 17       	cp	r24, r22
 2ae:	20 f0       	brcs	.+8      	; 0x2b8 <manualPWM+0xc>
		PORTD &= ~(1<<PORTD1);
 2b0:	8b b1       	in	r24, 0x0b	; 11
 2b2:	8d 7f       	andi	r24, 0xFD	; 253
 2b4:	8b b9       	out	0x0b, r24	; 11
 2b6:	08 95       	ret
		
	}
	// De lo contrario, prender el puertoD1
	else {
		PORTD |= (1<<PORTD1);
 2b8:	8b b1       	in	r24, 0x0b	; 11
 2ba:	82 60       	ori	r24, 0x02	; 2
 2bc:	8b b9       	out	0x0b, r24	; 11
 2be:	08 95       	ret

000002c0 <__fixunssfsi>:
 2c0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__fp_splitA>
 2c4:	88 f0       	brcs	.+34     	; 0x2e8 <__fixunssfsi+0x28>
 2c6:	9f 57       	subi	r25, 0x7F	; 127
 2c8:	98 f0       	brcs	.+38     	; 0x2f0 <__fixunssfsi+0x30>
 2ca:	b9 2f       	mov	r27, r25
 2cc:	99 27       	eor	r25, r25
 2ce:	b7 51       	subi	r27, 0x17	; 23
 2d0:	b0 f0       	brcs	.+44     	; 0x2fe <__fixunssfsi+0x3e>
 2d2:	e1 f0       	breq	.+56     	; 0x30c <__fixunssfsi+0x4c>
 2d4:	66 0f       	add	r22, r22
 2d6:	77 1f       	adc	r23, r23
 2d8:	88 1f       	adc	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	1a f0       	brmi	.+6      	; 0x2e4 <__fixunssfsi+0x24>
 2de:	ba 95       	dec	r27
 2e0:	c9 f7       	brne	.-14     	; 0x2d4 <__fixunssfsi+0x14>
 2e2:	14 c0       	rjmp	.+40     	; 0x30c <__fixunssfsi+0x4c>
 2e4:	b1 30       	cpi	r27, 0x01	; 1
 2e6:	91 f0       	breq	.+36     	; 0x30c <__fixunssfsi+0x4c>
 2e8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__fp_zero>
 2ec:	b1 e0       	ldi	r27, 0x01	; 1
 2ee:	08 95       	ret
 2f0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__fp_zero>
 2f4:	67 2f       	mov	r22, r23
 2f6:	78 2f       	mov	r23, r24
 2f8:	88 27       	eor	r24, r24
 2fa:	b8 5f       	subi	r27, 0xF8	; 248
 2fc:	39 f0       	breq	.+14     	; 0x30c <__fixunssfsi+0x4c>
 2fe:	b9 3f       	cpi	r27, 0xF9	; 249
 300:	cc f3       	brlt	.-14     	; 0x2f4 <__fixunssfsi+0x34>
 302:	86 95       	lsr	r24
 304:	77 95       	ror	r23
 306:	67 95       	ror	r22
 308:	b3 95       	inc	r27
 30a:	d9 f7       	brne	.-10     	; 0x302 <__fixunssfsi+0x42>
 30c:	3e f4       	brtc	.+14     	; 0x31c <__fixunssfsi+0x5c>
 30e:	90 95       	com	r25
 310:	80 95       	com	r24
 312:	70 95       	com	r23
 314:	61 95       	neg	r22
 316:	7f 4f       	sbci	r23, 0xFF	; 255
 318:	8f 4f       	sbci	r24, 0xFF	; 255
 31a:	9f 4f       	sbci	r25, 0xFF	; 255
 31c:	08 95       	ret

0000031e <__floatunsisf>:
 31e:	e8 94       	clt
 320:	09 c0       	rjmp	.+18     	; 0x334 <__floatsisf+0x12>

00000322 <__floatsisf>:
 322:	97 fb       	bst	r25, 7
 324:	3e f4       	brtc	.+14     	; 0x334 <__floatsisf+0x12>
 326:	90 95       	com	r25
 328:	80 95       	com	r24
 32a:	70 95       	com	r23
 32c:	61 95       	neg	r22
 32e:	7f 4f       	sbci	r23, 0xFF	; 255
 330:	8f 4f       	sbci	r24, 0xFF	; 255
 332:	9f 4f       	sbci	r25, 0xFF	; 255
 334:	99 23       	and	r25, r25
 336:	a9 f0       	breq	.+42     	; 0x362 <__floatsisf+0x40>
 338:	f9 2f       	mov	r31, r25
 33a:	96 e9       	ldi	r25, 0x96	; 150
 33c:	bb 27       	eor	r27, r27
 33e:	93 95       	inc	r25
 340:	f6 95       	lsr	r31
 342:	87 95       	ror	r24
 344:	77 95       	ror	r23
 346:	67 95       	ror	r22
 348:	b7 95       	ror	r27
 34a:	f1 11       	cpse	r31, r1
 34c:	f8 cf       	rjmp	.-16     	; 0x33e <__floatsisf+0x1c>
 34e:	fa f4       	brpl	.+62     	; 0x38e <__floatsisf+0x6c>
 350:	bb 0f       	add	r27, r27
 352:	11 f4       	brne	.+4      	; 0x358 <__floatsisf+0x36>
 354:	60 ff       	sbrs	r22, 0
 356:	1b c0       	rjmp	.+54     	; 0x38e <__floatsisf+0x6c>
 358:	6f 5f       	subi	r22, 0xFF	; 255
 35a:	7f 4f       	sbci	r23, 0xFF	; 255
 35c:	8f 4f       	sbci	r24, 0xFF	; 255
 35e:	9f 4f       	sbci	r25, 0xFF	; 255
 360:	16 c0       	rjmp	.+44     	; 0x38e <__floatsisf+0x6c>
 362:	88 23       	and	r24, r24
 364:	11 f0       	breq	.+4      	; 0x36a <__floatsisf+0x48>
 366:	96 e9       	ldi	r25, 0x96	; 150
 368:	11 c0       	rjmp	.+34     	; 0x38c <__floatsisf+0x6a>
 36a:	77 23       	and	r23, r23
 36c:	21 f0       	breq	.+8      	; 0x376 <__floatsisf+0x54>
 36e:	9e e8       	ldi	r25, 0x8E	; 142
 370:	87 2f       	mov	r24, r23
 372:	76 2f       	mov	r23, r22
 374:	05 c0       	rjmp	.+10     	; 0x380 <__floatsisf+0x5e>
 376:	66 23       	and	r22, r22
 378:	71 f0       	breq	.+28     	; 0x396 <__floatsisf+0x74>
 37a:	96 e8       	ldi	r25, 0x86	; 134
 37c:	86 2f       	mov	r24, r22
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	2a f0       	brmi	.+10     	; 0x38e <__floatsisf+0x6c>
 384:	9a 95       	dec	r25
 386:	66 0f       	add	r22, r22
 388:	77 1f       	adc	r23, r23
 38a:	88 1f       	adc	r24, r24
 38c:	da f7       	brpl	.-10     	; 0x384 <__floatsisf+0x62>
 38e:	88 0f       	add	r24, r24
 390:	96 95       	lsr	r25
 392:	87 95       	ror	r24
 394:	97 f9       	bld	r25, 7
 396:	08 95       	ret

00000398 <__fp_split3>:
 398:	57 fd       	sbrc	r21, 7
 39a:	90 58       	subi	r25, 0x80	; 128
 39c:	44 0f       	add	r20, r20
 39e:	55 1f       	adc	r21, r21
 3a0:	59 f0       	breq	.+22     	; 0x3b8 <__fp_splitA+0x10>
 3a2:	5f 3f       	cpi	r21, 0xFF	; 255
 3a4:	71 f0       	breq	.+28     	; 0x3c2 <__fp_splitA+0x1a>
 3a6:	47 95       	ror	r20

000003a8 <__fp_splitA>:
 3a8:	88 0f       	add	r24, r24
 3aa:	97 fb       	bst	r25, 7
 3ac:	99 1f       	adc	r25, r25
 3ae:	61 f0       	breq	.+24     	; 0x3c8 <__fp_splitA+0x20>
 3b0:	9f 3f       	cpi	r25, 0xFF	; 255
 3b2:	79 f0       	breq	.+30     	; 0x3d2 <__fp_splitA+0x2a>
 3b4:	87 95       	ror	r24
 3b6:	08 95       	ret
 3b8:	12 16       	cp	r1, r18
 3ba:	13 06       	cpc	r1, r19
 3bc:	14 06       	cpc	r1, r20
 3be:	55 1f       	adc	r21, r21
 3c0:	f2 cf       	rjmp	.-28     	; 0x3a6 <__fp_split3+0xe>
 3c2:	46 95       	lsr	r20
 3c4:	f1 df       	rcall	.-30     	; 0x3a8 <__fp_splitA>
 3c6:	08 c0       	rjmp	.+16     	; 0x3d8 <__fp_splitA+0x30>
 3c8:	16 16       	cp	r1, r22
 3ca:	17 06       	cpc	r1, r23
 3cc:	18 06       	cpc	r1, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	f1 cf       	rjmp	.-30     	; 0x3b4 <__fp_splitA+0xc>
 3d2:	86 95       	lsr	r24
 3d4:	71 05       	cpc	r23, r1
 3d6:	61 05       	cpc	r22, r1
 3d8:	08 94       	sec
 3da:	08 95       	ret

000003dc <__fp_zero>:
 3dc:	e8 94       	clt

000003de <__fp_szero>:
 3de:	bb 27       	eor	r27, r27
 3e0:	66 27       	eor	r22, r22
 3e2:	77 27       	eor	r23, r23
 3e4:	cb 01       	movw	r24, r22
 3e6:	97 f9       	bld	r25, 7
 3e8:	08 95       	ret

000003ea <__mulsf3>:
 3ea:	0e 94 08 02 	call	0x410	; 0x410 <__mulsf3x>
 3ee:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__fp_round>
 3f2:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__fp_pscA>
 3f6:	38 f0       	brcs	.+14     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3f8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__fp_pscB>
 3fc:	20 f0       	brcs	.+8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fe:	95 23       	and	r25, r21
 400:	11 f0       	breq	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_inf>
 406:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__fp_nan>
 40a:	11 24       	eor	r1, r1
 40c:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__fp_szero>

00000410 <__mulsf3x>:
 410:	0e 94 cc 01 	call	0x398	; 0x398 <__fp_split3>
 414:	70 f3       	brcs	.-36     	; 0x3f2 <__mulsf3+0x8>

00000416 <__mulsf3_pse>:
 416:	95 9f       	mul	r25, r21
 418:	c1 f3       	breq	.-16     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 41a:	95 0f       	add	r25, r21
 41c:	50 e0       	ldi	r21, 0x00	; 0
 41e:	55 1f       	adc	r21, r21
 420:	62 9f       	mul	r22, r18
 422:	f0 01       	movw	r30, r0
 424:	72 9f       	mul	r23, r18
 426:	bb 27       	eor	r27, r27
 428:	f0 0d       	add	r31, r0
 42a:	b1 1d       	adc	r27, r1
 42c:	63 9f       	mul	r22, r19
 42e:	aa 27       	eor	r26, r26
 430:	f0 0d       	add	r31, r0
 432:	b1 1d       	adc	r27, r1
 434:	aa 1f       	adc	r26, r26
 436:	64 9f       	mul	r22, r20
 438:	66 27       	eor	r22, r22
 43a:	b0 0d       	add	r27, r0
 43c:	a1 1d       	adc	r26, r1
 43e:	66 1f       	adc	r22, r22
 440:	82 9f       	mul	r24, r18
 442:	22 27       	eor	r18, r18
 444:	b0 0d       	add	r27, r0
 446:	a1 1d       	adc	r26, r1
 448:	62 1f       	adc	r22, r18
 44a:	73 9f       	mul	r23, r19
 44c:	b0 0d       	add	r27, r0
 44e:	a1 1d       	adc	r26, r1
 450:	62 1f       	adc	r22, r18
 452:	83 9f       	mul	r24, r19
 454:	a0 0d       	add	r26, r0
 456:	61 1d       	adc	r22, r1
 458:	22 1f       	adc	r18, r18
 45a:	74 9f       	mul	r23, r20
 45c:	33 27       	eor	r19, r19
 45e:	a0 0d       	add	r26, r0
 460:	61 1d       	adc	r22, r1
 462:	23 1f       	adc	r18, r19
 464:	84 9f       	mul	r24, r20
 466:	60 0d       	add	r22, r0
 468:	21 1d       	adc	r18, r1
 46a:	82 2f       	mov	r24, r18
 46c:	76 2f       	mov	r23, r22
 46e:	6a 2f       	mov	r22, r26
 470:	11 24       	eor	r1, r1
 472:	9f 57       	subi	r25, 0x7F	; 127
 474:	50 40       	sbci	r21, 0x00	; 0
 476:	9a f0       	brmi	.+38     	; 0x49e <__mulsf3_pse+0x88>
 478:	f1 f0       	breq	.+60     	; 0x4b6 <__mulsf3_pse+0xa0>
 47a:	88 23       	and	r24, r24
 47c:	4a f0       	brmi	.+18     	; 0x490 <__mulsf3_pse+0x7a>
 47e:	ee 0f       	add	r30, r30
 480:	ff 1f       	adc	r31, r31
 482:	bb 1f       	adc	r27, r27
 484:	66 1f       	adc	r22, r22
 486:	77 1f       	adc	r23, r23
 488:	88 1f       	adc	r24, r24
 48a:	91 50       	subi	r25, 0x01	; 1
 48c:	50 40       	sbci	r21, 0x00	; 0
 48e:	a9 f7       	brne	.-22     	; 0x47a <__mulsf3_pse+0x64>
 490:	9e 3f       	cpi	r25, 0xFE	; 254
 492:	51 05       	cpc	r21, r1
 494:	80 f0       	brcs	.+32     	; 0x4b6 <__mulsf3_pse+0xa0>
 496:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_inf>
 49a:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__fp_szero>
 49e:	5f 3f       	cpi	r21, 0xFF	; 255
 4a0:	e4 f3       	brlt	.-8      	; 0x49a <__mulsf3_pse+0x84>
 4a2:	98 3e       	cpi	r25, 0xE8	; 232
 4a4:	d4 f3       	brlt	.-12     	; 0x49a <__mulsf3_pse+0x84>
 4a6:	86 95       	lsr	r24
 4a8:	77 95       	ror	r23
 4aa:	67 95       	ror	r22
 4ac:	b7 95       	ror	r27
 4ae:	f7 95       	ror	r31
 4b0:	e7 95       	ror	r30
 4b2:	9f 5f       	subi	r25, 0xFF	; 255
 4b4:	c1 f7       	brne	.-16     	; 0x4a6 <__mulsf3_pse+0x90>
 4b6:	fe 2b       	or	r31, r30
 4b8:	88 0f       	add	r24, r24
 4ba:	91 1d       	adc	r25, r1
 4bc:	96 95       	lsr	r25
 4be:	87 95       	ror	r24
 4c0:	97 f9       	bld	r25, 7
 4c2:	08 95       	ret

000004c4 <__fp_inf>:
 4c4:	97 f9       	bld	r25, 7
 4c6:	9f 67       	ori	r25, 0x7F	; 127
 4c8:	80 e8       	ldi	r24, 0x80	; 128
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	08 95       	ret

000004d0 <__fp_nan>:
 4d0:	9f ef       	ldi	r25, 0xFF	; 255
 4d2:	80 ec       	ldi	r24, 0xC0	; 192
 4d4:	08 95       	ret

000004d6 <__fp_pscA>:
 4d6:	00 24       	eor	r0, r0
 4d8:	0a 94       	dec	r0
 4da:	16 16       	cp	r1, r22
 4dc:	17 06       	cpc	r1, r23
 4de:	18 06       	cpc	r1, r24
 4e0:	09 06       	cpc	r0, r25
 4e2:	08 95       	ret

000004e4 <__fp_pscB>:
 4e4:	00 24       	eor	r0, r0
 4e6:	0a 94       	dec	r0
 4e8:	12 16       	cp	r1, r18
 4ea:	13 06       	cpc	r1, r19
 4ec:	14 06       	cpc	r1, r20
 4ee:	05 06       	cpc	r0, r21
 4f0:	08 95       	ret

000004f2 <__fp_round>:
 4f2:	09 2e       	mov	r0, r25
 4f4:	03 94       	inc	r0
 4f6:	00 0c       	add	r0, r0
 4f8:	11 f4       	brne	.+4      	; 0x4fe <__fp_round+0xc>
 4fa:	88 23       	and	r24, r24
 4fc:	52 f0       	brmi	.+20     	; 0x512 <__fp_round+0x20>
 4fe:	bb 0f       	add	r27, r27
 500:	40 f4       	brcc	.+16     	; 0x512 <__fp_round+0x20>
 502:	bf 2b       	or	r27, r31
 504:	11 f4       	brne	.+4      	; 0x50a <__fp_round+0x18>
 506:	60 ff       	sbrs	r22, 0
 508:	04 c0       	rjmp	.+8      	; 0x512 <__fp_round+0x20>
 50a:	6f 5f       	subi	r22, 0xFF	; 255
 50c:	7f 4f       	sbci	r23, 0xFF	; 255
 50e:	8f 4f       	sbci	r24, 0xFF	; 255
 510:	9f 4f       	sbci	r25, 0xFF	; 255
 512:	08 95       	ret

00000514 <_exit>:
 514:	f8 94       	cli

00000516 <__stop_program>:
 516:	ff cf       	rjmp	.-2      	; 0x516 <__stop_program>
