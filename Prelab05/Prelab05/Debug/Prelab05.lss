
Prelab05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800100  00800100  00000320  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d50  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093c  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082b  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fb  00000000  00000000  00002530  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e1  00000000  00000000  00002a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00002d0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	af 30       	cpi	r26, 0x0F	; 15
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  88:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <CharToInt>:
int n3;

int num;

int CharToInt(char num){
	return num - '0';
  90:	90 e0       	ldi	r25, 0x00	; 0
}
  92:	c0 97       	sbiw	r24, 0x30	; 48
  94:	08 95       	ret

00000096 <unir>:

int unir(int n1, int n2, int n3){
	return n1*100+ n2*10 + n3;
  96:	e4 e6       	ldi	r30, 0x64	; 100
  98:	e8 9f       	mul	r30, r24
  9a:	90 01       	movw	r18, r0
  9c:	e9 9f       	mul	r30, r25
  9e:	30 0d       	add	r19, r0
  a0:	11 24       	eor	r1, r1
  a2:	cb 01       	movw	r24, r22
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	66 0f       	add	r22, r22
  aa:	77 1f       	adc	r23, r23
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	66 0f       	add	r22, r22
  b2:	77 1f       	adc	r23, r23
  b4:	68 0f       	add	r22, r24
  b6:	79 1f       	adc	r23, r25
  b8:	c9 01       	movw	r24, r18
  ba:	86 0f       	add	r24, r22
  bc:	97 1f       	adc	r25, r23
}
  be:	84 0f       	add	r24, r20
  c0:	95 1f       	adc	r25, r21
  c2:	08 95       	ret

000000c4 <setup>:
// Subrutina setup ------------------------------------------------------------
void setup(void){
	// Se apaga tx y rx
	//UCSR0B = 0;
	// Establece el contado en 0
	DDRB = 0xFF;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x03;
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	87 b9       	out	0x07, r24	; 7
	PORTB = 0;
  cc:	15 b8       	out	0x05, r1	; 5
	PORTC =0;
  ce:	18 b8       	out	0x08, r1	; 8
	contador = 0;
  d0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <contador>
  d4:	08 95       	ret

000000d6 <main>:


int main(void)
{
	
    cli();								// Deshabilitar interrupciones globales
  d6:	f8 94       	cli
    setup();	
  d8:	0e 94 62 00 	call	0xc4	; 0xc4 <setup>
	initUART9600();						// Dirigirse a la subrutina setup
  dc:	0e 94 32 01 	call	0x264	; 0x264 <initUART9600>
	initPWM1FastA(no_invertido, 1024);	// Se llama la funcion de la libreria y se envian datos
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	74 e0       	ldi	r23, 0x04	; 4
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <initPWM1FastA>
	initPWM2FastA(no_invertido, 1024);	// Se llama la funcion de la libreria y se envian datos
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	74 e0       	ldi	r23, 0x04	; 4
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <initPWM2FastA>
	initTimer0();						// Se llama la funcion de la libreria
  f4:	0e 94 21 01 	call	0x242	; 0x242 <initTimer0>
    sei();								// Habilitar interrupciones globales
  f8:	78 94       	sei
	
    while (1)
    {
	    recibido1=ValorRecibido();
  fa:	0e 94 4d 01 	call	0x29a	; 0x29a <ValorRecibido>
  fe:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <recibido1>
	    recibido2=ValorRecibido();
 102:	0e 94 4d 01 	call	0x29a	; 0x29a <ValorRecibido>
 106:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <recibido2>
	    recibido3=ValorRecibido();
 10a:	0e 94 4d 01 	call	0x29a	; 0x29a <ValorRecibido>
 10e:	f8 2e       	mov	r15, r24
 110:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <recibido3>
	    
	    n1=CharToInt(recibido1);
 114:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <recibido1>
 118:	0e 94 48 00 	call	0x90	; 0x90 <CharToInt>
 11c:	ec 01       	movw	r28, r24
 11e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <n1+0x1>
 122:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <n1>
	    n2=CharToInt(recibido2);
 126:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <recibido2>
 12a:	0e 94 48 00 	call	0x90	; 0x90 <CharToInt>
 12e:	8c 01       	movw	r16, r24
 130:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <n2+0x1>
 134:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <n2>
	    n3=CharToInt(recibido3);
 138:	8f 2d       	mov	r24, r15
 13a:	0e 94 48 00 	call	0x90	; 0x90 <CharToInt>
 13e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <n3+0x1>
 142:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <n3>
	    
	    num= unir(n1,n2,n3);
 146:	ac 01       	movw	r20, r24
 148:	b8 01       	movw	r22, r16
 14a:	ce 01       	movw	r24, r28
 14c:	0e 94 4b 00 	call	0x96	; 0x96 <unir>
 150:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <num+0x1>
 154:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <num>
	    
	    PORTB = 0xFF;
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	85 b9       	out	0x05, r24	; 5
	    PORTC |= 255>>6;
 15c:	88 b1       	in	r24, 0x08	; 8
 15e:	83 60       	ori	r24, 0x03	; 3
 160:	88 b9       	out	0x08, r24	; 8
 162:	cb cf       	rjmp	.-106    	; 0xfa <main+0x24>

00000164 <__vector_21>:
	contador = 0;
}

// Vector de interrupcion ADC -------------------------------------------------
ISR(ADC_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	// Se escribe con un 1 lógico la bandera para apagarla
	ADCSRA |= (1<<ADIF);
 174:	ea e7       	ldi	r30, 0x7A	; 122
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	80 61       	ori	r24, 0x10	; 16
 17c:	80 83       	st	Z, r24
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_16>:

// Vector de interrupcion TIMER0 -------------------------------------------------
ISR(TIMER0_OVF_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	8f 93       	push	r24
	// Aumenta el valor del contador
	contador ++;
 19a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <contador>
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <contador>
	// Se carga el valor inicial
	TCNT0 = 240;
 1a4:	80 ef       	ldi	r24, 0xF0	; 240
 1a6:	86 bd       	out	0x26, r24	; 38
	// Se escribe con un 1 lógico la bandera para apagarla
	TIFR0 |= (1<<TOV0);
 1a8:	85 b3       	in	r24, 0x15	; 21
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	85 bb       	out	0x15, r24	; 21
}
 1ae:	8f 91       	pop	r24
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <initPWM1FastA>:
#define no_invertido 0


void initPWM1FastA(uint8_t inverted, uint16_t prescaler){
	//Configurando el pin PD6 como salida (OC1A)
	DDRB |= (1<<DDB1);
 1ba:	94 b1       	in	r25, 0x04	; 4
 1bc:	92 60       	ori	r25, 0x02	; 2
 1be:	94 b9       	out	0x04, r25	; 4
	
	// Se limpian los registros TCCR1A Y TCCR1B
	TCCR1A = 0;
 1c0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 1c4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	if (inverted){
 1c8:	88 23       	and	r24, r24
 1ca:	31 f0       	breq	.+12     	; 0x1d8 <initPWM1FastA+0x1e>
		//Configurando OC0A como invertido
		TCCR1A |= (1<<COM1A1)|(1<<COM1A0);
 1cc:	e0 e8       	ldi	r30, 0x80	; 128
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	80 6c       	ori	r24, 0xC0	; 192
 1d4:	80 83       	st	Z, r24
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <initPWM1FastA+0x28>
	}
	else{
		//Configurando OC0A como no invertido
		TCCR1A |= (1<<COM1A1);
 1d8:	e0 e8       	ldi	r30, 0x80	; 128
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	80 68       	ori	r24, 0x80	; 128
 1e0:	80 83       	st	Z, r24
	}
	
	// Configurando modo FAST PWM1 16-bit TOP OCR1A
	//TCCR1A |= (1<<WGM10);
	TCCR1A |= (1<<WGM11);
 1e2:	e0 e8       	ldi	r30, 0x80	; 128
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	82 60       	ori	r24, 0x02	; 2
 1ea:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12)|(1<<WGM13);
 1ec:	e1 e8       	ldi	r30, 0x81	; 129
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	88 61       	ori	r24, 0x18	; 24
 1f4:	80 83       	st	Z, r24
	
	// Configurando prescaler de 1024
	TCCR1B |= (1<<CS12)|(1<<CS10);
 1f6:	80 81       	ld	r24, Z
 1f8:	85 60       	ori	r24, 0x05	; 5
 1fa:	80 83       	st	Z, r24
 1fc:	08 95       	ret

000001fe <initPWM2FastA>:
#define invertido 1
#define no_invertido 0

void initPWM2FastA(uint8_t inverted, uint16_t prescaler){
	//Configurando el pin PD6 como salida (OC2A)
	DDRB |= (1<<DDB3);
 1fe:	94 b1       	in	r25, 0x04	; 4
 200:	98 60       	ori	r25, 0x08	; 8
 202:	94 b9       	out	0x04, r25	; 4
	
	// Limpiar los registros TCC2A Y TCCR2B
	TCCR2A = 0;
 204:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0;
 208:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	if (inverted){
 20c:	88 23       	and	r24, r24
 20e:	31 f0       	breq	.+12     	; 0x21c <initPWM2FastA+0x1e>
		//Configurando OC2A como invertido
		TCCR2A |= (1<<COM2A1)|(1<<COM2A0);
 210:	e0 eb       	ldi	r30, 0xB0	; 176
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	80 6c       	ori	r24, 0xC0	; 192
 218:	80 83       	st	Z, r24
 21a:	05 c0       	rjmp	.+10     	; 0x226 <initPWM2FastA+0x28>
	}
	else {
		//Configurando OC2A como no invertido
		TCCR2A |= (1<<COM2A1);
 21c:	e0 eb       	ldi	r30, 0xB0	; 176
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	80 68       	ori	r24, 0x80	; 128
 224:	80 83       	st	Z, r24
	}
	// Configurando modo FAST PWM2 TOP 0XFF
	TCCR2A |= (1<<WGM21)|(1<<WGM20);
 226:	e0 eb       	ldi	r30, 0xB0	; 176
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	83 60       	ori	r24, 0x03	; 3
 22e:	80 83       	st	Z, r24
	
	// Configurando prescaler de 1024
	if (prescaler==1024){
 230:	61 15       	cp	r22, r1
 232:	74 40       	sbci	r23, 0x04	; 4
 234:	29 f4       	brne	.+10     	; 0x240 <initPWM2FastA+0x42>
		TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
 236:	e1 eb       	ldi	r30, 0xB1	; 177
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	87 60       	ori	r24, 0x07	; 7
 23e:	80 83       	st	Z, r24
 240:	08 95       	ret

00000242 <initTimer0>:
//Se incluyen librerias
#include <avr/io.h>
#include <stdint.h>

void initTimer0(void){
	DDRD |= (1<<DDD1);						// Configurando PD1 como salida
 242:	8a b1       	in	r24, 0x0a	; 10
 244:	82 60       	ori	r24, 0x02	; 2
 246:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PORTD1);					// Se apaga el puertoD1
 248:	8b b1       	in	r24, 0x0b	; 11
 24a:	82 60       	ori	r24, 0x02	; 2
 24c:	8b b9       	out	0x0b, r24	; 11
	TCCR0B |= (1<<CS01) ;					// CONFIGURA EL PRESCALER A 8 PARA UN RELOJ DE 16MHZ
 24e:	85 b5       	in	r24, 0x25	; 37
 250:	82 60       	ori	r24, 0x02	; 2
 252:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 240;							// CARGA EL VALOR INICIAL DEL CONTADOR
 254:	80 ef       	ldi	r24, 0xF0	; 240
 256:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= (1 << TOIE0);					// Habilita la interrupción del overflow en el timer 0
 258:	ee e6       	ldi	r30, 0x6E	; 110
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
 262:	08 95       	ret

00000264 <initUART9600>:
}

void Respuesta (uint8_t response){
	// Se carga el valor del ASCII dentro de los respectivos puesrtos
	PORTB = response;
	PORTC |= response>> 6;
 264:	8a b1       	in	r24, 0x0a	; 10
 266:	8e 7f       	andi	r24, 0xFE	; 254
 268:	8a b9       	out	0x0a, r24	; 10
 26a:	8a b1       	in	r24, 0x0a	; 10
 26c:	82 60       	ori	r24, 0x02	; 2
 26e:	8a b9       	out	0x0a, r24	; 10
 270:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 274:	e1 ec       	ldi	r30, 0xC1	; 193
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	10 82       	st	Z, r1
 27a:	80 81       	ld	r24, Z
 27c:	88 69       	ori	r24, 0x98	; 152
 27e:	80 83       	st	Z, r24
 280:	e2 ec       	ldi	r30, 0xC2	; 194
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	10 82       	st	Z, r1
 286:	80 81       	ld	r24, Z
 288:	86 60       	ori	r24, 0x06	; 6
 28a:	80 83       	st	Z, r24
 28c:	87 e6       	ldi	r24, 0x67	; 103
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 294:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 298:	08 95       	ret

0000029a <ValorRecibido>:
}

uint8_t ValorRecibido(void){
	while (!(UCSR0A & (1 << RXC0)));
 29a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 29e:	88 23       	and	r24, r24
 2a0:	e4 f7       	brge	.-8      	; 0x29a <ValorRecibido>
	return UDR0;
 2a2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2a6:	08 95       	ret

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
