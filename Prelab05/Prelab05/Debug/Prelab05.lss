
Prelab05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000242  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b7  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007aa  00000000  00000000  00000cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000519  00000000  00000000  0000149d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  000019b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046b  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000133  00000000  00000000  00001efb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  88:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
#include <stdint.h>

void initADC(uint8_t puertoADC){
	
	// Se selecciona un canal
	ADMUX = 0;
  90:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	if(puertoADC == 5){
  94:	85 30       	cpi	r24, 0x05	; 5
  96:	31 f4       	brne	.+12     	; 0xa4 <initADC+0x14>
		ADMUX |= (1<<MUX3)|(1<<MUX1);
  98:	ec e7       	ldi	r30, 0x7C	; 124
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	8a 60       	ori	r24, 0x0A	; 10
  a0:	80 83       	st	Z, r24
  a2:	0f c0       	rjmp	.+30     	; 0xc2 <initADC+0x32>
	}	
	else if(puertoADC == 6){
  a4:	86 30       	cpi	r24, 0x06	; 6
  a6:	31 f4       	brne	.+12     	; 0xb4 <initADC+0x24>
		ADMUX |= (1<<MUX2)|(1<<MUX1);
  a8:	ec e7       	ldi	r30, 0x7C	; 124
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	86 60       	ori	r24, 0x06	; 6
  b0:	80 83       	st	Z, r24
  b2:	07 c0       	rjmp	.+14     	; 0xc2 <initADC+0x32>
	} 
	else if(puertoADC == 7){
  b4:	87 30       	cpi	r24, 0x07	; 7
  b6:	29 f4       	brne	.+10     	; 0xc2 <initADC+0x32>
		ADMUX |= (1<<MUX3)|(1<<MUX2)|(1<<MUX1);
  b8:	ec e7       	ldi	r30, 0x7C	; 124
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	8e 60       	ori	r24, 0x0E	; 14
  c0:	80 83       	st	Z, r24
	} 
	
	// Se selecciona el voltaje VREF 5V
	ADMUX |= (1<<REFS0);
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  cc:	80 81       	ld	r24, Z
  ce:	8f 77       	andi	r24, 0x7F	; 127
  d0:	80 83       	st	Z, r24
	// Se justifica hacia la izquierda la salida del adc
	ADMUX |= (1 << ADLAR);
  d2:	80 81       	ld	r24, Z
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	80 83       	st	Z, r24
	// Habilitar prescaler de 16M/128 fadc = 125khz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	87 60       	ori	r24, 0x07	; 7
  e0:	80 83       	st	Z, r24
	// Activar la interrupcion del ADC
	ADCSRA |= (1<<ADIE);
  e2:	80 81       	ld	r24, Z
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	80 83       	st	Z, r24
	// Se activa el ADC
	ADCSRA |= (1<< ADEN);
  e8:	80 81       	ld	r24, Z
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret

000000f0 <setup>:
}

// Subrutina setup ------------------------------------------------------------
void setup(void){
	// Se apaga tx y rx
	UCSR0B = 0;
  f0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  f4:	08 95       	ret

000000f6 <main>:
void setup(void);

int main(void)
{
	
    cli();								// Deshabilitar interrupciones globales
  f6:	f8 94       	cli
    setup();							// Dirigirse a la subrutina setup
  f8:	0e 94 78 00 	call	0xf0	; 0xf0 <setup>
	initADC(6);
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	initPWM1FastA(invertido, 1024);
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	74 e0       	ldi	r23, 0x04	; 4
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 b0 00 	call	0x160	; 0x160 <initPWM1FastA>
    sei();								// Habilitar interrupciones globales
 10c:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	89 ef       	ldi	r24, 0xF9	; 249
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x1e>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x28>
 11e:	00 00       	nop
	
    while (1)
    {
	    _delay_ms(20);					// Delay de 20 ms
	    // Se comienza la conversion en ADC
	    ADCSRA |= (1<< ADSC);
 120:	ea e7       	ldi	r30, 0x7A	; 122
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	80 64       	ori	r24, 0x40	; 64
 128:	80 83       	st	Z, r24
		updateDutyCyclePWM1A(ADCH);
 12a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 cc 00 	call	0x198	; 0x198 <updateDutyCyclePWM1A>
 134:	ec cf       	rjmp	.-40     	; 0x10e <main+0x18>

00000136 <__vector_21>:
	UCSR0B = 0;
}

// Vector de interrupcion ADC -------------------------------------------------
ISR(ADC_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
	// Se escribe con un 1 lógico la bandera para apagarla
	ADCSRA |= (1<<ADIF);
 146:	ea e7       	ldi	r30, 0x7A	; 122
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	80 61       	ori	r24, 0x10	; 16
 14e:	80 83       	st	Z, r24
}
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <initPWM1FastA>:
	}
	// Configurando modo FAST PWM1 8-bit TOP 0X00FF
	TCCR1A |= (1<<WGM11)|(1<<WGM10);
	// Configurando prescaler de 1024
	if (prescaler==1024){
		TCCR1B |= (1<<CS12)|(1<<CS10);
 160:	94 b1       	in	r25, 0x04	; 4
 162:	92 60       	ori	r25, 0x02	; 2
 164:	94 b9       	out	0x04, r25	; 4
 166:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 16a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 16e:	88 23       	and	r24, r24
 170:	29 f0       	breq	.+10     	; 0x17c <initPWM1FastA+0x1c>
 172:	e0 e8       	ldi	r30, 0x80	; 128
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	80 6c       	ori	r24, 0xC0	; 192
 17a:	80 83       	st	Z, r24
 17c:	e0 e8       	ldi	r30, 0x80	; 128
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	81 60       	ori	r24, 0x01	; 1
 184:	80 83       	st	Z, r24
 186:	61 15       	cp	r22, r1
 188:	74 40       	sbci	r23, 0x04	; 4
 18a:	29 f4       	brne	.+10     	; 0x196 <initPWM1FastA+0x36>
 18c:	e1 e8       	ldi	r30, 0x81	; 129
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	85 60       	ori	r24, 0x05	; 5
 194:	80 83       	st	Z, r24
 196:	08 95       	ret

00000198 <updateDutyCyclePWM1A>:
	}
}

void updateDutyCyclePWM1A(uint8_t duty){
	mapeado = (duty * 13) + 3277;
 198:	9d e0       	ldi	r25, 0x0D	; 13
 19a:	89 9f       	mul	r24, r25
 19c:	90 01       	movw	r18, r0
 19e:	11 24       	eor	r1, r1
 1a0:	23 53       	subi	r18, 0x33	; 51
 1a2:	33 4f       	sbci	r19, 0xF3	; 243
 1a4:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <mapeado+0x1>
 1a8:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <mapeado>
	mapeadoH = mapeado & 0xFF00;
 1ac:	a9 01       	movw	r20, r18
 1ae:	44 27       	eor	r20, r20
 1b0:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <mapeadoH+0x1>
 1b4:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <mapeadoH>
	mapeadodH = mapeadoH >>8;
 1b8:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <mapeadodH>
	mapeadoL = mapeado & 0x00FF;
 1bc:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
	OCR1AH = 0;
 1c0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = duty;
 1c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1c8:	08 95       	ret

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
