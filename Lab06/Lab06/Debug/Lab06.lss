
Lab06.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  0000038a  0000041e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800166  00800166  00000484  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a8e  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000832  00000000  00000000  00001012  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ef  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046c  00000000  00000000  00001f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000209  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000025d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 36       	cpi	r26, 0x66	; 102
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e6       	ldi	r26, 0x66	; 102
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 3a       	cpi	r26, 0xAB	; 171
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  9e:	0c 94 c3 01 	jmp	0x386	; 0x386 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
 */ 
#include <avr/io.h>
#include <stdint.h>

void initADC(uint8_t puertoADC){
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	// Se selecciona un canal
	ADMUX = puertoADC;
  ac:	80 83       	st	Z, r24
	
	// Se selecciona el voltaje VREF 5V
	ADMUX |= (1<<REFS0);
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  b4:	80 81       	ld	r24, Z
  b6:	8f 77       	andi	r24, 0x7F	; 127
  b8:	80 83       	st	Z, r24
	// Se justifica hacia la izquierda la salida del adc
	ADMUX |= (1 << ADLAR);
  ba:	80 81       	ld	r24, Z
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	80 83       	st	Z, r24
	// Habilitar prescaler de 16M/128 fadc = 125khz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	87 60       	ori	r24, 0x07	; 7
  c8:	80 83       	st	Z, r24
	// Activar la interrupcion del ADC
	ADCSRA |= (1<<ADIE);
  ca:	80 81       	ld	r24, Z
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	80 83       	st	Z, r24
	// Se activa el ADC
	ADCSRA |= (1<< ADEN);
  d0:	80 81       	ld	r24, Z
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <main>:
uint8_t res;

int main(void)
{
	
    DDRB = 0xFF;  // Salida hacia LEDs
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	84 b9       	out	0x04, r24	; 4
    PORTB = 0;	// Apagar el puerto B
  dc:	15 b8       	out	0x05, r1	; 5
	DDRC = 0x03; // Salida de PC0 Y PC1
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	87 b9       	out	0x07, r24	; 7
	PORTC = 0; // Apagar el puerto C
  e2:	18 b8       	out	0x08, r1	; 8
    
    initUART9600();
  e4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <initUART9600>
    
    sei(); //Activar interrupciones
  e8:	78 94       	sei
   // writeUART('\n');
    //cadena("HOLA MUNDO");
	
	Menu("\n Que desea realizar? \n 1. Leer Pot \n 2. Enviar ASCII \n 3. Reiniciar \n");
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 a9 01 	call	0x352	; 0x352 <Menu>
	
    while (1)
    {
		if (estado==1){
  f2:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <estado>
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	69 f4       	brne	.+26     	; 0x114 <main+0x3c>
		initADC(7);
  fa:	87 e0       	ldi	r24, 0x07	; 7
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
		ADCSRA |= (1 << ADSC);   //Leer puerto de ADC
 100:	ea e7       	ldi	r30, 0x7A	; 122
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 64       	ori	r24, 0x40	; 64
 108:	80 83       	st	Z, r24
		ADCONvalue = ADCH;		// Guardar el valor de ADCH en la variable uint ADCONvalue
 10a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 10e:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <ADCONvalue>
 112:	06 c0       	rjmp	.+12     	; 0x120 <main+0x48>
		}
		
		else if (estado==2){
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	21 f4       	brne	.+8      	; 0x120 <main+0x48>
		Respuesta(bufferRX);	//Registrar la respuesta proveniente del buffer
 118:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <bufferRX>
 11c:	0e 94 ba 01 	call	0x374	; 0x374 <Respuesta>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	8f e3       	ldi	r24, 0x3F	; 63
 122:	9c e9       	ldi	r25, 0x9C	; 156
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x4c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x52>
 12a:	00 00       	nop
 12c:	e2 cf       	rjmp	.-60     	; 0xf2 <main+0x1a>

0000012e <__vector_21>:
    }
}

// Vector de interrupcion ADC -------------------------------------------------
ISR(ADC_vect)
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	8f 93       	push	r24
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
	// Se escribe con un 1 lógico la bandera para apagarla
	ADCSRA |= (1<<ADIF);
 13e:	ea e7       	ldi	r30, 0x7A	; 122
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	80 61       	ori	r24, 0x10	; 16
 146:	80 83       	st	Z, r24
}
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <__vector_18>:

ISR(USART_RX_vect)
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	 bufferRX = UDR0;
 17a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 17e:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <bufferRX>

	if (bufferRX == 0x31){
 182:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <bufferRX>
 186:	81 33       	cpi	r24, 0x31	; 49
 188:	09 f0       	breq	.+2      	; 0x18c <__vector_18+0x34>
 18a:	8b c0       	rjmp	.+278    	; 0x2a2 <__vector_18+0x14a>
		estado = 1;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <estado>
		if(ADCONvalue/100 != 0){
 192:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <ADCONvalue>
 196:	84 36       	cpi	r24, 0x64	; 100
 198:	70 f0       	brcs	.+28     	; 0x1b6 <__vector_18+0x5e>
			res++;
 19a:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <res>
 19e:	9f 5f       	subi	r25, 0xFF	; 255
 1a0:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <res>
			USB_In_Buffer[0] = (ADCONvalue / 100) + 0x30;
 1a4:	99 e2       	ldi	r25, 0x29	; 41
 1a6:	89 9f       	mul	r24, r25
 1a8:	91 2d       	mov	r25, r1
 1aa:	11 24       	eor	r1, r1
 1ac:	92 95       	swap	r25
 1ae:	9f 70       	andi	r25, 0x0F	; 15
 1b0:	90 5d       	subi	r25, 0xD0	; 208
 1b2:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <__data_end>
		}
		if(ADCONvalue/10 != 0){
 1b6:	8a 30       	cpi	r24, 0x0A	; 10
 1b8:	a0 f1       	brcs	.+104    	; 0x222 <__vector_18+0xca>
			res++;
 1ba:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <res>
 1be:	9f 5f       	subi	r25, 0xFF	; 255
 1c0:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <res>
			if(res == 1){
 1c4:	91 30       	cpi	r25, 0x01	; 1
 1c6:	b9 f4       	brne	.+46     	; 0x1f6 <__vector_18+0x9e>
				USB_In_Buffer[0] = (ADCONvalue / 10)%10 + 0x30;
 1c8:	9d ec       	ldi	r25, 0xCD	; 205
 1ca:	89 9f       	mul	r24, r25
 1cc:	21 2d       	mov	r18, r1
 1ce:	11 24       	eor	r1, r1
 1d0:	26 95       	lsr	r18
 1d2:	26 95       	lsr	r18
 1d4:	26 95       	lsr	r18
 1d6:	29 9f       	mul	r18, r25
 1d8:	91 2d       	mov	r25, r1
 1da:	11 24       	eor	r1, r1
 1dc:	96 95       	lsr	r25
 1de:	96 95       	lsr	r25
 1e0:	96 95       	lsr	r25
 1e2:	99 0f       	add	r25, r25
 1e4:	39 2f       	mov	r19, r25
 1e6:	33 0f       	add	r19, r19
 1e8:	33 0f       	add	r19, r19
 1ea:	93 0f       	add	r25, r19
 1ec:	29 1b       	sub	r18, r25
 1ee:	20 5d       	subi	r18, 0xD0	; 208
 1f0:	20 93 66 01 	sts	0x0166, r18	; 0x800166 <__data_end>
 1f4:	16 c0       	rjmp	.+44     	; 0x222 <__vector_18+0xca>
				}else{
				USB_In_Buffer[1] = (ADCONvalue / 10)%10 + 0x30;
 1f6:	9d ec       	ldi	r25, 0xCD	; 205
 1f8:	89 9f       	mul	r24, r25
 1fa:	21 2d       	mov	r18, r1
 1fc:	11 24       	eor	r1, r1
 1fe:	26 95       	lsr	r18
 200:	26 95       	lsr	r18
 202:	26 95       	lsr	r18
 204:	29 9f       	mul	r18, r25
 206:	91 2d       	mov	r25, r1
 208:	11 24       	eor	r1, r1
 20a:	96 95       	lsr	r25
 20c:	96 95       	lsr	r25
 20e:	96 95       	lsr	r25
 210:	99 0f       	add	r25, r25
 212:	39 2f       	mov	r19, r25
 214:	33 0f       	add	r19, r19
 216:	33 0f       	add	r19, r19
 218:	93 0f       	add	r25, r19
 21a:	29 1b       	sub	r18, r25
 21c:	20 5d       	subi	r18, 0xD0	; 208
 21e:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <__data_end+0x1>
			}
		}
		res++;
 222:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <res>
 226:	9f 5f       	subi	r25, 0xFF	; 255
 228:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <res>
		if(res == 1){
 22c:	91 30       	cpi	r25, 0x01	; 1
 22e:	89 f4       	brne	.+34     	; 0x252 <__vector_18+0xfa>
			USB_In_Buffer[0] = ADCONvalue % 10 + 0x30;
 230:	9d ec       	ldi	r25, 0xCD	; 205
 232:	89 9f       	mul	r24, r25
 234:	91 2d       	mov	r25, r1
 236:	11 24       	eor	r1, r1
 238:	96 95       	lsr	r25
 23a:	96 95       	lsr	r25
 23c:	96 95       	lsr	r25
 23e:	99 0f       	add	r25, r25
 240:	29 2f       	mov	r18, r25
 242:	22 0f       	add	r18, r18
 244:	22 0f       	add	r18, r18
 246:	92 0f       	add	r25, r18
 248:	89 1b       	sub	r24, r25
 24a:	80 5d       	subi	r24, 0xD0	; 208
 24c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__data_end>
 250:	23 c0       	rjmp	.+70     	; 0x298 <__vector_18+0x140>
			}else if(res == 2){
 252:	92 30       	cpi	r25, 0x02	; 2
 254:	89 f4       	brne	.+34     	; 0x278 <__vector_18+0x120>
			USB_In_Buffer[1] = ADCONvalue % 10 + 0x30;
 256:	9d ec       	ldi	r25, 0xCD	; 205
 258:	89 9f       	mul	r24, r25
 25a:	91 2d       	mov	r25, r1
 25c:	11 24       	eor	r1, r1
 25e:	96 95       	lsr	r25
 260:	96 95       	lsr	r25
 262:	96 95       	lsr	r25
 264:	99 0f       	add	r25, r25
 266:	29 2f       	mov	r18, r25
 268:	22 0f       	add	r18, r18
 26a:	22 0f       	add	r18, r18
 26c:	92 0f       	add	r25, r18
 26e:	89 1b       	sub	r24, r25
 270:	80 5d       	subi	r24, 0xD0	; 208
 272:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <__data_end+0x1>
 276:	10 c0       	rjmp	.+32     	; 0x298 <__vector_18+0x140>
			}else{
			USB_In_Buffer[2] = ADCONvalue % 10 + 0x30;
 278:	9d ec       	ldi	r25, 0xCD	; 205
 27a:	89 9f       	mul	r24, r25
 27c:	91 2d       	mov	r25, r1
 27e:	11 24       	eor	r1, r1
 280:	96 95       	lsr	r25
 282:	96 95       	lsr	r25
 284:	96 95       	lsr	r25
 286:	99 0f       	add	r25, r25
 288:	29 2f       	mov	r18, r25
 28a:	22 0f       	add	r18, r18
 28c:	22 0f       	add	r18, r18
 28e:	92 0f       	add	r25, r18
 290:	89 1b       	sub	r24, r25
 292:	80 5d       	subi	r24, 0xD0	; 208
 294:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end+0x2>
		}
		cadena(USB_In_Buffer);
 298:	86 e6       	ldi	r24, 0x66	; 102
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 98 01 	call	0x330	; 0x330 <cadena>
 2a0:	1b c0       	rjmp	.+54     	; 0x2d8 <__vector_18+0x180>
	}
	else if (bufferRX == 0x32) {
 2a2:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <bufferRX>
 2a6:	82 33       	cpi	r24, 0x32	; 50
 2a8:	51 f4       	brne	.+20     	; 0x2be <__vector_18+0x166>
		PORTB &= !(1<<PORTB1);
 2aa:	85 b1       	in	r24, 0x05	; 5
 2ac:	15 b8       	out	0x05, r1	; 5
		estado = 2;
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <estado>
		Menu("\n Ingrese el ASCII a enviar \n");
 2b4:	87 e4       	ldi	r24, 0x47	; 71
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	0e 94 a9 01 	call	0x352	; 0x352 <Menu>
 2bc:	0d c0       	rjmp	.+26     	; 0x2d8 <__vector_18+0x180>
	}
	else if (bufferRX == 0x33) {
 2be:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <bufferRX>
 2c2:	83 33       	cpi	r24, 0x33	; 51
 2c4:	49 f4       	brne	.+18     	; 0x2d8 <__vector_18+0x180>
		estado = 3;
 2c6:	83 e0       	ldi	r24, 0x03	; 3
 2c8:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <estado>
		Menu("\n Que desea realizar? \n 1. Leer Pot \n 2. Enviar ASCII \n 3. Reiniciar \n");
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 a9 01 	call	0x352	; 0x352 <Menu>
		PORTB = 0x00;
 2d4:	15 b8       	out	0x05, r1	; 5
		PORTC = 0x00;
 2d6:	18 b8       	out	0x08, r1	; 8
	}
	//PORTB = bufferTX;
	//PORTC |= bufferTX>> 6;
	//	while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
	//UDR0 = bufferTX;	
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	7f 91       	pop	r23
 2e6:	6f 91       	pop	r22
 2e8:	5f 91       	pop	r21
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <initUART9600>:
}

void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
	UDR0 = Caracter;
 2fa:	8a b1       	in	r24, 0x0a	; 10
 2fc:	8e 7f       	andi	r24, 0xFE	; 254
 2fe:	8a b9       	out	0x0a, r24	; 10
 300:	8a b1       	in	r24, 0x0a	; 10
 302:	82 60       	ori	r24, 0x02	; 2
 304:	8a b9       	out	0x0a, r24	; 10
 306:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 30a:	e1 ec       	ldi	r30, 0xC1	; 193
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	10 82       	st	Z, r1
 310:	80 81       	ld	r24, Z
 312:	88 69       	ori	r24, 0x98	; 152
 314:	80 83       	st	Z, r24
 316:	e2 ec       	ldi	r30, 0xC2	; 194
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	10 82       	st	Z, r1
 31c:	80 81       	ld	r24, Z
 31e:	86 60       	ori	r24, 0x06	; 6
 320:	80 83       	st	Z, r24
 322:	87 e6       	ldi	r24, 0x67	; 103
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 32a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 32e:	08 95       	ret

00000330 <cadena>:
	
}

void cadena (unsigned char* texto){
 330:	ac 01       	movw	r20, r24
	uint8_t i;
	for(i=0; texto[i]!='\0'; i++){
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	07 c0       	rjmp	.+14     	; 0x344 <cadena+0x14>
		while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
 336:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 33a:	95 ff       	sbrs	r25, 5
 33c:	fc cf       	rjmp	.-8      	; 0x336 <cadena+0x6>
		UDR0 = texto[i];
 33e:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
}

void cadena (unsigned char* texto){
	uint8_t i;
	for(i=0; texto[i]!='\0'; i++){
 342:	2f 5f       	subi	r18, 0xFF	; 255
 344:	fa 01       	movw	r30, r20
 346:	e2 0f       	add	r30, r18
 348:	f1 1d       	adc	r31, r1
 34a:	30 81       	ld	r19, Z
 34c:	31 11       	cpse	r19, r1
 34e:	f3 cf       	rjmp	.-26     	; 0x336 <cadena+0x6>
		while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
		UDR0 = texto[i];
		//_delay_ms(1000);
	}
	
}
 350:	08 95       	ret

00000352 <Menu>:

void Menu (char* text){
 352:	ac 01       	movw	r20, r24
	uint8_t i;
	for(i=0; text[i]!='\0'; i++){
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	07 c0       	rjmp	.+14     	; 0x366 <Menu+0x14>
		while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
 358:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 35c:	95 ff       	sbrs	r25, 5
 35e:	fc cf       	rjmp	.-8      	; 0x358 <Menu+0x6>
		UDR0 = text[i];
 360:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
}

void Menu (char* text){
	uint8_t i;
	for(i=0; text[i]!='\0'; i++){
 364:	2f 5f       	subi	r18, 0xFF	; 255
 366:	fa 01       	movw	r30, r20
 368:	e2 0f       	add	r30, r18
 36a:	f1 1d       	adc	r31, r1
 36c:	30 81       	ld	r19, Z
 36e:	31 11       	cpse	r19, r1
 370:	f3 cf       	rjmp	.-26     	; 0x358 <Menu+0x6>
		while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
		UDR0 = text[i];
	}
	
}
 372:	08 95       	ret

00000374 <Respuesta>:

void Respuesta (uint8_t response){
	//uint8_t respuesta1 = response && 0x03;
	PORTB = response;
 374:	85 b9       	out	0x05, r24	; 5
	PORTC |= response>> 6;
 376:	98 b1       	in	r25, 0x08	; 8
 378:	82 95       	swap	r24
 37a:	86 95       	lsr	r24
 37c:	86 95       	lsr	r24
 37e:	83 70       	andi	r24, 0x03	; 3
 380:	89 2b       	or	r24, r25
 382:	88 b9       	out	0x08, r24	; 8
 384:	08 95       	ret

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
