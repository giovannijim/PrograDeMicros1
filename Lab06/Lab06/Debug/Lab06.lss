
Lab06.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000190  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010c  0080010c  00000230  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087f  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000770  00000000  00000000  00000b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f8  00000000  00000000  000012ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  000016e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fc  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e6  00000000  00000000  00001b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001c82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

volatile uint8_t  bufferTX;

int main(void)
{
    DDRB = 0xFF;  // Salida hacia LEDs
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 b9       	out	0x04, r24	; 4
    PORTB = 0;	// Apagar el puerto B
  aa:	15 b8       	out	0x05, r1	; 5
	DDRC = 0x03; // Salida de PC0 Y PC1
  ac:	83 e0       	ldi	r24, 0x03	; 3
  ae:	87 b9       	out	0x07, r24	; 7
	PORTC = 0; // Apagar el puerto C
  b0:	18 b8       	out	0x08, r1	; 8
    
    initUART9600();
  b2:	0e 94 9a 00 	call	0x134	; 0x134 <initUART9600>
    
    sei(); //Activar interrupciones
  b6:	78 94       	sei
   // writeUART('\n');
    cadena("HOLA MUNDO");
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	0e 94 b5 00 	call	0x16a	; 0x16a <cadena>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	8f e3       	ldi	r24, 0x3F	; 63
  c2:	9c e9       	ldi	r25, 0x9C	; 156
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x1e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x24>
  ca:	00 00       	nop
  cc:	f9 cf       	rjmp	.-14     	; 0xc0 <main+0x1a>

000000ce <__vector_21>:
    }
}

// Vector de interrupcion ADC -------------------------------------------------
ISR(ADC_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	// Se escribe con un 1 lógico la bandera para apagarla
	ADCSRA |= (1<<ADIF);
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 61       	ori	r24, 0x10	; 16
  e6:	80 83       	st	Z, r24
}
  e8:	ff 91       	pop	r31
  ea:	ef 91       	pop	r30
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <__vector_18>:

ISR(USART_RX_vect)
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
	bufferTX = UDR0;
 106:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 10a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	PORTB = bufferTX;
 10e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 112:	85 b9       	out	0x05, r24	; 5
	PORTC |= bufferTX>> 6;
 114:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 118:	82 95       	swap	r24
 11a:	86 95       	lsr	r24
 11c:	86 95       	lsr	r24
 11e:	83 70       	andi	r24, 0x03	; 3
 120:	98 b1       	in	r25, 0x08	; 8
 122:	89 2b       	or	r24, r25
 124:	88 b9       	out	0x08, r24	; 8
	//	while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
	//UDR0 = bufferTX;	
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <initUART9600>:
}

void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
	UDR0 = Caracter;
 134:	8a b1       	in	r24, 0x0a	; 10
 136:	8e 7f       	andi	r24, 0xFE	; 254
 138:	8a b9       	out	0x0a, r24	; 10
 13a:	8a b1       	in	r24, 0x0a	; 10
 13c:	82 60       	ori	r24, 0x02	; 2
 13e:	8a b9       	out	0x0a, r24	; 10
 140:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 144:	e1 ec       	ldi	r30, 0xC1	; 193
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	10 82       	st	Z, r1
 14a:	80 81       	ld	r24, Z
 14c:	88 69       	ori	r24, 0x98	; 152
 14e:	80 83       	st	Z, r24
 150:	e2 ec       	ldi	r30, 0xC2	; 194
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	10 82       	st	Z, r1
 156:	80 81       	ld	r24, Z
 158:	86 60       	ori	r24, 0x06	; 6
 15a:	80 83       	st	Z, r24
 15c:	87 e6       	ldi	r24, 0x67	; 103
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 164:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 168:	08 95       	ret

0000016a <cadena>:
	
}

void cadena (char* texto){
 16a:	ac 01       	movw	r20, r24
	uint8_t i;
	for(i=0; texto[i]!='\0'; i++){
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	07 c0       	rjmp	.+14     	; 0x17e <cadena+0x14>
		while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
 170:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 174:	95 ff       	sbrs	r25, 5
 176:	fc cf       	rjmp	.-8      	; 0x170 <cadena+0x6>
		UDR0 = texto[i];
 178:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
}

void cadena (char* texto){
	uint8_t i;
	for(i=0; texto[i]!='\0'; i++){
 17c:	2f 5f       	subi	r18, 0xFF	; 255
 17e:	fa 01       	movw	r30, r20
 180:	e2 0f       	add	r30, r18
 182:	f1 1d       	adc	r31, r1
 184:	30 81       	ld	r19, Z
 186:	31 11       	cpse	r19, r1
 188:	f3 cf       	rjmp	.-26     	; 0x170 <cadena+0x6>
		while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
		UDR0 = texto[i];
		//_delay_ms(1000);
	}
	
 18a:	08 95       	ret

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
